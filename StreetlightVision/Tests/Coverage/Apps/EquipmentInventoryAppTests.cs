using NUnit.Framework;
using StreetlightVision.Extensions;
using StreetlightVision.Models;
using StreetlightVision.Pages;
using StreetlightVision.Utilities;
using System;
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;

namespace StreetlightVision.Tests.Coverage.Apps
{
    [TestFixture]
    [Parallelizable(ParallelScope.All)]
    public class EquipmentInventoryAppTests : TestBase
    {
        #region Variables

        private readonly string _exportedFilePattern = "Equipment_Inventory*.csv";       

        #endregion //Variables

        #region Contructors

        #endregion //Contructors        

        #region Test Cases        

        [Test, DynamicRetry]
        [Description("EI_01 Geozone - Create")]
        public void EI_01()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI01");
            var newGeozone = SLVHelper.GenerateUniqueName("GZNEI01N");
            var newParentGeozone = Settings.RootGeozoneName;

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI01*");
            CreateNewGeozone(geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("5. Dropdown Add menu then click Add Geozone menu item");
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddGeozoneMenuItem();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();            

            Step("6. Verify A new geozone is added into Geozone Tree and get being selected under geozone A at step #3. Its name starts with 'New GeoZone'");
            var newNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyTrue("[SC-1937] 6. Verify A new geozone is starting with 'New Geozone'", newNodeName.StartsWith("New GeoZone"), "Starting with 'New GeoZone'", newNodeName);
            var newNodeParentGeozone = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeParentGeozone();
            VerifyEqual(string.Format("[SC-1937] 6. Verify A new geozone is under geozone '{0}'", geozone), geozone, newNodeParentGeozone);
            
            Step("7. Verify Map recorder panel appears with text 'Resize and move geoZone's bounds on the map. Click here to confirm.'");
            VerifyEqual("7. Verify Map recorder panel appears", true, equipmentInventoryPage.Map.IsRecorderDisplayed());
            VerifyEqual("7. Verify Map recorder text is 'Resize and move geoZone's bounds on the map. Click here to confirm.'", "Resize and move geoZone's bounds on the map. Click here to confirm.", equipmentInventoryPage.Map.GetRecorderText());

            Step("8. Verify The image next to the text is displayed properly (covered SC-1954)");
            VerifyEqual("[SC-1954] 8. Verify The image next to the text is displayed properly", true, equipmentInventoryPage.Map.IsRecorderIconDisplayed());

            Step("9. Verify Geozone Editor panel disappears");
            VerifyEqual("9. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("10. Specify boundary of the new geozone by steps: zoom in the map using mouse scroll button; zoom in once more time using zooming bar of the map; drag the map");
            equipmentInventoryPage.Map.DragMapToRandomLocation();
            equipmentInventoryPage.Map.ZoomInToGLLevel(ZoomGLLevel.m50);

            Step("11. Click map recorder button");
            equipmentInventoryPage.Map.ClickRecorderButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("12. Verify Geozone Editor panel appears again");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("12. Verify Geozone Editor panel appears again", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("13. Verify Value of Name field is the value at step #6");
            var newAutoGeozoneName = equipmentInventoryPage.GeozoneEditorPanel.GetNameValue();
            VerifyEqual("13. Verify Value of Name field is the value at step #6", true, newAutoGeozoneName.Contains("New GeoZone"));

            Step("14. Verify Value of Parent field is the selected geozone at step #3");
            var newParentGeozoneName = equipmentInventoryPage.GeozoneEditorPanel.GetParentGeozoneValue();
            VerifyEqual("14. Verify Value of Parent field is the selected geozone at step #3", string.Format("{0} [{1}]", geozone, Settings.RootGeozoneName), newParentGeozoneName);

            Step("15. Verify Values of Latitude Minimum, Latitude Maximum, Longitude Minimum, Longitude Maximum are filled");
            VerifyGeozoneLatitudeLongitudeAreFilled(equipmentInventoryPage);

            Step("16. Verify Only 'Properties' tab is visible");
            var tabsList = equipmentInventoryPage.GeozoneEditorPanel.GetListOfTabsName();
            VerifyEqual("16. Verify Only 'Properties' tab is visible", true, tabsList.Count == 1 && tabsList.Contains("Properties"));

            Step("17. Verify In 'Properties' tab, only 'Virtual Energy Consumption' section is visible and expanded");
            var groupsList = equipmentInventoryPage.GeozoneEditorPanel.GetListOfGroupsName();
            VerifyEqual("17. Verify Only 'Virtual Energy Consumption' section is visible", true, groupsList.Count == 1 && groupsList.Contains("Virtual Energy Consumption"));
            VerifyEqual("17. Verify 'Virtual Energy Consumption' section is expanded", true, equipmentInventoryPage.GeozoneEditorPanel.IsGroupExpanded("Virtual Energy Consumption"));

            Step("18. Verify All months of 'Virtual Energy Consumption' section has value 0");
            VerifyVirtualEnergyConsumption(equipmentInventoryPage, "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0");

            Step("19. Change name, parent geozone, virtual energy consumption of 12 months");
            equipmentInventoryPage.GeozoneEditorPanel.EnterNameInput(newGeozone);
            equipmentInventoryPage.GeozoneEditorPanel.SelectParentGeozoneDropDown(newParentGeozone);
            EnterVirtualEnergyConsumptionRandomValues(equipmentInventoryPage);

            Step("20. Notes values of all fields (Name, Parent, Latitude, Longitude, virtual energy consumption value of 12 months)");
            var notedParentGeozoneName = equipmentInventoryPage.GeozoneEditorPanel.GetParentGeozoneValue();
            var notedLatitudeMinimum = equipmentInventoryPage.GeozoneEditorPanel.GetLatitudeMinimumValue();
            var notedLatitudeMaximum = equipmentInventoryPage.GeozoneEditorPanel.GetLatitudeMaximumValue();
            var notedLongitudeMinimum = equipmentInventoryPage.GeozoneEditorPanel.GetLongitudeMinimumValue();
            var notedLongtitudeMaximum = equipmentInventoryPage.GeozoneEditorPanel.GetLongitudeMaximumValue();
            var notedJanValue = equipmentInventoryPage.GeozoneEditorPanel.GetJanuaryValue();
            var notedFebValue = equipmentInventoryPage.GeozoneEditorPanel.GetFebruaryValue();
            var notedMarValue = equipmentInventoryPage.GeozoneEditorPanel.GetMarchValue();
            var notedAprValue = equipmentInventoryPage.GeozoneEditorPanel.GetAprilValue();
            var notedMayValue = equipmentInventoryPage.GeozoneEditorPanel.GetMayValue();
            var notedJunValue = equipmentInventoryPage.GeozoneEditorPanel.GetJuneValue();
            var notedJulValue = equipmentInventoryPage.GeozoneEditorPanel.GetJulyValue();
            var notedAugValue = equipmentInventoryPage.GeozoneEditorPanel.GetAugustValue();
            var notedSepValue = equipmentInventoryPage.GeozoneEditorPanel.GetSeptemberValue();
            var notedOctValue = equipmentInventoryPage.GeozoneEditorPanel.GetOctoberValue();
            var notedNovValue = equipmentInventoryPage.GeozoneEditorPanel.GetNovemberValue();
            var notedDecValue = equipmentInventoryPage.GeozoneEditorPanel.GetDecemberValue();

            Step("21. Click Save");
            equipmentInventoryPage.GeozoneEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("22. Verify Geozone Editor panel disappears");
            VerifyEqual("22. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("23. Verify There is no longer the geozone with name at step #6 under geozone A. There is a geozone with updated name at step #18 under the parent geozone at step #18");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.GeoZone);
            VerifyEqual(string.Format("23. Verify There is no longer the geozone with name '{0}' at step #6 under '{1}'", newAutoGeozoneName, geozone), false, subNodesList.Exists(p => p.Equals(newAutoGeozoneName)));

            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newParentGeozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.GeoZone);
            VerifyEqual(string.Format("23. Verify There is a geozone with updated name '{0}' under the parent geozone '{1}'", newGeozone, newParentGeozone), true, subNodesList.Exists(p => p.Equals(newGeozone)));

            Step("24. Select the newly-created geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newGeozone);

            Step("25. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("26. Verify Geozone Editor panel displays values at step #19");
            VerifyGeozoneBasicInfo(equipmentInventoryPage, newGeozone, notedParentGeozoneName);
            VerifyGeozoneLatitudeLongitude(equipmentInventoryPage, notedLatitudeMinimum, notedLatitudeMaximum, notedLongitudeMinimum, notedLongtitudeMaximum);
            VerifyVirtualEnergyConsumption(equipmentInventoryPage, notedJanValue, notedFebValue, notedMarValue, notedAprValue, notedMayValue, notedJunValue
                , notedJulValue, notedAugValue, notedSepValue, notedOctValue, notedNovValue, notedDecValue);

            Step("27. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("28. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("29. Browse to geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("30. Verify the newly-created geozone is no longer present in geozone A");
            subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.GeoZone);
            VerifyEqual(string.Format("29. Verify the newly-created geozone '{0}' is no longer present in '{1}'", newGeozone, geozone), false, subNodesList.Exists(p => p.Equals(newGeozone)));

            Step("21. Browse to the geozone at step #18");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newParentGeozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("32. Verify the newly-created geozone is present in this geozone");
            subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.GeoZone);
            VerifyEqual(string.Format("[SLV-3846] 32. Verify the newly-created geozone '{0}' is present in geozone '{1}'", newGeozone, newParentGeozone), true, subNodesList.Exists(p => p.Equals(newGeozone)));

            Step("33. Browse to and select the newly-created geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newGeozone);

            Step("34. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("35. Verify Geozone Editor panel displays values at step #19");
            VerifyGeozoneBasicInfo(equipmentInventoryPage, newGeozone, notedParentGeozoneName);
            VerifyGeozoneLatitudeLongitude(equipmentInventoryPage, notedLatitudeMinimum, notedLatitudeMaximum, notedLongitudeMinimum, notedLongtitudeMaximum);
            VerifyVirtualEnergyConsumption(equipmentInventoryPage, notedJanValue, notedFebValue, notedMarValue, notedAprValue, notedMayValue, notedJunValue
                , notedJulValue, notedAugValue, notedSepValue, notedOctValue, notedNovValue, notedDecValue);

            try
            {
                DeleteGeozone(geozone);
                DeleteGeozone(newGeozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_01_01 Geozone - Create - Validation")]
        public void EI_01_01()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI0101");
            var newGeozoneName = SLVHelper.GenerateUniqueName("GZNEI0101N");
            var existingGeozoneName = SLVHelper.GenerateUniqueName("GZNEI0101Ex");

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI0101*");
            CreateNewGeozone(geozone);
            CreateNewGeozone(existingGeozoneName, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Dropdown Add menu then click Add Geozone menu item");
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddGeozoneMenuItem();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();

            Step("6. Verify A new geozone is added into Geozone Tree and get being selected under geozone A at step #3. Its name starts with 'New GeoZone'");
            var newNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyTrue("[SC-1937] 6. Verify A new geozone is starting with 'New Geozone'", newNodeName.StartsWith("New GeoZone"), "Starting with 'New GeoZone'", newNodeName);            
            var newNodeParentGeozone = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeParentGeozone();
            VerifyEqual(string.Format("[SC-1937] 6.Verify A new geozone is under geozone '{0}'", geozone), geozone, newNodeParentGeozone);

            Step("7.Verify Map recorder panel appears with text 'Resize and move geoZone's bounds on the map. Click here to confirm.'");
            VerifyEqual("7. Verify Map recorder panel appears", true, equipmentInventoryPage.Map.IsRecorderDisplayed());
            VerifyEqual("7. Verify Map recorder text is 'Resize and move geoZone's bounds on the map. Click here to confirm.'", "Resize and move geoZone's bounds on the map. Click here to confirm.", equipmentInventoryPage.Map.GetRecorderText());

            Step("8. Verify Geozone Editor panel disappears");
            equipmentInventoryPage.WaitForEditorPanelDisappeared();
            VerifyEqual("8. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("9. Specify boundary of the new geozone by steps: zoom in the map using mouse scroll button; zoom in once more time using zooming bar of the map; drag the map");
            equipmentInventoryPage.Map.DragMapToRandomLocation();
            equipmentInventoryPage.Map.ZoomInToGLLevel(ZoomGLLevel.m50);

            Step("10. Click map recorder button");
            equipmentInventoryPage.Map.ClickRecorderButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("11. Verify Geozone Editor panel appears again");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("12. Clear Name field");
            equipmentInventoryPage.GeozoneEditorPanel.ClearNameInput();

            Step("13. Click Save button");
            equipmentInventoryPage.GeozoneEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("14. Verify A dialog with title 'Warning' and message 'Please enter a name for this geozone.' appears");
            VerifyEqual("14. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("14. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("14. Verify dialog message is 'Please enter a name for this geozone.'", "Please enter a name for this geozone.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("15. Click Ok button");
            equipmentInventoryPage.Dialog.ClickOkButton();

            Step("16. Verify The dialog disappears");
            equipmentInventoryPage.WaitForPopupDialogDisappeared();
            VerifyEqual("16. Verify A dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("17. Enter non-numeric values in to 12-months numeric up down fields");
            equipmentInventoryPage.GeozoneEditorPanel.EnterJanuaryNumericInput("a", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterFebruaryNumericInput("b", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterMarchNumericInput("c", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterAprilNumericInput("d", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterMayNumericInput("@", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterJuneNumericInput("#", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterJulyNumericInput("$", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterAugustNumericInput("m", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterSeptemberNumericInput("n", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterOctoberNumericInput("k", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterNovemberNumericInput(@"\", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterDecemberNumericInput("'", false);

            Step("18. Verify Values of 12-month fields are remain to be '0'");
            VerifyVirtualEnergyConsumption(equipmentInventoryPage, "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0");

            Step("19. Enter a name of a sibling geozone into Name field");            
            equipmentInventoryPage.GeozoneEditorPanel.EnterNameInput(existingGeozoneName);

            Step("20. Click Save button");
            equipmentInventoryPage.GeozoneEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("21. Verify A dialog with title 'Warning' and message 'This geozone name already exists!' appears");
            var isPopupDialogDisplayed = equipmentInventoryPage.IsPopupDialogDisplayed();
            VerifyEqual("21. [SC-560] Verify A dialog with title 'Warning' and message 'This geozone name already exists!' appears", true, isPopupDialogDisplayed);
            if (isPopupDialogDisplayed)
            {
                VerifyEqual("21. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
                VerifyEqual("21. Verify dialog message is 'This geozone name already exists!'", "This geozone name already exists!", equipmentInventoryPage.Dialog.GetMessageText());
            }
            else
            {
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(existingGeozoneName);
                equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            }

            Step("22. Enter an unexisting geozone name");
            equipmentInventoryPage.GeozoneEditorPanel.EnterNameInput(newGeozoneName);

            Step("23. Click Save button");
            equipmentInventoryPage.GeozoneEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("24. Verify The new geozone is created and present in its parent geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.GeoZone);
            VerifyEqual(string.Format("24. Verify The new geozone '{0}' is created and present in its parent geozone '{1}'", newGeozoneName, geozone), true, subNodesList.Exists(p => p.Equals(newGeozoneName)));

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_02 Geozone - Update")]
        public void EI_02()
        {
            var geozoneName = SLVHelper.GenerateUniqueName("GZNEI02");        
            var newGeozonePath = string.Format(@"{0}\{1}", Settings.RootGeozoneName, geozoneName);
            var parentGeozoneFullName = newGeozonePath.GetParentFullName();
            var parentGeozoneName = newGeozonePath.GetParentName();
            var newGeozoneName = SLVHelper.GenerateUniqueName("GZNEI02N");
            var newParentGeozoneName = SLVHelper.GenerateUniqueName("GZNEI02P"); ;
            var newParentGeozoneFullName = string.Format("{0} [{1}]", newParentGeozoneName, Settings.RootGeozoneName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI02*");
            CreateNewGeozone(newParentGeozoneName);
            CreateNewGeozone(geozoneName);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newGeozonePath);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Verify Value of Name field is the name of geozone A");
            VerifyEqual(string.Format("5. Verify Name field is {0}", geozoneName), geozoneName, equipmentInventoryPage.GeozoneEditorPanel.GetNameValue());

            Step("6. Verify Value of Parent field is the name of geozone A's parent geozone");
            VerifyEqual(string.Format("6. Verify Parent field is {0}", parentGeozoneName), parentGeozoneName, equipmentInventoryPage.GeozoneEditorPanel.GetParentGeozoneValue());

            Step("7. Verify Values of Latitude Minimum, Latitude Maximum, Longitude Minimum, Longitude Maximum are filled");
            VerifyGeozoneLatitudeLongitudeAreFilled(equipmentInventoryPage);

            Step("8. Verify Only 'Properties' tab is visible");
            var tabsList = equipmentInventoryPage.GeozoneEditorPanel.GetListOfTabsName();
            VerifyEqual("8. Verify Only 'Properties' tab is visible", true, tabsList.Count == 1 && tabsList.Contains("Properties"));

            Step("9. Verify In 'Properties' tab, only 'Virtual Energy Consumption' section is visible and expanded");
            var groupsList = equipmentInventoryPage.GeozoneEditorPanel.GetListOfGroupsName();
            VerifyEqual("Verify Only 'Virtual Energy Consumption' section is visible", true, groupsList.Count == 1 && groupsList.Contains("Virtual Energy Consumption"));
            VerifyEqual("Verify 'Virtual Energy Consumption' section is expanded", true, equipmentInventoryPage.GeozoneEditorPanel.IsGroupExpanded("Virtual Energy Consumption"));

            Step("10. Notes all these values (Name, Parent, Latitude, Longitude, virtual energy consumption value of 12 months)");
            var notedParentGeozoneName = equipmentInventoryPage.GeozoneEditorPanel.GetParentGeozoneValue();
            var notedLatitudeMinimum = equipmentInventoryPage.GeozoneEditorPanel.GetLatitudeMinimumValue();
            var notedLatitudeMaximum = equipmentInventoryPage.GeozoneEditorPanel.GetLatitudeMaximumValue();
            var notedLongitudeMinimum = equipmentInventoryPage.GeozoneEditorPanel.GetLongitudeMinimumValue();
            var notedLongtitudeMaximum = equipmentInventoryPage.GeozoneEditorPanel.GetLongitudeMaximumValue();
            var notedJanValue = equipmentInventoryPage.GeozoneEditorPanel.GetJanuaryValue();
            var notedFebValue = equipmentInventoryPage.GeozoneEditorPanel.GetFebruaryValue();
            var notedMarValue = equipmentInventoryPage.GeozoneEditorPanel.GetMarchValue();
            var notedAprValue = equipmentInventoryPage.GeozoneEditorPanel.GetAprilValue();
            var notedMayValue = equipmentInventoryPage.GeozoneEditorPanel.GetMayValue();
            var notedJunValue = equipmentInventoryPage.GeozoneEditorPanel.GetJuneValue();
            var notedJulValue = equipmentInventoryPage.GeozoneEditorPanel.GetJulyValue();
            var notedAugValue = equipmentInventoryPage.GeozoneEditorPanel.GetAugustValue();
            var notedSepValue = equipmentInventoryPage.GeozoneEditorPanel.GetSeptemberValue();
            var notedOctValue = equipmentInventoryPage.GeozoneEditorPanel.GetOctoberValue();
            var notedNovValue = equipmentInventoryPage.GeozoneEditorPanel.GetNovemberValue();
            var notedDecValue = equipmentInventoryPage.GeozoneEditorPanel.GetDecemberValue();

            Step("11. Click Update geozone's bounds");
            equipmentInventoryPage.GeozoneEditorPanel.ClickUpdateBoundsButton();            
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();

            Step("12. Verify The geozone is still being selected in Geozone Tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("12. Verify geozone '{0}' is still being selected in Geozone Tree", geozoneName), geozoneName, selectedNodeName);

            Step("13. Verify Map recorder panel appears");
            VerifyEqual("13. Verify Map recorder panel appears", true, equipmentInventoryPage.Map.IsRecorderDisplayed());

            Step("14. Verify Geozone Editor panel disappears");
            VerifyEqual("14. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("15. Click Cancel button in Map recorder panel");
            equipmentInventoryPage.Map.ClickRecorderCancelButton();

            Step("16. Verify The new geozone is still being selected in Geozone Tree");
            selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("16. Verify geozone '{0}' is still being selected in Geozone Tree", geozoneName), geozoneName, selectedNodeName);

            Step("17. Verify Map recorder panel disappears");
            VerifyEqual("Verify Map recorder panel disappears", false, equipmentInventoryPage.Map.IsRecorderDisplayed());

            Step("18. Verify Geozone Editor panel appears");
            VerifyEqual("18. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("19. Verify Values at this moment are remained unchanged in comparison with values noted at step #10");
            VerifyGeozoneBasicInfo(equipmentInventoryPage, geozoneName, notedParentGeozoneName);
            VerifyGeozoneLatitudeLongitude(equipmentInventoryPage, notedLatitudeMinimum, notedLatitudeMaximum, notedLongitudeMinimum, notedLongtitudeMaximum);
            VerifyVirtualEnergyConsumption(equipmentInventoryPage, notedJanValue, notedFebValue, notedMarValue, notedAprValue, notedMayValue, notedJunValue
                , notedJulValue, notedAugValue, notedSepValue, notedOctValue, notedNovValue, notedDecValue);

            Step("20. Click Update geozone's bounds again");
            equipmentInventoryPage.GeozoneEditorPanel.ClickUpdateBoundsButton();            
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();

            Step("21. Verify The new geozone is still being selected in Geozone Tree");
            selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("21. Verify geozone '{0}' is still being selected in Geozone Tree", geozoneName), geozoneName, selectedNodeName);

            Step("22. Verify Map recorder panel appears");
            VerifyEqual("Verify Map recorder panel appears", true, equipmentInventoryPage.Map.IsRecorderDisplayed());

            Step("23. Verify Geozone Editor panel disappears");
            VerifyEqual("23. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("24. Specify boundary of the new geozone by one of these ways: zoom in the map using mouse scroll button; zoom in once more time using zooming bar of the map; drag the map");
            equipmentInventoryPage.Map.DragMapToRandomLocation();
            equipmentInventoryPage.Map.ZoomInToGLLevel(ZoomGLLevel.m50);

            Step("25. Click map recorder button");
            equipmentInventoryPage.Map.ClickRecorderButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("26. Verify The new geozone is still being selected in Geozone Tree");
            selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("26.Verify geozone '{0}' is still being selected in Geozone Tree", geozoneName), geozoneName, selectedNodeName);

            Step("27. Verify Map recorder panel disappears");
            VerifyEqual("27. Verify Map recorder panel disappears", false, equipmentInventoryPage.Map.IsRecorderDisplayed());

            Step("28. Verify Geozone Editor panel appears");
            VerifyEqual("28. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("29. Verify Values at this moment of Latitude Minimum, Latitude Maximum, Longitude Minimum, Longitude Maximum are changed while others are remained unchanged in comparison with values noted at step #10");
            VerifyGeozoneLatitudeLongitudeAreChanged(equipmentInventoryPage, notedLatitudeMinimum, notedLatitudeMaximum, notedLongitudeMinimum, notedLongtitudeMaximum);
            VerifyGeozoneBasicInfo(equipmentInventoryPage, geozoneName, notedParentGeozoneName);
            VerifyVirtualEnergyConsumption(equipmentInventoryPage, notedJanValue, notedFebValue, notedMarValue, notedAprValue, notedMayValue, notedJunValue
                , notedJulValue, notedAugValue, notedSepValue, notedOctValue, notedNovValue, notedDecValue);

            Step("30. Change name, parent geozone, virtual energy consumption of 12 months");           
            equipmentInventoryPage.GeozoneEditorPanel.EnterNameInput(newGeozoneName);
            equipmentInventoryPage.GeozoneEditorPanel.SelectParentGeozoneDropDown(newParentGeozoneFullName);
            EnterVirtualEnergyConsumptionRandomValues(equipmentInventoryPage);

            Step("31. Notes values of all fields (Name, Parent, Latitude, Longitude, virtual energy consumption value of 12 months)");
            notedLatitudeMinimum = equipmentInventoryPage.GeozoneEditorPanel.GetLatitudeMinimumValue();
            notedLatitudeMaximum = equipmentInventoryPage.GeozoneEditorPanel.GetLatitudeMaximumValue();
            notedLongitudeMinimum = equipmentInventoryPage.GeozoneEditorPanel.GetLongitudeMinimumValue();
            notedLongtitudeMaximum = equipmentInventoryPage.GeozoneEditorPanel.GetLongitudeMaximumValue();
            notedJanValue = equipmentInventoryPage.GeozoneEditorPanel.GetJanuaryValue();
            notedFebValue = equipmentInventoryPage.GeozoneEditorPanel.GetFebruaryValue();
            notedMarValue = equipmentInventoryPage.GeozoneEditorPanel.GetMarchValue();
            notedAprValue = equipmentInventoryPage.GeozoneEditorPanel.GetAprilValue();
            notedMayValue = equipmentInventoryPage.GeozoneEditorPanel.GetMayValue();
            notedJunValue = equipmentInventoryPage.GeozoneEditorPanel.GetJuneValue();
            notedJulValue = equipmentInventoryPage.GeozoneEditorPanel.GetJulyValue();
            notedAugValue = equipmentInventoryPage.GeozoneEditorPanel.GetAugustValue();
            notedSepValue = equipmentInventoryPage.GeozoneEditorPanel.GetSeptemberValue();
            notedOctValue = equipmentInventoryPage.GeozoneEditorPanel.GetOctoberValue();
            notedNovValue = equipmentInventoryPage.GeozoneEditorPanel.GetNovemberValue();
            notedDecValue = equipmentInventoryPage.GeozoneEditorPanel.GetDecemberValue();

            Step("32. Click Save");
            equipmentInventoryPage.GeozoneEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("33. Verify Geozone Editor panel disappears");
            VerifyEqual("33. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("34. Verify Geozone A is no longer present in its parent geozone of step #6. There is a geozone with updated name under the parent geozone of step #30 instead");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(parentGeozoneName);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.GeoZone);
            VerifyEqual(string.Format("34. Verify There is no longer the geozone with name '{0}' at step #6 under '{1}'", geozoneName, parentGeozoneName), false, subNodesList.Exists(p => p.Equals(geozoneName)));

            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newParentGeozoneName);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.GeoZone);
            VerifyEqual(string.Format("34. Verify There is a geozone with updated name '{0}' under the parent geozone '{1}'", newGeozoneName, newParentGeozoneName), true, subNodesList.Exists(p => p.Equals(newGeozoneName)));

            Step("35. Select the newly-updated geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newGeozoneName);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("36. Verify Geozone Editor panel appears");
            VerifyEqual("36. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("37. Verify Geozone Editor panel displays values at step #30");
            VerifyGeozoneBasicInfo(equipmentInventoryPage, newGeozoneName, newParentGeozoneFullName);
            VerifyGeozoneLatitudeLongitude(equipmentInventoryPage, notedLatitudeMinimum, notedLatitudeMaximum, notedLongitudeMinimum, notedLongtitudeMaximum);
            VerifyVirtualEnergyConsumption(equipmentInventoryPage, notedJanValue, notedFebValue, notedMarValue, notedAprValue, notedMayValue, notedJunValue
                , notedJulValue, notedAugValue, notedSepValue, notedOctValue, notedNovValue, notedDecValue);

            Step("38. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("39. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("40. Browse to and select the newly-updated geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(string.Format(@"{0}\{1}", newParentGeozoneName, newGeozoneName));
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("41. Verify Geozone Editor panel appears");
            VerifyEqual("41. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("42. Verify Geozone Editor panel displays values at step #30");
            VerifyGeozoneBasicInfo(equipmentInventoryPage, newGeozoneName, newParentGeozoneFullName);
            VerifyGeozoneLatitudeLongitude(equipmentInventoryPage, notedLatitudeMinimum, notedLatitudeMaximum, notedLongitudeMinimum, notedLongtitudeMaximum);
            VerifyVirtualEnergyConsumption(equipmentInventoryPage, notedJanValue, notedFebValue, notedMarValue, notedAprValue, notedMayValue, notedJunValue
                , notedJulValue, notedAugValue, notedSepValue, notedOctValue, notedNovValue, notedDecValue);

            try
            {
                DeleteGeozone(newGeozoneName);
                DeleteGeozone(newParentGeozoneName);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_02_01 Geozone - Update - Validation")]
        public void EI_02_01()
        {
            var geozoneName = SLVHelper.GenerateUniqueName("GZNEI0201");
            var newGeozoneName = SLVHelper.GenerateUniqueName("GZNEI0201N");
            var existingGeozoneName = SLVHelper.GenerateUniqueName("GZNEI0201Ex");
            var newGeozonePath = string.Format(@"{0}\{1}", Settings.RootGeozoneName, geozoneName);
            var parentGeozoneName = newGeozonePath.GetParentName();

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI0201*");
            CreateNewGeozone(geozoneName);
            CreateNewGeozone(existingGeozoneName);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newGeozonePath);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Clear Name field");
            equipmentInventoryPage.GeozoneEditorPanel.ClearNameInput();

            Step("6. Click Save button");
            equipmentInventoryPage.GeozoneEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("7. Verify A dialog with title 'Warning' and message 'Please enter a name for this geozone.' appears");
            VerifyEqual("7. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("7. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("7. Verify dialog message is 'Please enter a name for this geozone.'", "Please enter a name for this geozone.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("8. Click Ok button");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("9. Verify The dialog disappears");
            VerifyEqual("9. Verify A dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("10. Enter non-numeric values in to 12-months numeric up down fields");
            equipmentInventoryPage.GeozoneEditorPanel.EnterJanuaryNumericInput("a", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterFebruaryNumericInput("b", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterMarchNumericInput("c", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterAprilNumericInput("d", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterMayNumericInput("@", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterJuneNumericInput("#", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterJulyNumericInput("$", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterAugustNumericInput("m", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterSeptemberNumericInput("n", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterOctoberNumericInput("k", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterNovemberNumericInput(@"\", false);
            equipmentInventoryPage.GeozoneEditorPanel.EnterDecemberNumericInput("'", false);

            Step("11. Verify Values of 12-month fields are remain to be '0'");
            VerifyVirtualEnergyConsumption(equipmentInventoryPage, "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0");

            Step("12. Enter a name of a sibling geozone into Name field");          
            equipmentInventoryPage.GeozoneEditorPanel.EnterNameInput(existingGeozoneName);

            Step("13. Click Save button");
            equipmentInventoryPage.GeozoneEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("14. Verify A dialog with title 'Warning' and message 'This geozone name already exists!' appears");
            var isPopupDialogDisplayed = equipmentInventoryPage.IsPopupDialogDisplayed();
            VerifyTrue("14. [SC-560] Verify A dialog with title 'Warning' and message 'This geozone name already exists!' appears", isPopupDialogDisplayed, "Appears", "Not appear");
            if (isPopupDialogDisplayed)
            {
                VerifyEqual("14. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
                VerifyEqual("14. Verify dialog message is 'This geozone name already exists!'", "This geozone name already exists!", equipmentInventoryPage.Dialog.GetMessageText());
            }
            else
            {
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(existingGeozoneName);
                equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
                equipmentInventoryPage.GeozoneEditorPanel.EnterNameInput(geozoneName);
                equipmentInventoryPage.GeozoneEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozoneName);
            }

            Step("15. Enter an unexisting geozone name");
            equipmentInventoryPage.GeozoneEditorPanel.EnterNameInput(newGeozoneName);

            Step("16. Click Save button");
            equipmentInventoryPage.GeozoneEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("17. Verify The new geozone is created and present in its parent geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(parentGeozoneName);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.GeoZone);
            VerifyEqual(string.Format("17. Verify The new geozone '{0}' is created and present in its parent geozone '{1}'", newGeozoneName, parentGeozoneName), true, subNodesList.Exists(p => p.Equals(newGeozoneName)));
            
            try
            {
                DeleteGeozone(newGeozoneName);
                DeleteGeozone(geozoneName);
                DeleteGeozone(existingGeozoneName);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_03 Geozone - Delete")]
        public void EI_03()
        {
            var testData = GetTestDataOfEI_03();
            var parentGeozonePath = testData["Geozone"];
            var geozoneName = SLVHelper.GenerateUniqueName("GZNEI03");
            var parentGeozoneName = parentGeozonePath.GetChildName();
            var newGeozonePath = string.Format(@"{0}\{1}", parentGeozonePath, geozoneName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");
            
            Step("-> Create data for testing");
            DeleteGeozones("GZNEI03*");
            CreateNewGeozone(geozoneName, parentGeozoneName);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newGeozonePath);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Click Remove icon button");
            equipmentInventoryPage.GeozoneEditorPanel.ClickDeleteButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("6. Verify A dialog with message 'Would you like to delete {{Geozone A's name}} geozone and all sub geoZones and equipments ?' appears");
            var expectedMessage = string.Format("Would you like to delete {0} geozone and all sub geoZones and equipments ?", geozoneName);
            VerifyEqual("6. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("6. Verify dialog message is as expected", expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("7. Click No");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("8. Verify The dialog disappears");
            VerifyEqual("8. Verify A dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("9. Verify Geozone Editor panel remains displaying");
            VerifyEqual("9. Verify Geozone Editor panel remains displaying", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("10. Verify Geozone A is still remained selected in Geozone Tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("10. Verify Geozone '{0}' is still remained selected in Geozone Tree", geozoneName), geozoneName, selectedNodeName);

            Step("11. Click Remove icon button again");
            equipmentInventoryPage.GeozoneEditorPanel.ClickDeleteButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("12. Verify A dialog with message 'Would you like to delete {{Geozone A's name}} geozone and all sub geoZones and equipments ?' appears again");
            VerifyEqual("12. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("12. Verify dialog message is as expected", expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("13. Click Yes");
            equipmentInventoryPage.Dialog.ClickYesButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForHeaderMessageDisappeared();

            Step("14. Verify The dialog disappears");
            VerifyEqual("14. Verify A dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("15. Verify Geozone Editor panel disappears");
            VerifyEqual("15. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("16. Verify Geozone A is no longer present in its parent geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(parentGeozoneName);
            Wait.ForSeconds(2);
            if (equipmentInventoryPage.IsGeozoneEditorPanelDisplayed())
            {
                var nodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.GeoZone);
                VerifyEqual(string.Format("16. Verify Geozone '{0}' is no longer present in its parent geozone", geozoneName), false, nodesList.Exists(p => p.Equals(geozoneName)));
            }
            else
                Warning("[SC-942] 16. Selecting a geozone after deleting one fails to open its widget");

            Step("17. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("18. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("19. Browse to the parent geozone of geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(parentGeozonePath);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("20. Verify Geozone A is not present in its parent geozone");
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.GeoZone);
            VerifyEqual(string.Format("20. Verify Geozone '{0}' is no longer present in its parent geozone", geozoneName), false, subNodesList.Exists(p => p.Equals(geozoneName)));
        }

        [Test, DynamicRetry]
        [Description("EI_04 Geozone - Custom report")]
        public void EI_04()
        {
            var geozoneA = SLVHelper.GenerateUniqueName("GZNEI04A");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var geozoneB = SLVHelper.GenerateUniqueName("GZNEI04B");

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI04*");
            CreateNewGeozone(geozoneA);
            CreateNewGeozone(geozoneB);
            CreateNewController(controller, geozoneA);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozoneA);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A which has devices");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozoneA);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());
            var devivesCount = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeDevicesCount();

            Step("5. Click Custom report button");
            equipmentInventoryPage.GeozoneEditorPanel.ClickCustomReportButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForCustomReportDisplayed();
            equipmentInventoryPage.GridPanel.WaitForGridContentAvailable();

            Step("6. Verify Geozone Editor panel disappears");
            VerifyEqual("6. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("7. Verify Grid panel with title '{{geozone A's name}}' appears");
            VerifyEqual(string.Format("7. Verify Grid panel with title '{0}' appears", geozoneA), geozoneA, equipmentInventoryPage.GridPanel.GetPanelTitleText());

            Step("8. Verify Number of grid records = number of devices displayed under geozone A in Geozone Tree");
            var gridCount = equipmentInventoryPage.GridPanel.GetListOfDevices().Count;
            VerifyEqual("8. Verify Number of grid records = number of devices displayed under geozone A in Geozone Tree", devivesCount, gridCount);

            Step("9. Select geozone B which has no devices");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozoneB);

            Step("10. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("10. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());
            devivesCount = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeDevicesCount();

            Step("11. Click Custom report button");
            equipmentInventoryPage.GeozoneEditorPanel.ClickCustomReportButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForCustomReportDisplayed();

            Step("12. Verify Geozone Editor panel disappears");
            VerifyEqual("12. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("13. Verify Grid panel with title '{{geozone B's name}}' appears");
            VerifyEqual(string.Format("13. Verify Grid panel with title '{0}' appears", geozoneB), geozoneB, equipmentInventoryPage.GridPanel.GetPanelTitleText());

            Step("14. Verify Number of grid records = number of devices displayed under geozone B in Geozone Tree = 0");
            gridCount = equipmentInventoryPage.GridPanel.GetListOfDevices().Count;
            VerifyTrue("14. Verify Number of grid records = number of devices displayed under geozone B in Geozone Tree = 0", devivesCount == gridCount && devivesCount == 0, devivesCount, gridCount);

            Step("15. Verify");
            Step(" o The attribute 'Device' will always appear first");
            Step(" o Attributes are listed in alphabetical order");
            equipmentInventoryPage.GridPanel.ClickSearchToolbarButton();
            equipmentInventoryPage.GridPanel.WaitForAdvancedSearchPanelDisplayed();
            var listSearchFields = equipmentInventoryPage.GridPanel.GetListOfAdvancedSearchFields();
            var firstField = listSearchFields.First();
            listSearchFields.RemoveAt(0);
            var firstCharList = listSearchFields.Select(p => p[0].ToString()).ToList();
            VerifyEqual("15. Verify The attribute 'Device' will always appear first", "Device", firstField);
            VerifyEqual("15. Verify Attributes are listed in alphabetical order", true, firstCharList.IsIncreasing());

            try
            {
                DeleteGeozone(geozoneA);
                DeleteGeozone(geozoneB);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_05_01 Geozone - Import - Create a device by importing a csv file")]
        [NonParallelizable]
        [Category("RunAlone")]
        public void EI_05_01()
        {
            var csvFilePath1 = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI0501-01.csv");
            var csvFilePath2 = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI0501-02.csv");
            var csvFilePath3 = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI0501-03.csv");
            var geozone = SLVHelper.GenerateUniqueName("GZNEI0501");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight1 = SLVHelper.GenerateUniqueName("STL01");
            var streetlight2 = SLVHelper.GenerateUniqueName("STL02");
            var streetlight3 = SLVHelper.GenerateUniqueName("STL03");
            var fullGeozonePath = Settings.RootGeozoneName + @"/" + geozone;
            var latitude = SLVHelper.GenerateLatitude();
            var longitude = SLVHelper.GenerateLongitude();
            var expectedLat = string.Format("{0} °", latitude);
            var expectedLong = string.Format("{0} °", longitude);
            var typeOfEquipment = "ABEL-Vigilon A[Dimmable ballast]";
            var model = Settings.GetModelOfDevice(DeviceType.Streetlight, typeOfEquipment);
            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Prepare a csv file with all required fields: Name(name), Controller ID(controllerStrId), Identifier(idOnController), Type of equipment(model)");            
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI0501*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            var items = new List<string>() { "controllerStrId#" + controller, "geoZone path#" + fullGeozonePath, "idOnController#" + streetlight1, "name#", "model#" + model, "lat#" + latitude, "lng#" + longitude };            
            CreateCsv(DeviceType.Streetlight, csvFilePath1, items);
            items = new List<string>() { "controllerStrId#" + controller, "geoZone path#" + fullGeozonePath, "idOnController#", "name#" + streetlight3, "model#" + model, "lat#" + latitude, "lng#" + longitude };
            CreateCsv(DeviceType.Streetlight, csvFilePath2, items);
            items = new List<string>() { "controllerStrId#" + controller, "geoZone path#" + fullGeozonePath, "idOnController#" + streetlight3, "name#" + streetlight3, "model#" + model, "lat#" + latitude, "lng#" + longitude };
            CreateCsv(DeviceType.Streetlight, csvFilePath3, items);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("3. Select the geozone set up in csv file and press More > Import");
            Step("4. Import csv with missing name field");
            equipmentInventoryPage.Import(csvFilePath1);

            Step("5. Verify Import successfully");
            Step(" o One device has been updated.");
            VerifyEqual("5. Verify Import successfully: One device has been updated.", "One device has been updated.", equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.GetMessageCaptionText());

            Step("6. Press Refresh button on the import panel, after refreshing, select the streetlight");
            equipmentInventoryPage.ReloadImport();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight1);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("7. Verify The new streetlight is created with");
            Step(" o Name = Identifier");
            VerifyEqual("7. Verify Name = Identifier", equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue(), equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());
                       
            Step("8. Import csv with missing Identifier");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.Import(csvFilePath2);

            Step("9. Verify The error message displays");
            Step(" o One device could not be imported.");
            Step(" o Device id (idOnController) not found at row #1.");
            var errorsDetail = equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.GetListOfErrors();
            VerifyEqual("9. Verify error: One device could not be imported.", "One device could not be imported.", equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.GetMessageCaptionText());
            VerifyEqual("[SC-49] 9. Verify error detail: Device id (idOnController) not found at row #1.", "Device id (idOnController) not found at row #1.", errorsDetail.FirstOrDefault());
            
            Step("10. Press Refresh button on the import panel");
            equipmentInventoryPage.ReloadImport();

            Step("11. Verify No device imported");
            var streetlights = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Streetlight);
            VerifyEqual("11. Verify No device imported", false, streetlights.Contains(streetlight2));            

            Step("12. Import csv with all required fields.");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(Settings.RootGeozoneName + @"\" + geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.Import(csvFilePath3);

            Step("13. Verify Import successfully");
            Step(" o One device has been updated.");
            VerifyEqual("13. Verify Import successfully: One device has been updated.", "One device has been updated.", equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.GetMessageCaptionText());

            Step("14. Press Refresh button on the import panel");
            equipmentInventoryPage.ReloadImport();

            Step("15. Verify A new device is added to the geozone tree and displayed on the map with all required fields importted.");
            Step(" o All required fields are imported.");
            streetlights = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Streetlight);
            var isNewStreetlightExist = streetlights.Contains(streetlight3);
            VerifyEqual("15. Verify A new device is added to the geozone tree", true, isNewStreetlightExist);
            if (isNewStreetlightExist)
            {
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight3);
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
                VerifyEqual("15. Verify A new device displayed on the map", true, equipmentInventoryPage.Map.HasSelectedDevicesInMapGL());
                VerifyEqual(string.Format("15. Verify Identifier = {0}", streetlight3), streetlight3, equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue());
                VerifyEqual(string.Format("15. Verify Name = {0}", streetlight3), streetlight3, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());
                VerifyEqual(string.Format("15. Verify Controller Id = {0}", controller), controller, equipmentInventoryPage.StreetlightEditorPanel.GetControllerIdValue());
                VerifyEqual(string.Format("15. Verify Type of Equipment = {0}", typeOfEquipment), typeOfEquipment, equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentValue());
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_05_02 Geozone - Import - Update devices by importing csv file and changing location (longitude and latitude)")]
        [NonParallelizable]
        [Category("RunAlone")]
        public void EI_05_02()
        {
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI0502.csv");
            var geozone = SLVHelper.GenerateUniqueName("GZNEI0502");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var typeOfEquipment = "ABEL-Vigilon A[Dimmable ballast]";
            var fullGeozonePath = Settings.RootGeozoneName + @"/" + geozone;
            var expectedLatValue = SLVHelper.GenerateLatitude();
            var expectedLongValue = SLVHelper.GenerateLongitude();
            var expectedLat = string.Format("{0} °", expectedLatValue);
            var expectedLong = string.Format("{0} °", expectedLongValue);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - There is a streetlight with all required fields Name (name), Controller ID (controllerStrId), Identifier(idOnController), Type of equipment(model)");
            Step(" - Prepare a csv file with all required fields and the new location values (longitude and latitude)");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI0502*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);            
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);
            CreateCsv(DeviceType.Streetlight, csvFilePath, fullGeozonePath, controller, streetlight, typeOfEquipment, expectedLatValue, expectedLongValue);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);           

            Step("3. Select the geozone set up in csv file and press More > Import");
            Step("4. Select the csv file to update the location");
        
            equipmentInventoryPage.Import(csvFilePath);

            Step("5. Verify Import successfully");
            Step(" o One device has been updated.");
            VerifyEqual("5. Verify Import successfully: One device has been updated.", "One device has been updated.", equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.GetMessageCaptionText());

            Step("6. Press Refresh button on the import panel, after refreshing, select the streetlight");
            equipmentInventoryPage.ReloadImport();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("7. The new streetlight is updated with");
            Step(" o The streetlight displays on the map");
            Step(" o Longitude= new value");
            Step(" o Latitude = new value");
            Step(" o Other required fields are not changed."); 
            VerifyEqual("7. Verify The streetlight displays on the map", streetlight, equipmentInventoryPage.Map.MoveAndGetDeviceNameGL(expectedLongValue, expectedLatValue));
            VerifyEqual("7. Verify Longitude = new value", expectedLong, equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue());
            VerifyEqual("7. Verify Latitude= new value", expectedLat, equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue());
            VerifyEqual("7. Verify Other required fields are not changed [Parent Geozone]", geozone, equipmentInventoryPage.StreetlightEditorPanel.GetGeozoneValue());
            VerifyEqual("7. Verify Other required fields are not changed [Controller Id]", controller, equipmentInventoryPage.StreetlightEditorPanel.GetControllerIdValue());
            VerifyEqual("7. Verify Other required fields are not changed [Type of Equipment]", typeOfEquipment, equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentValue());
            VerifyEqual("7. Verify Other required fields are not changed [Identifier]", streetlight, equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_05_03 Geozone - Import - Update devices by importing csv file and changing location and moving to an existing geozone")]
        [NonParallelizable]
        [Category("RunAlone")]
        public void EI_05_03()
        {
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI0503.csv");
            var geozone1 = SLVHelper.GenerateUniqueName("GZNEI050301");
            var geozone2 = SLVHelper.GenerateUniqueName("GZNEI050302");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var typeOfEquipment = "ABEL-Vigilon A[Dimmable ballast]";
            var fullGeozone2Path = Settings.RootGeozoneName + @"/" + geozone2;
            var expectedLatValue = SLVHelper.GenerateLatitude();
            var expectedLongValue = SLVHelper.GenerateLongitude();
            var expectedLat = string.Format("{0} °", expectedLatValue);
            var expectedLong = string.Format("{0} °", expectedLongValue);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - There is a streetlight with all required fields Name (name), Controller ID (controllerStrId), Identifier(idOnController), Type of equipment(model)");
            Step(" - Prepare a csv file with all required fields and the new location values (longitude and latitude)");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI0503*");
            CreateNewGeozone(geozone1);
            CreateNewGeozone(geozone2);
            CreateNewController(controller, geozone1);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone1);
            CreateCsv(DeviceType.Streetlight, csvFilePath, fullGeozone2Path, controller, streetlight, typeOfEquipment, expectedLatValue, expectedLongValue);            

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone1);

            Step("3. Select the geozone set up in csv file and press More > Import");
            Step("4. Select the csv file to update the location");
            equipmentInventoryPage.Import(csvFilePath);

            Step("5. Verify Import successfully");
            Step(" o One device has been updated.");
            VerifyEqual("5. Verify Import successfully: One device has been updated.", "One device has been updated.", equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.GetMessageCaptionText());

            Step("6. Press Refresh button on the import panel, after refreshing, select the streetlight in the geozone that it is moved to");
            equipmentInventoryPage.ReloadImport();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone2 + @"\" + streetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("7. The streetlight is moved to the new geozone with");
            Step(" o The streetlight displays on the map");
            Step(" o Longitude= new value");
            Step(" o Latitude = new value");
            Step(" o Other required fields are not changed.");

            VerifyEqual("7. Verify The streetlight displays on the map", streetlight, equipmentInventoryPage.Map.MoveAndGetDeviceNameGL(expectedLongValue, expectedLatValue));
            VerifyEqual("7. Verify Longitude = new value", expectedLong, equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue());
            VerifyEqual("7. Verify Latitude= new value", expectedLat, equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue());
            VerifyEqual("7. Verify Other required fields are not changed [Parent Geozone]", geozone2, equipmentInventoryPage.StreetlightEditorPanel.GetGeozoneValue());
            VerifyEqual("7. Verify Other required fields are not changed [Controller Id]", controller, equipmentInventoryPage.StreetlightEditorPanel.GetControllerIdValue());
            VerifyEqual("7. Verify Other required fields are not changed [Type of Equipment]", typeOfEquipment, equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentValue());
            VerifyEqual("7. Verify Other required fields are not changed [Identifier]", streetlight, equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue());

            try
            {
                DeleteGeozone(geozone1);
                DeleteGeozone(geozone2);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_05_04 Geozone - Update devices by importing csv file without changing geozone and location")]
        [NonParallelizable]
        [Category("RunAlone")]
        public void EI_05_04()
        {
            var csvFilePath1 = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI0504-01.csv");
            var csvFilePath2 = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI0504-02.csv");
            var csvFilePath3 = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI0504-03.csv");
            var geozone = SLVHelper.GenerateUniqueName("GZNEI0504");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var newStreetlight = SLVHelper.GenerateUniqueName("STLNew");
            var fullGeozonePath = Settings.RootGeozoneName + @"/" + geozone;
            var latitude = SLVHelper.GenerateLatitude();
            var longitude = SLVHelper.GenerateLongitude();
            var expectedLat = string.Format("{0} °", latitude);
            var expectedLong = string.Format("{0} °", longitude);
            var typeOfEquipment = "ABEL-Vigilon A[Dimmable ballast]";
            var newTypeOfEquipment = "Telematics LCU[Lamp]";            

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - There is a streetlight with all required fields Name (name), Controller ID (controllerStrId), Identifier(idOnController), Type of equipment(model)");
            Step(" - Prepare a csv file with all required fields without changing geozone and location");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI0504*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone, lat: latitude, lng: longitude);
            CreateCsv(DeviceType.Streetlight, csvFilePath1, fullGeozonePath, controller, streetlight, typeOfEquipment, latitude, longitude, deviceName: newStreetlight);            
            CreateCsv(DeviceType.Streetlight, csvFilePath2, fullGeozonePath, controller, streetlight, newTypeOfEquipment, latitude, longitude, deviceName: newStreetlight);            
            CreateCsv(DeviceType.Streetlight, csvFilePath3, fullGeozonePath, controller, streetlight, "", latitude, longitude, deviceName: newStreetlight);            

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("3. Select the geozone set up in csv file and press More > Import");
            Step("4. Import csv with name field updated");           
            equipmentInventoryPage.Import(csvFilePath1);

            Step("5. Verify Import successfully");
            Step(" o One device has been updated.");
            VerifyEqual("5. Verify Import successfully: One device has been updated.", "One device has been updated.", equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.GetMessageCaptionText());

            Step("6. Press Refresh button on the import panel, after refreshing, select the streetlight");
            equipmentInventoryPage.ReloadImport();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newStreetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("7. Verify The new streetlight is updated with");
            Step(" o Name = new name");
            Step(" o Other required fields are not changed.");           
            VerifyEqual("7. Verify Name = new name", newStreetlight, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());
            VerifyEqual("7. Verify Other required fields are not changed [Parent Geozone]", geozone, equipmentInventoryPage.StreetlightEditorPanel.GetGeozoneValue());
            VerifyEqual("7. Verify Other required fields are not changed [Longitude]", expectedLong, equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue());
            VerifyEqual("7. Verify Other required fields are not changed [Latitude]", expectedLat, equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue());            
            VerifyEqual("7. Verify Other required fields are not changed [Controller Id]", controller, equipmentInventoryPage.StreetlightEditorPanel.GetControllerIdValue());
            VerifyEqual("7. Verify Other required fields are not changed [Type of Equipment]", typeOfEquipment, equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentValue());
            VerifyEqual("7. Verify Other required fields are not changed [Identifier]", streetlight, equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue());

            Step("8. Import csv with Type of equipment updated");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(Settings.RootGeozoneName + @"\" + geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.Import(csvFilePath2);

            Step("9. Verify Import successfully");
            Step(" o One device has been updated.");
            VerifyEqual("9. Verify Import successfully: One device has been updated.", "One device has been updated.", equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.GetMessageCaptionText());

            Step("10. Press Refresh button on the import panel, after refreshing, select the streetlight");
            equipmentInventoryPage.ReloadImport();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newStreetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("11. Verify The new streetlight is updated with");
            Step(" o Type of equipment = new type");
            Step(" o Other required fields are not changed.");
            VerifyEqual("11. Verify Type of equipment = new type", newTypeOfEquipment, equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentValue());
            VerifyEqual("11. Verify Other required fields are not changed [Name]", newStreetlight, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());
            VerifyEqual("11. Verify Other required fields are not changed [Parent Geozone]", geozone, equipmentInventoryPage.StreetlightEditorPanel.GetGeozoneValue());
            VerifyEqual("11. Verify Other required fields are not changed [Longitude]", expectedLong, equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue());
            VerifyEqual("11. Verify Other required fields are not changed [Latitude]", expectedLat, equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue());
            VerifyEqual("11. Verify Other required fields are not changed [Controller Id]", controller, equipmentInventoryPage.StreetlightEditorPanel.GetControllerIdValue());            
            VerifyEqual("11. Verify Other required fields are not changed [Identifier]", streetlight, equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue());

            Step("12. Import csv with Type of equipment missing");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(Settings.RootGeozoneName + @"\" + geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.Import(csvFilePath3);

            Step("13. Verify The warning message displays");
            Step(" o Device 'controllerid','identifier' has no model. Note: the text is cut off - SC-49");
            var errorsDetail = equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.GetListOfErrors();
            VerifyEqual(string.Format("[SC-49] 13. Verify Device {0},{1} has no model defined.", controller, streetlight), string.Format("Device {0},{1} has no", controller, streetlight), errorsDetail.FirstOrDefault());
            
            Step("14. Press Refresh button on the import panel");
            equipmentInventoryPage.ReloadImport();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newStreetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("15. Verify Type of equipment is not changed");
            var streetlights = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Streetlight);
            VerifyEqual("15. Verify Type of equipment is not changed", newTypeOfEquipment, equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentValue());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_05_05 Geozone - Update devices by importing csv file and create a new geozone")]
        [NonParallelizable]
        [Category("RunAlone")]
        public void EI_05_05()
        {
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI0505.csv");
            var geozone = SLVHelper.GenerateUniqueName("GZNEI0505");
            var newGeozone = SLVHelper.GenerateUniqueName("GZNEI0505New");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var typeOfEquipment = "ABEL-Vigilon A[Dimmable ballast]";
            var fullGeozonePath = Settings.RootGeozoneName + @"/" + newGeozone;
            var latitude = SLVHelper.GenerateLatitude();
            var longitude = SLVHelper.GenerateLongitude();
            var expectedLat = string.Format("{0} °", latitude);
            var expectedLong = string.Format("{0} °", longitude);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - There is a streetlight with all required fields Name (name), Controller ID (controllerStrId), Identifier(idOnController), Type of equipment(model)");
            Step(" - Prepare a csv file with all required fields and the geozone is the new geozone.");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI0505*");
            CreateNewGeozone(geozone);
            CreateNewGeozone(newGeozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);
            CreateCsv(DeviceType.Streetlight, csvFilePath, fullGeozonePath, controller, streetlight, typeOfEquipment, latitude, longitude);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("3. Select the geozone set up in csv file and press More > Import");
            Step("4. Import csv to update device into a new geozone");           
            equipmentInventoryPage.Import(csvFilePath);

            Step("5. Verify Import successfully");
            Step(" o One device has been updated.");
            VerifyEqual("5. Verify Import successfully: One device has been updated.", "One device has been updated.", equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.GetMessageCaptionText());

            Step("6. Press Refresh button on the import panel, after refreshing, select the streetlight on the new geozone created");
            equipmentInventoryPage.ReloadImport();
            
            Step("7. Verify The new streetlight is updated with");
            Step(" o The new geozone is created in the geozone tree");
            Step(" o Required fields are not changed.");
            Step(" o Note: there is a bug for this: SC-865");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(Settings.RootGeozoneName);
            var geozones = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.GeoZone);
            VerifyEqual("7. Verify The new geozone is created in the geozone tree", true, geozones.Contains(newGeozone));

            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newGeozone + @"\" + streetlight);
            VerifyEqual("7. Verify Required fields are not changed [Longitude]", expectedLong, equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue());
            VerifyEqual("7. Verify Required fields are not changed [Latitude]", expectedLat, equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue());
            VerifyEqual("7. Verify Required fields are not changed [Controller Id]", controller, equipmentInventoryPage.StreetlightEditorPanel.GetControllerIdValue());
            VerifyEqual("7. Verify Required fields are not changed [Type of Equipment]", typeOfEquipment, equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentValue());
            VerifyEqual("7. Verify Required fields are not changed [Identifier]", streetlight, equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue());
            
            try
            {
                DeleteGeozone(newGeozone);
                DeleteGeozone(geozone);                
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_05_06 Geozone - Import - Update non-required fields of a device by importing csv file")]
        [NonParallelizable]
        [Category("RunAlone")]
        public void EI_05_06()
        {
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI0506.csv");
            var geozone = SLVHelper.GenerateUniqueName("GZNEI0506");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var newStreetlight = SLVHelper.GenerateUniqueName("STLNew");
            var typeOfEquipment = "ABEL-Vigilon A[Dimmable ballast]";
            var fullGeozonePath = Settings.RootGeozoneName + @"/" + geozone;
            var latitude = SLVHelper.GenerateLatitude();
            var longitude = SLVHelper.GenerateLongitude();
            var expectedLat = string.Format("{0} °", latitude);
            var expectedLong = string.Format("{0} °", longitude);          
            var newSupplyVoltage = string.Format("{0} Volts", SLVHelper.GenerateStringInteger(500));            
            var newLampWattage = SLVHelper.GenerateStringInteger(500);
            var itemSupplyVoltage = "network.supplyvoltage#" + newSupplyVoltage;
            var itemLampWattage = "power#" + newLampWattage;

            Step("**** Precondition ****");
            DeleteGeozones("GZNEI0506*");
            Step(" - User has logged in successfully");
            Step(" - There is a streetlight with all required fields Name (name), Controller ID (controllerStrId), Identifier(idOnController), Type of equipment(model)");
            Step(" - Prepare a csv file with all required fields and some non-required fields such as: name, supply voltage, lamp wattage.");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone, lat: latitude, lng: longitude);
            CreateCsv(DeviceType.Streetlight, csvFilePath, fullGeozonePath, controller, streetlight, typeOfEquipment, newStreetlight, new List<string> { itemLampWattage, itemSupplyVoltage });
       
            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("3. Select the geozone set up in csv file and press More > Import");
            Step("4. Import csv with name field updated");            
            equipmentInventoryPage.Import(csvFilePath);

            Step("5. Verify Import successfully");
            Step(" o One device has been updated.");
            VerifyEqual("5. Verify Import successfully: One device has been updated.", "One device has been updated.", equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.GetMessageCaptionText());

            Step("6. Press Refresh button on the import panel, after refreshing, select the streetlight");
            equipmentInventoryPage.ReloadImport();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newStreetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("7. Verify The new streetlight is updated with");
            Step(" o Name = new name");
            Step(" o Lamp wattage = new value");
            Step(" o Supply voltage= new value");            
            Step(" o Other required fields are not changed.");
            VerifyEqual("7. Verify Name = new name", newStreetlight, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");
            VerifyEqual("7. Verify Lamp wattage = new value", newLampWattage, equipmentInventoryPage.StreetlightEditorPanel.GetLampWattageValue());
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");
            VerifyEqual("7. Verify Supply voltage= new value", newSupplyVoltage, equipmentInventoryPage.StreetlightEditorPanel.GetSupplyVoltageValue());            
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identity");
            VerifyEqual("7. Verify Other required fields are not changed [Parent Geozone]", geozone, equipmentInventoryPage.StreetlightEditorPanel.GetGeozoneValue());
            VerifyEqual("7. Verify Other required fields are not changed [Longitude]", expectedLong, equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue());
            VerifyEqual("7. Verify Other required fields are not changed [Latitude]", expectedLat, equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue());
            VerifyEqual("7. Verify Other required fields are not changed [Controller Id]", controller, equipmentInventoryPage.StreetlightEditorPanel.GetControllerIdValue());
            VerifyEqual("7. Verify Other required fields are not changed [Type of Equipment]", typeOfEquipment, equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentValue());
            VerifyEqual("7. Verify Other required fields are not changed [Identifier]", streetlight, equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }       

        [Test, DynamicRetry]
        [Description("EI_06 Geozone - Export")]
        [NonParallelizable]
        public void EI_06()
        {
            var testData = GetTestDataOfEI_06();
            var xmlGeozonePath = testData["Geozone"].ToString();
            var geozoneName = xmlGeozonePath.GetChildName();
            var expecteRemoteControlProperties = testData["ExpectedRemoteControlProperties"] as List<string>;
            var expecteOthersProperties = testData["ExpectedOthersProperties"] as List<string>;
            var expecteGroups = new List<string> { "Remote control", "Others" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select a geozone which has full of device types");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(xmlGeozonePath);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Click Export from More menu");
            equipmentInventoryPage.Export();

            Step("6. Verify Export panel appears showing all device types:");
            Step("  o AUDIO PLAYER");
            Step("  o BUILDING");
            Step("  o CAMERA IP");
            Step("  o CITY OBJECT");
            Step("  o CONTROLLER DEVICE");
            Step("  o ELECTRICAL COUNTER");
            Step("  o ENVIRONMENTAL SENSOR");
            Step("  o INPUTS");
            Step("  o NATURE");
            Step("  o NETWORK COMPONENT");
            Step("  o OCCUPANCY SENSOR");
            Step("  o OUTPUTS");
            Step("  o PARKING PLACE");
            Step("  o STREETLIGHT");
            Step("  o SWITCH DEVICE");
            Step("  o TANK");
            Step("  o TRANSPORT SIGNAGE");
            Step("  o VEHICLE");
            Step("  o VEHICLE CHARGING STATION");
            Step("  o WASTE CONTAINER");
            Step("  o WEATHER STATION");
            Step("  o CABINET CONTROLLER");
            var expectedDeviceTypeList = DeviceType.GetList();
            var actualDeviceTypeList = equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.GetListOfDeviceTypes();
            VerifyEqual("[SC-48] 6. Verify Export panel appears showing all device types as expected", expectedDeviceTypeList, actualDeviceTypeList, false);

            Step("7. Note currently checked device types");
            var notedCheckedDeviceTypesList = equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.GetListOfCheckedDeviceTypes();

            Step("8. Click Next");
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.ClickNextButton();
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.WaitForPropertiesListPanelDisplayed();
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.WaitForSaveButtonDisplayed();
            Step("9. Verify Export panel turns to show list of attributes");
            VerifyEqual("9. Verify Export panel turns to show list of attributes", true, equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.GetListOfProperties().Any());

            Step("10. Verify There are 2 expandable sections: 'Remote control' and 'Others'");
            var actualExpandedGroups = equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.GetListOfExpandedGroupsName();
            VerifyEqual("10. Verify Export panel turns to show list of attributes", expecteGroups, actualExpandedGroups, false);

            Step("11. Verify Section 'Remote control' shows following attributes:");
            Step("  o Category");
            Step("  o Circuit index");
            Step("  o Controller ID");
            Step("  o Dimming group");
            Step("  o Energy supplier");
            Step("  o External port");
            Step("  o GeoZone Path");
            Step("  o Identifier");
            Step("  o Internal port");
            Step("  o Lamp type name");
            Step("  o Latitude");
            Step("  o Longitude");
            Step("  o Name");
            Step("  o Reference");
            Step("  o Type of equipment");
            Step("  o Unique address");
            var actualRemoteControlProperties = equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.GetListOfRemoteControlProperties();
            VerifyEqual("11. Verify Section 'Remote control' shows attributes as expeceted", expecteRemoteControlProperties, actualRemoteControlProperties, false);

            Step("12. Verify Section 'Others' shows following attributes:");
            #region atttributes
            Step("  o 2nd MAC address");
            Step("  o 3rd MAC address");
            Step("  o Account number");
            Step("  o Activate");
            Step("  o Address 1");
            Step("  o Address 2");
            Step("  o Age");
            Step("  o Analog modbus 1");
            Step("  o Analog modbus 2");
            Step("  o Analog modbus 3");
            Step("  o Auto comm active");
            Step("  o Ballast brand");
            Step("  o Ballast type");
            Step("  o Bandwidth");
            Step("  o Bracket brand");
            Step("  o Bracket color");
            Step("  o Bracket model");
            Step("  o Bracket type");
            Step("  o Building owner");
            Step("  o Building surface");
            Step("  o Building usage");
            Step("  o CPD Mac address");
            Step("  o Cabinet");
            Step("  o Cabinet wattage");
            Step("  o Camera host name");
            Step("  o Catalog number");
            Step("  o Channel mask");
            Step("  o City");
            Step("  o Classification");
            Step("  o Color code");
            Step("  o Comm TX counter");
            Step("  o Comm. media");
            Step("  o Comment");
            Step("  o Commission mode");
            Step("  o Commissioning mode");
            Step("  o Communication status");
            Step("  o Config path");
            Step("  o Config status msg");
            Step("  o Configuration status");
            Step("  o Consider Replace-OLC as update");
            Step("  o Consider StreetLights as LightPoints");
            Step("  o Container hook type");
            Step("  o Container last collect");
            Step("  o Container model");
            Step("  o Container next collect");
            Step("  o Container owner");
            Step("  o Container type");
            Step("  o Container volume");
            Step("  o Container waste density");
            Step("  o Container waste price (m3)");
            Step("  o Control technology");
            Step("  o Controller Group");
            Step("  o Controller cache mode");
            Step("  o Controller install date");
            Step("  o Controller localhost");
            Step("  o Cost per MB");
            Step("  o Cost per extra MB");
            Step("  o Customer name");
            Step("  o Customer number");
            Step("  o DNS server host");
            Step("  o DNS server port");
            Step("  o Default calendar name");
            Step("  o Default light level");
            Step("  o Device HW Type");
            Step("  o Device HW version");
            Step("  o Device SW version");
            Step("  o Device manufacturer");
            Step("  o Device name");
            Step("  o Digital modbus 1");
            Step("  o Digital modbus 1 - Failure");
            Step("  o Digital modbus 10");
            Step("  o Digital modbus 10 - Failure");
            Step("  o Digital modbus 11");
            Step("  o Digital modbus 11 - Failure");
            Step("  o Digital modbus 12");
            Step("  o Digital modbus 12 - Failure");
            Step("  o Digital modbus 2");
            Step("  o Digital modbus 2 - Failure");
            Step("  o Digital modbus 3");
            Step("  o Digital modbus 3 - Failure");
            Step("  o Digital modbus 4");
            Step("  o Digital modbus 4 - Failure");
            Step("  o Digital modbus 5");
            Step("  o Digital modbus 5 - Failure");
            Step("  o Digital modbus 6");
            Step("  o Digital modbus 6 - Failure");
            Step("  o Digital modbus 7");
            Step("  o Digital modbus 7 - Failure");
            Step("  o Digital modbus 8");
            Step("  o Digital modbus 8 - Failure");
            Step("  o Digital modbus 9");
            Step("  o Digital modbus 9 - Failure");
            Step("  o Dimming interface");
            Step("  o Domain");
            Step("  o Dry Contact Input Label");
            Step("  o Edge");
            Step("  o Edge Mode");
            Step("  o Elexon charge code");
            Step("  o Energy efficiency");
            Step("  o Energy report interval");
            Step("  o Energy supplier");
            Step("  o Extended PAN ID");
            Step("  o Extension card address");
            Step("  o Extension card type");
            Step("  o External Battery");
            Step("  o External Coupling");
            Step("  o Family");
            Step("  o Feeder number");
            Step("  o Firmware update status");
            Step("  o Fixed saved power");
            Step("  o Floor area");
            Step("  o Gas consumption");
            Step("  o Gateway");
            Step("  o Gateway Host Name");
            Step("  o Geolocation type");
            Step("  o Global dim command");
            Step("  o Group dim command");
            Step("  o Gzip payload");
            Step("  o Hardware revision");
            Step("  o High light level");
            Step("  o High voltage threshold");
            Step("  o High-to-low delay");
            Step("  o Host name");
            Step("  o IMEI number");
            Step("  o IP address (internal)");
            Step("  o IP network mask");
            Step("  o Incl. latency in interval");
            Step("  o Input 1 - Label");
            Step("  o Input 10 - Label");
            Step("  o Input 11 - Label");
            Step("  o Input 12 - Label");
            Step("  o Input 2 - Label");
            Step("  o Input 3 - Label");
            Step("  o Input 4 - Label");
            Step("  o Input 5 - Label");
            Step("  o Input 6 - Label");
            Step("  o Input 7 - Label");
            Step("  o Input 8 - Label");
            Step("  o Input 9 - Label");
            Step("  o Input Failure 1 - Label");
            Step("  o Input Failure 10 - Label");
            Step("  o Input Failure 11 - Label");
            Step("  o Input Failure 12 - Label");
            Step("  o Input Failure 13 - Label");
            Step("  o Input Failure 14 - Label");
            Step("  o Input Failure 15 - Label");
            Step("  o Input Failure 16 - Label");
            Step("  o Input Failure 17 - Label");
            Step("  o Input Failure 18 - Label");
            Step("  o Input Failure 2 - Label");
            Step("  o Input Failure 3 - Label");
            Step("  o Input Failure 4 - Label");
            Step("  o Input Failure 5 - Label");
            Step("  o Input Failure 6 - Label");
            Step("  o Input Failure 7 - Label");
            Step("  o Input Failure 8 - Label");
            Step("  o Input Failure 9 - Label");
            Step("  o Install status");
            Step("  o Is CPD");
            Step("  o Lamp - CLO initial value");
            Step("  o Lamp - Max lamp wattage");
            Step("  o Lamp Type");
            Step("  o Lamp install date");
            Step("  o Lamp wattage (W)");
            Step("  o Last IMU log sequence");
            Step("  o Last IMU request time");
            Step("  o Last event log sequence");
            Step("  o Last event request time");
            Step("  o Last meter log sequence");
            Step("  o Last meter request time");
            Step("  o Library version");
            Step("  o Light control mode");
            Step("  o Light distribution");
            Step("  o Link key");
            Step("  o Local IP address");
            Step("  o Location Type");
            Step("  o Low voltage threshold");
            Step("  o Low-to-high delay");
            Step("  o Luminaire brand");
            Step("  o Luminaire install date");
            Step("  o Luminaire model");
            Step("  o Luminaire type");
            Step("  o Lux level threshold");
            Step("  o Mains control mode");
            Step("  o Maintain delay");
            Step("  o Manufacturing date");
            Step("  o Map number");
            Step("  o Master daylight sensor mode");
            Step("  o Max connections");
            Step("  o Max devices");
            Step("  o Max hops");
            Step("  o Max units");
            Step("  o Meter program ID");
            Step("  o NIC HW model");
            Step("  o NIC HW version");
            Step("  o NIC SW version");
            Step("  o NIC current mode");
            Step("  o NIC fallback mode");
            Step("  o NIC serial number");
            Step("  o NTP host");
            Step("  o Network Id");
            Step("  o Network key");
            Step("  o Network key");
            Step("  o Network type");
            Step("  o Node master key");
            Step("  o Number of floor");
            Step("  o Number of persons");
            Step("  o Number of segments");
            Step("  o OLC config mode");
            Step("  o OLC timeout");
            Step("  o OLC tries");
            Step("  o Off Lux Level");
            Step("  o On Lux Level");
            Step("  o Oper TX counter");
            Step("  o Operational Mode");
            Step("  o Orientation");
            Step("  o Output 1 - Calendar name");
            Step("  o Output 1 - Label");
            Step("  o Output 2 - Calendar name");
            Step("  o Output 2 - Label");
            Step("  o Output 3 - Calendar name");
            Step("  o Output 3 - Label");
            Step("  o Output 4 - Calendar name");
            Step("  o Output 4 - Label");
            Step("  o Output 5 - Calendar name");
            Step("  o Output 5 - Label");
            Step("  o Output 6 - Calendar name");
            Step("  o Output 6 - Label");
            Step("  o PAN ID");
            Step("  o PF threshold");
            Step("  o Password");
            Step("  o Password");
            Step("  o Phone number");
            Step("  o Picture file path");
            Step("  o Pole color code");
            Step("  o Pole height");
            Step("  o Pole install date");
            Step("  o Pole material");
            Step("  o Pole or head install");
            Step("  o Pole shape");
            Step("  o Pole status");
            Step("  o Pole type");
            Step("  o Premise");
            Step("  o Primary DNS");
            Step("  o Product ID");
            Step("  o Product reference");
            Step("  o Provisionning host");
            Step("  o Quota inbound limit");
            Step("  o Quota outbound limit");
            Step("  o RF channel");
            Step("  o RF lamp port");
            Step("  o RF segment identifier");
            Step("  o RF short address");
            Step("  o Realtime command");
            Step("  o Realtime path");
            Step("  o Reference unit");
            Step("  o Report frequency");
            Step("  o Report time");
            Step("  o Request interval (ms)");
            Step("  o Retries");
            Step("  o SCP schema version");
            Step("  o SCP servlet path");
            Step("  o SIM card number");
            Step("  o SLV datapoint server fpm usage");
            Step("  o Section");
            Step("  o Segment");
            Step("  o Sensor active period");
            Step("  o Sensor group");
            Step("  o Sensor to container bottom (cm)");
            Step("  o Sensor to container top (cm)");
            Step("  o Sensor to tank bottom (cm)");
            Step("  o Sensor to tank top (cm)");
            Step("  o Sensor type");
            Step("  o Serial number");
            Step("  o Server WebApp URL");
            Step("  o Short address");
            Step("  o Size");
            Step("  o Skip delete schedule");
            Step("  o Smart poll fpm usage");
            Step("  o Software version");
            Step("  o Specy");
            Step("  o Start delay");
            Step("  o Static IP");
            Step("  o Status");
            Step("  o Subnet mask");
            Step("  o Substation");
            Step("  o Supply voltage");
            Step("  o Switch");
            Step("  o Tank flow density");
            Step("  o Tank flow price (m3)");
            Step("  o Tank hook type");
            Step("  o Tank last collect");
            Step("  o Tank model");
            Step("  o Tank next collect");
            Step("  o Tank owner");
            Step("  o Tank type");
            Step("  o Tank volume");
            Step("  o Time zone");
            Step("  o TimeZone [POSIX.1]");
            Step("  o Timeout");
            Step("  o Timeout");
            Step("  o Timestamp counter");
            Step("  o Total inbound limit");
            Step("  o Total outbound limit");
            Step("  o Transformer");
            Step("  o Transmission delay");
            Step("  o Transmit power");
            Step("  o Trust center EUI64");
            Step("  o Type of VCS");
            Step("  o Type of building");
            Step("  o Type of cabinet");
            Step("  o Type of camera");
            Step("  o Type of container waste");
            Step("  o Type of equipment");
            Step("  o Type of ground fixing");
            Step("  o Type of meter");
            Step("  o Type of object");
            Step("  o Type of sensor");
            Step("  o Type of signage");
            Step("  o Type of tank flow");
            Step("  o Type of tree");
            Step("  o UPnP port");
            Step("  o Use UPnP");
            Step("  o User name");
            Step("  o Username");
            Step("  o Utility ID");
            Step("  o Utility Location ID");
            Step("  o VCS host name");
            Step("  o Video Host Password");
            Step("  o Video Host URL");
            Step("  o Video Host Username");
            Step("  o Video encoding");
            Step("  o Voltage");
            Step("  o Water consumption");
            Step("  o Zip code");
            Step("  o kWh consumption");
            Step("  o Cabinet Controller");
            Step("  o Dim level 1");
            Step("  o Dim level 2");
            Step("  o Dim level 3");
            Step("  o Driver HW version");
            Step("  o Driver S/N");
            Step("  o Driver SW version");
            Step("  o Driver name");
            Step("  o Driver product code");
            Step("  o Lamp failure threshold");
            Step("  o Lamp warmup time");
            Step("  o Luminaire CCT");
            Step("  o Luminaire S/N");
            Step("  o Luminaire color");
            Step("  o Luminaire light source");
            Step("  o Luminaire lumen output");
            Step("  o Luminaire manuf. date");
            Step("  o Luminaire max AC volt.");
            Step("  o Luminaire min AC volt.");
            Step("  o Luminaire part desc.");
            Step("  o Luminaire part number");
            Step("  o Luminaire style");
            Step("  o Poll interval");
            Step("  o Samples/interval");
            Step("  o Threshold 1");
            Step("  o Threshold 2");
            Step("  o xMinutes");
            #endregion //attributes

            var actualOthersProperties = equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.GetListOfOthersProperties();
            VerifyEqual("12. Verify Section 'Others' shows attributes as expeceted", expecteOthersProperties, actualOthersProperties, false);

            Step("13. Note currently checked attributes");
            var notedCheckedPropertiesList = equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.GetListOfCheckedProperties();

            Step("14. Click Save");
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.WaitForDownloadButtonDisplayed();

            Step("15. Verify Save button turns into Download button");
            VerifyEqual("15. Verify Save button is invisible", false, equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.IsSaveButtonDisplayed());
            VerifyEqual("15. Verify Download button is visible", true, equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.IsDownloadButtonDisplayed());

            Step("16. Click Download");
            SLVHelper.DeleteAllFilesByPattern(_exportedFilePattern);            
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.ClickDownloadButton();            
            SLVHelper.SaveDownloads();

            Step("17. Verify A CSV file is downloaded with name format 'Equipment_Inventory*.csv'");
            VerifyEqual("17. Verify A CSV file is downloaded with name format 'Equipment_Inventory*.csv'", true, SLVHelper.CheckFileExists(_exportedFilePattern));

            Step("18. Verify Number of columns in CSV = number of checked attributes");
            var tblCSV = SLVHelper.BuildDataTableFromLastDownloadedCSV(_exportedFilePattern);
            equipmentInventoryPage.GeozoneEditorPanel.WaitForExportPanelDisappeared();
            VerifyEqual("18. Verify Number of columns in CSV = number of checked attributes", notedCheckedPropertiesList.Count, tblCSV.Columns.Count);

            Step("19. Verify Number of exported devices in CSV = number of devices whose device types are checked");
            VerifyEqual("19. Verify Number of exported devices in CSV = number of devices whose device types are checked", notedCheckedDeviceTypesList.Count, tblCSV.Rows.Count);

            Step("20. Verify Export panel disappears");
            VerifyEqual("20. Verify Export panel disappears", false, equipmentInventoryPage.GeozoneEditorPanel.IsExportPanelDisplayed());

            Step("21. Verify Geozone Editor panel appears back");
            VerifyEqual("21. Verify Geozone Editor panel appears back", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("22. Repeat from step #5 to the end. This time, device types and attributes are un/checked randomly.");
            Step("23. Verify The same with steps from #17 to #21");

            Step("-> Click Export from More menu");
            equipmentInventoryPage.Export();

            actualDeviceTypeList = equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.GetListOfDeviceTypes();
            VerifyEqual("Verify Export panel appears showing all device types as expected", expectedDeviceTypeList, actualDeviceTypeList, false);
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.CheckRandomDeviceTypes(4);
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.UncheckRandomDeviceTypes(2);

            Step("-> Note currently checked device types");
            notedCheckedDeviceTypesList = equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.GetListOfCheckedDeviceTypes();

            Step("-> Click Next");
            Step("-> Checking [SC-51] Export widget does not close automatically after exporting file (IE11 only)");
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.ClickNextButton();
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.WaitForPropertiesListPanelDisplayed();

            Step("-> Verify Export panel turns to show list of attributes");
            VerifyEqual("Verify Export panel turns to show list of attributes", true, equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.GetListOfProperties().Any());

            Step("-> Verify There are 2 expandable sections: 'Remote control' and 'Others'");
            actualExpandedGroups = equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.GetListOfExpandedGroupsName();
            VerifyEqual("Verify Export panel turns to show list of attributes", expecteGroups, actualExpandedGroups, false);

            actualRemoteControlProperties = equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.GetListOfRemoteControlProperties();
            VerifyEqual("Verify Section 'Remote control' shows attributes as expeceted", expecteRemoteControlProperties, actualRemoteControlProperties, false);
            actualOthersProperties = equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.GetListOfOthersProperties();
            VerifyEqual("Verify Section 'Others' shows attributes as expeceted", expecteOthersProperties, actualOthersProperties, false);

            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.CheckRandomRemoteControlProperties(4);
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.UncheckRandomRemoteControlProperties(2);
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.CheckRandomOthersProperties(4);

            Step("-> Note currently checked attributes");
            notedCheckedPropertiesList = equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.GetListOfCheckedProperties();

            Step("-> Click Save");
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.WaitForDownloadButtonDisplayed();

            Step("-> Verify Save button turns into Download button");
            VerifyEqual("Verify Save button is invisible", false, equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.IsSaveButtonDisplayed());
            VerifyEqual("Verify Download button is visible", true, equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.IsDownloadButtonDisplayed());

            Step("-> Click Download");
            SLVHelper.DeleteAllFilesByPattern(_exportedFilePattern);            
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.ClickDownloadButton();
            SLVHelper.SaveDownloads();

            tblCSV = SLVHelper.BuildDataTableFromLastDownloadedCSV(_exportedFilePattern);
            equipmentInventoryPage.GeozoneEditorPanel.WaitForExportPanelDisappeared();
            VerifyEqual("Verify A CSV file is downloaded with name format 'Equipment_Inventory*.csv'", true, SLVHelper.CheckFileExists(_exportedFilePattern));
            VerifyEqual("Verify Number of columns in CSV = number of checked attributes", notedCheckedPropertiesList.Count, tblCSV.Columns.Count);
            VerifyEqual("Verify Number of exported devices in CSV = number of devices whose device types are checked", notedCheckedDeviceTypesList.Count, tblCSV.Rows.Count);
            VerifyEqual("Verify Export panel disappears", false, equipmentInventoryPage.GeozoneEditorPanel.IsExportPanelDisplayed());
            VerifyEqual("Verify Geozone Editor panel appears back", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());
        }

        [Test, DynamicRetry]
        [Description("EI_07 Streetlight - Replace Node")]
        [NonParallelizable]
        [Category("RunAlone")]
        public void EI_07()
        {
            var testData = GetTestDataOfEI_07();
            var parentGeozone = testData["Geozone"].ToString();
            var parentGeozoneName = parentGeozone.GetChildName();
            var controllerId = testData["ControllerId"];
            var controllerName = testData["ControllerName"];
            var geozoneName = SLVHelper.GenerateUniqueName("GZNEI07");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var switchDevice = SLVHelper.GenerateUniqueName("SWH");
            var validStreetlightMacAddress = SLVHelper.GenerateMACAddress();
            var validSwitchMacAddress = SLVHelper.GenerateMACAddress();
            var invalidStreetlightMacAddress = SLVHelper.GenerateStringMixedNumber(12).ToUpper();
            var invalidSwitchMacAddress = SLVHelper.GenerateStringMixedNumber(12).ToUpper();
            var csvEmptyMacAddressFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI07-EmptyMA.csv");
            var csvValidMacAddressFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI07-ValidMA.csv");
            var csvInvalidMacAddressFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI07-InvalidMA.csv");
            var geozonePath = parentGeozone + @"\" + geozoneName;
            var fullGeozonePath = string.Format("{0}/{1}", Settings.RootGeozoneName, geozonePath.Replace(@"\", "/"));
            var devicesWithValidMA = new List<string> { streetlight + "#" + validStreetlightMacAddress, switchDevice + "#" + validSwitchMacAddress };
            var devicesWithInvalidMA = new List<string> { streetlight + "#" + invalidStreetlightMacAddress, switchDevice + "#" + invalidSwitchMacAddress };
            var streetlightTOE = "LRL LumenIQ Node[Lamp]";
            var switchTOE = "Sidhe Boann LORA Device[switch]";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a geozone containing 2 devices using Smartsims/Smartsims commission");
            Step("  + 1 Switch type of equipment: Sidhe Boann LORA Device[switch]");
            Step("  + 1 streetlight type of equipment: LRL LumenIQ Node[Lamp]");
            Step(" - Prepare a csv file to update the Unique Address of the switch and streetlight after replacing node.");            
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI07*");
            CreateNewGeozone(geozoneName, parentGeozoneName, "13.65983", "13.66500", "92.98520", "92.99633");
            CreateNewDevice(DeviceType.Streetlight, streetlight, controllerId, geozoneName, streetlightTOE, SLVHelper.GenerateCoordinate("13.66235", "13.66355"), SLVHelper.GenerateCoordinate("92.99014", "92.99151"));
            CreateNewDevice(DeviceType.Switch, switchDevice, controllerId, geozoneName, switchTOE, SLVHelper.GenerateCoordinate("13.66235", "13.66355"), SLVHelper.GenerateCoordinate("92.99014", "92.99151"));
            CreateCsvDevicesHasNoLocation(csvEmptyMacAddressFilePath, fullGeozonePath, new List<DeviceModel>
            {
                new DeviceModel{ Type = DeviceType.Streetlight, Id = streetlight, Name = streetlight, Controller = controllerId, TypeOfEquipment = streetlightTOE },
                new DeviceModel{ Type = DeviceType.Switch, Id = switchDevice, Name = switchDevice, Controller = controllerId, TypeOfEquipment = switchTOE }
            });

            CreateCsvDevicesHasNoLocation(csvValidMacAddressFilePath, fullGeozonePath, new List<DeviceModel>
            {
                new DeviceModel{ Type = DeviceType.Streetlight, Id = streetlight, Name = streetlight, Controller = controllerId, TypeOfEquipment = streetlightTOE, UniqueAddress = validStreetlightMacAddress },
                new DeviceModel{ Type = DeviceType.Switch, Id = switchDevice, Name = switchDevice, Controller = controllerId, TypeOfEquipment = switchTOE, UniqueAddress = validSwitchMacAddress }
            });

            CreateCsvDevicesHasNoLocation(csvInvalidMacAddressFilePath, fullGeozonePath , new List<DeviceModel>
            {
                new DeviceModel{ Type = DeviceType.Streetlight, Id = streetlight, Name = streetlight, Controller = controllerId, TypeOfEquipment = streetlightTOE, UniqueAddress = invalidStreetlightMacAddress },
                new DeviceModel{ Type = DeviceType.Switch, Id = switchDevice, Name = switchDevice, Controller = controllerId, TypeOfEquipment = switchTOE, UniqueAddress = invalidSwitchMacAddress }
            });

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);           
          
            Step("1. Go to Equipment Inventory app");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("2. Select the geozone in the precondition");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozonePath);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("3. Press More button, select Replace Nodes options, then choose the csv file in the precondition.");
            equipmentInventoryPage.ReplaceNodes(csvValidMacAddressFilePath);

            Step("4. Verify Replacing Nodes is successfully, the new UI panel displays with");
            Step(" o Title: Replace Nodes");
            Step(" o Details: List of nodes replaced successfully with the Check icon");
            VerifyEqual("4. Verify Replacing Nodes panel displays with Title: Replace Nodes", "Replace Nodes", equipmentInventoryPage.GeozoneEditorPanel.ReplaceNodesPanel.GetPanelTitleText());
            VerifyEqual("4. Verify Details: List of nodes replaced successfully with the Check icon", true, equipmentInventoryPage.GeozoneEditorPanel.ReplaceNodesPanel.GetListOfMessageIcons().All(p => p.Contains("status-ok.png")));

            Step("5. Hover the mouse on a node");
            Step("6. Verify A tooltip displays with");
            Step(" o Index: the position of the node in csv file");
            Step(" o controllerStrId: controller id");
            Step(" o idOnController: device name");
            Step(" o macAddress: new value of Unique Address");
            var rndDevice = devicesWithValidMA.PickRandom();
            var deviceName = rndDevice.SplitAndGetAt("#", 0);
            var deviceMacAddress = rndDevice.SplitAndGetAt("#", 1);
            var expectedIndex = string.Format("Index: {0}", devicesWithValidMA.IndexOf(rndDevice) + 1);
            var expectedControllerStrId = string.Format("controllerStrId: {0}", controllerId);
            var expectedIdOnController = string.Format("idOnController: {0}", deviceName);
            var expectedMacAddress = string.Format("macAddress: {0}", deviceMacAddress);
            var tooltip = equipmentInventoryPage.GeozoneEditorPanel.ReplaceNodesPanel.GetMessageTooltip(deviceName).SplitEx();
            VerifyEqual("6. Verify A tooltip displays with index: the position of the node in csv file", expectedIndex, tooltip[0]);
            VerifyEqual("6. Verify A tooltip displays with controllerStrId: controller id", expectedControllerStrId, tooltip[1]);
            VerifyEqual("6. Verify A tooltip displays with idOnController: device name", expectedIdOnController, tooltip[2]);
            VerifyEqual("6. Verify A tooltip displays with macAddress: new value of Unique Address", expectedMacAddress, tooltip[3]);

            Step("7. Press Refresh on the Replace Nodes panel");
            equipmentInventoryPage.ReloadReplaceNodes();

            Step("8. Verify The panel disappears");
            VerifyEqual("8. Verify The panel disappears", true, !equipmentInventoryPage.GeozoneEditorPanel.IsReplaceNodesPanelDisplayed());

            Step("9. Select the streetlight");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("10. Verify The Unique Address is updated the new value and READ-ONLY");
            VerifyEqual("10. Verify The Unique Address is updated the new value", validStreetlightMacAddress, equipmentInventoryPage.StreetlightEditorPanel.GetUniqueAddressValue());
            VerifyEqual("10. Verify The Unique Address is READ-ONLY", true, equipmentInventoryPage.StreetlightEditorPanel.IsUniqueAddressReadOnly());

            Step("11. Select the switch");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchDevice);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("12. Verify The Unique Address is updated the new value and READ-ONLY");
            VerifyEqual("12. Verify The Unique Address is updated the new value", validSwitchMacAddress, equipmentInventoryPage.SwitchEditorPanel.GetUniqueAddressValue());
            VerifyEqual("12. Verify The Unique Address is READ-ONLY", true, equipmentInventoryPage.SwitchEditorPanel.IsUniqueAddressReadOnly());

            Step("13. Update Mac Addresses to invalid values in csv and do Replace Nodes again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozoneName);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.ReplaceNodes(csvInvalidMacAddressFilePath);

            Step("14. Verify after replacing nodes with invalid values, the Replace Nodes panel displays with");
            Step(" o device name-Invalid MacAddress format 'invalid value from csv file'!");
            var expectedMessages = new List<string>();
            expectedMessages.Add(string.Format("{0}-Invalid MacAddress format '{1}'!", streetlight, invalidStreetlightMacAddress));
            expectedMessages.Add(string.Format("{0}-Invalid MacAddress format '{1}'!", switchDevice, invalidSwitchMacAddress));
            var actualMessages = equipmentInventoryPage.GeozoneEditorPanel.ReplaceNodesPanel.GetListOfMessages();
            VerifyEqual("14. Verify Replace Nodes panel displays with device name-Invalid MacAddress format 'invalid value from csv file'!", expectedMessages, actualMessages, false);

            Step("15. Select the streetlight");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("16. Verify The Unique Address is not updated and READ-ONLY");
            VerifyEqual("16. Verify The Unique Address is not updated", validStreetlightMacAddress, equipmentInventoryPage.StreetlightEditorPanel.GetUniqueAddressValue());
            VerifyEqual("16. Verify The Unique Address is READ-ONLY", true, equipmentInventoryPage.StreetlightEditorPanel.IsUniqueAddressReadOnly());
            
            Step("17. Select the switch");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchDevice);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("18. Verify The Unique Address is not updated and READ-ONLY");
            VerifyEqual("18. Verify The Unique Address is not updated", validSwitchMacAddress, equipmentInventoryPage.SwitchEditorPanel.GetUniqueAddressValue());
            VerifyEqual("18. Verify The Unique Address is READ-ONLY", true, equipmentInventoryPage.SwitchEditorPanel.IsUniqueAddressReadOnly());

            Step("19. Clear all Mac Addresses in the csv file and do Replace Nodes again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozoneName);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.ReplaceNodes(csvEmptyMacAddressFilePath);

            Step("20. Verify after replacing nodes successfully with empty Mac Addresses, each device has");
            Step(" o Unique Address is clear and ENABLE again");

            Step("-> Select the streetlight");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("20. Verify The Unique Address is clear", "", equipmentInventoryPage.StreetlightEditorPanel.GetUniqueAddressValue());
            VerifyEqual("20. Verify The Unique Address is ENABLE", true, !equipmentInventoryPage.StreetlightEditorPanel.IsUniqueAddressReadOnly());

            Step("-> Select the switch");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchDevice);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("20. Verify The Unique Address is clear", "", equipmentInventoryPage.SwitchEditorPanel.GetUniqueAddressValue());
            VerifyEqual("20. Verify The Unique Address is ENABLE", true, !equipmentInventoryPage.SwitchEditorPanel.IsUniqueAddressReadOnly());

            try
            {
                DeleteGeozone(geozoneName);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_08 Geozone - Editor")]
        public void EI_08()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI08");
            var parentGeozone = Settings.RootGeozoneName;
            var expecteAddMenuItems = new List<string> { "Add GeoZone", "Add Device" };
            var expecteMoreMenuItems = new List<string> { "Import", "Export", "Replace Nodes" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI08*");
            CreateNewGeozone(geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select the root geozone");
            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());
            var devivesCount = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeDevicesCount();

            Step("5. Verify Geozone Editor toolbar items are: Back button, Add menu button, Save button, Remove button, 'More...' menu button");
            VerifyEqual("5. Verify Back button is visible", true, equipmentInventoryPage.GeozoneEditorPanel.IsBackButtonDisplayed());
            VerifyEqual("5. Verify Add menu button is visible", true, equipmentInventoryPage.GeozoneEditorPanel.IsAddNewMenuDisplayed());
            VerifyEqual("5. Verify Save button is visible", true, equipmentInventoryPage.GeozoneEditorPanel.IsSaveButtonDisplayed());
            VerifyEqual("5. Verify Remove button is visible", true, equipmentInventoryPage.GeozoneEditorPanel.IsDeleteButtonDisplayed());
            VerifyEqual("5. Verify 'More...' menu is visible", true, equipmentInventoryPage.GeozoneEditorPanel.IsMoreMenuDisplayed());

            Step("6. Click Add menu button");
            var actualAddMenuItems = equipmentInventoryPage.GeozoneEditorPanel.GetListOfAddMenuItems();

            Step("7. Verify Add menu has 2 items 'Add GeoZone' and 'Add Device'");
            VerifyEqual("7. Verify Add menu has 2 items 'Add GeoZone' and 'Add Device'", expecteAddMenuItems, actualAddMenuItems, false);

            Step("8. Click 'More...' menu button");
            var actualMoreMenuItems = equipmentInventoryPage.GeozoneEditorPanel.GetListOfMoreMenuItems();

            Step("9. Verify 'More...' menu has 3 items 'Import', 'Export' and 'Replace Nodes'");
            VerifyEqual("Verify 'More...' menu has 3 items 'Import', 'Export' and 'Replace Nodes'", expecteMoreMenuItems, actualMoreMenuItems, false);

            Step("10. Verify Geozone name property has a label whose text is 'Name' and an input whose value is Root geozone's name and is editable");
            VerifyEqual("10. Verify Geozone name property has a label whose text is 'Name'", "Name", equipmentInventoryPage.GeozoneEditorPanel.GetNameText());
            VerifyEqual("10. Verify an input whose value is Root geozone's name", Settings.RootGeozoneName, equipmentInventoryPage.GeozoneEditorPanel.GetNameValue());
            VerifyEqual("10. Verify Name input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.IsNameInputReadOnly());

            Step("11. Verify Parent property has a label whose text is 'Parent' and an input whose value is empty and is readonly");
            VerifyEqual("11. Verify Geozone name property has a label whose text is 'Parent'", "Parent", equipmentInventoryPage.GeozoneEditorPanel.GetParentGeozoneText());
            VerifyEqual("11. Verify an input whose value is empty", string.Empty, equipmentInventoryPage.GeozoneEditorPanel.GetParentGeozoneValue());
            VerifyEqual("11. Verify Parent input is readonly", false, equipmentInventoryPage.GeozoneEditorPanel.IsParentGeozoneDropDownReadOnly());

            Step("12. Verify Update geozone bounds button has 'Update GeoZone's bounds' text");
            VerifyEqual("12. Verify Update geozone bounds button has 'Update GeoZone's bounds' text", "Update GeoZone's bounds", equipmentInventoryPage.GeozoneEditorPanel.GetUdpateBoundsButtonText());

            Step("13. Verify Latitude Minimum property has a label whose text is 'Latitude Minimum' and an input whose value is not empty");
            VerifyEqual("13. Verify Latitude Minimum property has a label whose text is 'Latitude Minimum'", "Latitude Minimum", equipmentInventoryPage.GeozoneEditorPanel.GetLatitudeMinimumText());
            VerifyEqual("13. Verify an input whose value is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.GeozoneEditorPanel.GetLatitudeMinimumValue()));

            Step("14. Verify Longitude Minimum property has a label whose text is 'Longitude Minimum' and an input whose value is not empty");
            VerifyEqual("14. Verify Longitude Minimum property has a label whose text is 'Longitude Minimum'", "Longitude Minimum", equipmentInventoryPage.GeozoneEditorPanel.GetLongitudeMinimumText());
            VerifyEqual("14. Verify an input whose value is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.GeozoneEditorPanel.GetLongitudeMinimumValue()));

            Step("15. Verify Latitude Maximum property has a label whose text is 'Latitude Maximum' and an input whose value is not empty");
            VerifyEqual("15. Verify Latitude Maximum property has a label whose text is 'Latitude Maximum'", "Latitude Maximum", equipmentInventoryPage.GeozoneEditorPanel.GetLatitudeMaximumText());
            VerifyEqual("15. Verify an input whose value is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.GeozoneEditorPanel.GetLatitudeMaximumValue()));

            Step("16. Verify Longitude Maximum property has a label whose text is 'Longitude Maximum' and an input whose value is not empty");
            VerifyEqual("16. Verify Longitude Maximum property has a label whose text is 'Longitude Maximum'", "Longitude Maximum", equipmentInventoryPage.GeozoneEditorPanel.GetLongitudeMaximumText());
            VerifyEqual("16. Verify an input whose value is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.GeozoneEditorPanel.GetLongitudeMaximumValue()));

            Step("17. Verify There is only one tab in tab container. Its text is 'Properties' and it's visible");
            var tabsList = equipmentInventoryPage.GeozoneEditorPanel.GetListOfTabsName();
            VerifyEqual("17. Verify Only 'Properties' tab is visible", true, tabsList.Count == 1 && tabsList.Contains("Properties"));

            Step("18. Verify There is only one expandable section under 'Properties' table. Its text is 'Virtual Energy Consumption' and it's visible");
            var groupsList = equipmentInventoryPage.GeozoneEditorPanel.GetListOfGroupsName();
            VerifyEqual("18. Verify Only 'Virtual Energy Consumption' section is visible", true, groupsList.Count == 1 && groupsList.Contains("Virtual Energy Consumption"));
            VerifyEqual("18. Verify 'Virtual Energy Consumption' section is expanded", true, equipmentInventoryPage.GeozoneEditorPanel.IsGroupExpanded("Virtual Energy Consumption"));

            Step("19. Verify Under 'Virtual Energy Consumption' section, there are 12 properties as 12 months displayed as followings:");
            Step("  o Label: 'January kWh', Input type: Numeric up down input");
            Step("  o Label: 'February kWh', Input type: Numeric up down input");
            Step("  o Label: 'March kWh', Input type: Numeric up down input");
            Step("  o Label: 'April kWh', Input type: Numeric up down input");
            Step("  o Label: 'May kWh', Input type: Numeric up down input");
            Step("  o Label: 'June kWh', Input type: Numeric up down input");
            Step("  o Label: 'July kWh', Input type: Numeric up down input");
            Step("  o Label: 'August kWh', Input type: Numeric up down input");
            Step("  o Label: 'September kWh', Input type: Numeric up down input");
            Step("  o Label: 'October kWh', Input type: Numeric up down input");
            Step("  o Label: 'November kWh', Input type: Numeric up down input");
            Step("  o Label: 'December kWh', Input type: Numeric up down input");
            VerifyVirtualEnergyConsumptionInputs(equipmentInventoryPage);

            Step("20. Verify Custom report button has 'Custom report' text");
            VerifyEqual("20. Verify Custom report button has 'Custom report' text", "Custom report", equipmentInventoryPage.GeozoneEditorPanel.GetCustomReportCaptionText());

            Step("21. Click Back button");
            equipmentInventoryPage.GeozoneEditorPanel.ClickBackButton();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("22. Verify Geozone Editor panel disappears");
            VerifyEqual("22. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("23. Select another geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("24. Verify The same expected results as selecting the root geozone execept one difference: Parent property has value of its parent geozone's name and the value field can be an input (in case 'Enable geozone parent' option is disabled in Back Office ) or a dropdown list (in case 'Enable geozone parent' option is enabled in Back Office)");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("24. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());
            devivesCount = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeDevicesCount();

            Step("--> Verify Geozone Editor toolbar items are: Back button, Add menu button, Save button, Remove button, 'More...' menu button");
            VerifyEqual("24. Verify Back button is visible", true, equipmentInventoryPage.GeozoneEditorPanel.IsBackButtonDisplayed());
            VerifyEqual("24. Verify Add menu button is visible", true, equipmentInventoryPage.GeozoneEditorPanel.IsAddNewMenuDisplayed());
            VerifyEqual("24. Verify Save button is visible", true, equipmentInventoryPage.GeozoneEditorPanel.IsSaveButtonDisplayed());
            VerifyEqual("24. Verify Remove button is visible", true, equipmentInventoryPage.GeozoneEditorPanel.IsDeleteButtonDisplayed());
            VerifyEqual("24. Verify 'More...' menu is visible", true, equipmentInventoryPage.GeozoneEditorPanel.IsMoreMenuDisplayed());

            Step("--> Click Add menu button");
            actualAddMenuItems = equipmentInventoryPage.GeozoneEditorPanel.GetListOfAddMenuItems();
            Step("--> Verify Add menu has 2 items 'Add GeoZone' and 'Add Device'");
            VerifyEqual("24. Verify Add menu has 2 items 'Add GeoZone' and 'Add Device'", expecteAddMenuItems, actualAddMenuItems, false);

            Step("--> Click 'More...' menu button");
            actualMoreMenuItems = equipmentInventoryPage.GeozoneEditorPanel.GetListOfMoreMenuItems();
            Step("--> Verify 'More...' menu has 3 items 'Import', 'Export' and 'Replace Nodes'");
            VerifyEqual("24. Verify 'More...' menu has 3 items 'Import', 'Export' and 'Replace Nodes'", expecteMoreMenuItems, actualMoreMenuItems, false);

            Step("--> Verify Geozone name property has a label whose text is 'Name' and an input whose value is Root geozone's name and is editable");
            VerifyEqual("24. Verify Geozone name property has a label whose text is 'Name'", "Name", equipmentInventoryPage.GeozoneEditorPanel.GetNameText());
            VerifyEqual(string.Format("24. Verify an input whose value is '{0}'", geozone), geozone, equipmentInventoryPage.GeozoneEditorPanel.GetNameValue());
            VerifyEqual("24. Verify Name input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.IsNameInputReadOnly());

            Step("--> Verify Parent property has value of its parent geozone's name and the value field can be an input (in case 'Enable geozone parent' option is disabled in Back Office ) or a dropdown list (in case 'Enable geozone parent' option is enabled in Back Office)");
            VerifyEqual("24. Verify Parent name property has a label whose text is 'Parent'", "Parent", equipmentInventoryPage.GeozoneEditorPanel.GetParentGeozoneText());
            if (equipmentInventoryPage.GeozoneEditorPanel.IsParentGeozoneInputReadOnly())
            {
                VerifyEqual(string.Format("24. Verify an input whose value is '{0}'", parentGeozone), parentGeozone, equipmentInventoryPage.GeozoneEditorPanel.GetParentGeozoneTextBoxValue());
                VerifyEqual("24. Verify Parent input is readonly", true, equipmentInventoryPage.GeozoneEditorPanel.IsParentGeozoneInputReadOnly());
            }
            else
            {
                VerifyEqual(string.Format("24. Verify an dropdown whose value is '{0}'", parentGeozone), parentGeozone, equipmentInventoryPage.GeozoneEditorPanel.GetParentGeozoneValue());
                VerifyEqual("24. Verify Parent dropdown is editable", false, equipmentInventoryPage.GeozoneEditorPanel.IsParentGeozoneDropDownReadOnly());
            }

            Step("--> Verify Update geozone bounds button has 'Update GeoZone's bounds' text");
            VerifyEqual("24. Verify Update geozone bounds button has 'Update GeoZone's bounds' text", "Update GeoZone's bounds", equipmentInventoryPage.GeozoneEditorPanel.GetUdpateBoundsButtonText());

            Step("--> Verify Latitude Minimum property has a label whose text is 'Latitude Minimum' and an input whose value is not empty");
            VerifyEqual("24. Verify Latitude Minimum property has a label whose text is 'Latitude Minimum'", "Latitude Minimum", equipmentInventoryPage.GeozoneEditorPanel.GetLatitudeMinimumText());
            VerifyEqual("24. Verify an input whose value is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.GeozoneEditorPanel.GetLatitudeMinimumValue()));

            Step("--> Verify Longitude Minimum property has a label whose text is 'Longitude Minimum' and an input whose value is not empty");
            VerifyEqual("24. Verify Longitude Minimum property has a label whose text is 'Longitude Minimum'", "Longitude Minimum", equipmentInventoryPage.GeozoneEditorPanel.GetLongitudeMinimumText());
            VerifyEqual("24. Verify an input whose value is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.GeozoneEditorPanel.GetLongitudeMinimumValue()));

            Step("--> Verify Latitude Maximum property has a label whose text is 'Latitude Maximum' and an input whose value is not empty");
            VerifyEqual("24. Verify Latitude Maximum property has a label whose text is 'Latitude Maximum'", "Latitude Maximum", equipmentInventoryPage.GeozoneEditorPanel.GetLatitudeMaximumText());
            VerifyEqual("24. Verify an input whose value is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.GeozoneEditorPanel.GetLatitudeMaximumValue()));

            Step("--> Verify Longitude Maximum property has a label whose text is 'Longitude Maximum' and an input whose value is not empty");
            VerifyEqual("24. Verify Longitude Maximum property has a label whose text is 'Longitude Maximum'", "Longitude Maximum", equipmentInventoryPage.GeozoneEditorPanel.GetLongitudeMaximumText());
            VerifyEqual("24. Verify an input whose value is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.GeozoneEditorPanel.GetLongitudeMaximumValue()));

            Step("--> Verify There is only one tab in tab container. Its text is 'Properties' and it's visible");
            tabsList = equipmentInventoryPage.GeozoneEditorPanel.GetListOfTabsName();
            VerifyEqual("24. Verify Only 'Properties' tab is visible", true, tabsList.Count == 1 && tabsList.Contains("Properties"));

            Step("--> Verify There is only one expandable section under 'Properties' table. Its text is 'Virtual Energy Consumption' and it's visible");
            groupsList = equipmentInventoryPage.GeozoneEditorPanel.GetListOfGroupsName();
            VerifyEqual("24. Verify Only 'Virtual Energy Consumption' section is visible", true, groupsList.Count == 1 && groupsList.Contains("Virtual Energy Consumption"));
            VerifyEqual("24. Verify 'Virtual Energy Consumption' section is expanded", true, equipmentInventoryPage.GeozoneEditorPanel.IsGroupExpanded("Virtual Energy Consumption"));

            Step("--> Verify Under 'Virtual Energy Consumption' section, there are 12 properties as 12 months displayed as followings:");
            Step("  o Label: 'January kWh', Input type: Numeric up down input");
            Step("  o Label: 'February kWh', Input type: Numeric up down input");
            Step("  o Label: 'March kWh', Input type: Numeric up down input");
            Step("  o Label: 'April kWh', Input type: Numeric up down input");
            Step("  o Label: 'May kWh', Input type: Numeric up down input");
            Step("  o Label: 'June kWh', Input type: Numeric up down input");
            Step("  o Label: 'July kWh', Input type: Numeric up down input");
            Step("  o Label: 'August kWh', Input type: Numeric up down input");
            Step("  o Label: 'September kWh', Input type: Numeric up down input");
            Step("  o Label: 'October kWh', Input type: Numeric up down input");
            Step("  o Label: 'November kWh', Input type: Numeric up down input");
            Step("  o Label: 'December kWh', Input type: Numeric up down input");
            VerifyVirtualEnergyConsumptionInputs(equipmentInventoryPage);

            Step("--> Verify Custom report button has 'Custom report' text");
            VerifyEqual("24. Verify Custom report button has 'Custom report' text", "Custom report", equipmentInventoryPage.GeozoneEditorPanel.GetCustomReportCaptionText());

            Step("--> Click Back button");
            equipmentInventoryPage.GeozoneEditorPanel.ClickBackButton();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("--> Verify Geozone Editor panel disappears");
            VerifyEqual("24. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_09 Controller - Create")]
        public void EI_09()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI09");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var hostName = "localhost";
            var expecteAddMenuItems = new List<string> { "Add GeoZone", "Add Device" };
            var expecteMoreMenuItems = new List<string> { "Import", "Export", "Replace Nodes" };
            var expectedTabList = new List<string> { "Identity", "Inventory", "Time" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI09*");
            CreateNewGeozone(geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Dropdown Add menu then click Add Device menu item");
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddDeviceMenuItem();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisplayed();

            Step("6. Verify New Device panel appears");
            VerifyEqual("6. Verify New Device panel appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("7. Verify New Device panel lists following device types: 'BUILDING', 'CAMERA IP', 'CITY OBJECT', 'CONTROLLER DEVICE', 'ELECTRICAL COUNTER', 'ENVIRONMENTAL SENSOR', 'INPUTS', 'NATURE', 'NETWORK COMPONENT', 'OCCUPANCY SENSOR', 'OUTPUTS', 'PARKING PLACE', 'STREETLIGHT', 'SWITCH DEVICE', 'TANK', 'TRANSPORT SIGNAGE', 'VEHICLE', 'VEHICLE CHARGING STATION', 'WASTE CONTAINER', 'WEATHER STATION','CABINET CONTROLLER'");
            var expectedDeviceTypeList = DeviceType.GetList();
            var actualDeviceTypeList = equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetListOfDeviceTypes();
            VerifyEqual("7. Verify New Device panel lists following device types as expected", expectedDeviceTypeList, actualDeviceTypeList, false);

            Step("8. Select 'CONTROLLER DEVICE'");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectDevice(DeviceType.Controller);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.WaitForNewDevicePropertiesSectionDisplayed();

            Step("9. Verify New Device panel switches to controller property content");
            VerifyEqual("9. Verify New Device panel switches to controller property content", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsNewDevicePropertiesSectionDisplayed());

            Step("10. Verify Controller property content:");
            Step("  o The first line is controller icon and text 'CONTROLLER DEVICE'");
            VerifyEqual("10. Verify The first line is controller icon", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.CheckIfDeviceIcon(DeviceType.Controller));
            VerifyEqual("10. Verify text is 'CONTROLLER DEVICE'", "CONTROLLER DEVICE", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNewDeviceText());
            Step("  o Controller name property has a label whose text is 'Name' and an input whose value starts with 'New Controller' and is editable");
            VerifyEqual("10. Verify Controller name property has a label whose text is 'Name'", "Name", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNameText());
            VerifyEqual("10. Verify An input whose value starts with 'New Controller'", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNameValue().Contains("New Controller"));
            VerifyEqual("10. Verify An input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsNameInputReadOnly());
            Step("  o Controller id property has a label whose text is 'Controller ID *' and an input whose value is empty and is editable");
            VerifyEqual("10. Verify Controller id property has a label whose text is 'Controller ID *'", "Controller ID *", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetControllerIdText());
            VerifyEqual("10. Verify An input whose value is empty", string.Empty, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNewDeviceControllerIdValue());
            VerifyEqual("10. Verify An input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsControllerIdInputReadOnly());
            Step("  o Gateway host name property has a label whose text is 'Gateway Host Name *' and an input whose value is empty and is editable");
            VerifyEqual("10. Verify Gateway host name property has a label whose text is 'Gateway Host Name *'", "Gateway Host Name *", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNewDeviceGatewayHostNameText());
            VerifyEqual("10. Verify An input whose value is empty", string.Empty, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNewControllerGatewayHostNameValue());
            VerifyEqual("10. Verify An input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsGatewayHostNameInputReadOnly());
            Step("  o 'Position the device' button");
            VerifyEqual("10. Verify 'Position the device' button is visible", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsPositionDeviceButtonDisplayed());

            Step("11. Enter an unexisting value into Name field");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(controller);

            Step("12. Enter an unexisting value into Controller ID field");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterControllerIdInput(controller);

            Step("13. Enter value into Gateway host name field");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNewControllerGatewayHostNameInput(hostName);

            Step("14. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();

            Step("15. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel.'");
            VerifyEqual("15. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel.'", "Position the new device on the map. Click here to cancel.", equipmentInventoryPage.Map.GetRecorderText());

            Step("16. Verify New Device panel disappears");
            VerifyEqual("16. Verify New Device panel disappears", false, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("17. Verify Geozone Editor panel disappears");
            VerifyEqual("17. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("18. Specify boundary of the new device by steps: zoom in the map using mouse scroll button; zoom in once more time using zooming bar of the map; drag the map");
            equipmentInventoryPage.Map.DragMapToRandomLocation();
            equipmentInventoryPage.Map.ZoomInToGLLevel(ZoomGLLevel.m50);

            Step("19. Place the controller on the map");
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            equipmentInventoryPage.ControllerEditorPanel.WaitForTitleHasText();

            Step("20. Verify Map recorder panel disappears");
            VerifyEqual("Verify Map recorder panel disappears", false, equipmentInventoryPage.Map.IsRecorderDisplayed());

            Step("21. Verify The controller is get selected on map and geozone tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("21. Verify The controller '{0}' is selected geozone tree", controller), controller, selectedNodeName);
            VerifyTrue("21. Verify The controller is selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL(), "Selected", "No device selected");

            Step("22. Verify Controller Editor panel appears");
            VerifyEqual("22. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("23. Verify Value of Name field is the value entered in New Device panel step");
            VerifyEqual(string.Format("23. Verify Value of Name field is '{0}'", controller), controller, equipmentInventoryPage.ControllerEditorPanel.GetNameValue());

            Step("24. Verify Value of GeoZone is geozone A's name");
            VerifyEqual(string.Format("24. Verify Value of GeoZone is '{0}'", geozone), geozone, equipmentInventoryPage.ControllerEditorPanel.GetGeozoneValue());

            Step("25. Verify Value of Latitude field is filled");
            VerifyEqual("25. Verify Value of Latitude is filled", true, !string.IsNullOrEmpty(equipmentInventoryPage.ControllerEditorPanel.GetLatitudeValue()));

            Step("26. Verify Value of Longitude field is filled");
            VerifyEqual("26. Verify Value of Longitude is filled", true, !string.IsNullOrEmpty(equipmentInventoryPage.ControllerEditorPanel.GetLongitudeValue()));

            Step("27. Verify There are 3 tabs in Controller Editor panel: 'Identity', 'Inventory', 'Time'");
            var actualTabList = equipmentInventoryPage.ControllerEditorPanel.GetListOfTabsName();
            VerifyEqual("27. Verify There are 3 tabs in Controller Editor panel as expected", expectedTabList, actualTabList);

            Step("28. Verify In 'Identity' tab, values of Controller ID and Gateway host name fields are the values entered in New Device panel step");
            VerifyEqual(string.Format("28. Verify Controller ID field is '{0}'", controller), controller, equipmentInventoryPage.ControllerEditorPanel.GetControllerIdValue());
            VerifyEqual(string.Format("28. Verify Gateway host name field is '{0}'", hostName), hostName, equipmentInventoryPage.ControllerEditorPanel.GetGatewayHostNameValue());

            var notedName = equipmentInventoryPage.ControllerEditorPanel.GetNameValue();
            var notedGeozoneName = equipmentInventoryPage.ControllerEditorPanel.GetGeozoneValue();
            var notedLatitude = equipmentInventoryPage.ControllerEditorPanel.GetLatitudeValue();
            var notedLongtitude = equipmentInventoryPage.ControllerEditorPanel.GetLongitudeValue();
            var notedControllerId = equipmentInventoryPage.ControllerEditorPanel.GetControllerIdValue();
            var notedHostName = equipmentInventoryPage.ControllerEditorPanel.GetGatewayHostNameValue();

            Step("29. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("30. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("31. Browse to geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("32. Verify The newly-created controller is present in geozone A");
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Controller);
            VerifyEqual(string.Format("32. Verify The newly-created controller '{0}' is present in geozone '{1}'", controller, geozone), true, subNodesList.Exists(p => p.Equals(controller)));

            Step("33. Select the created controller");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controller);

            Step("34. Verify Controller Editor panel appears");
            VerifyEqual("34. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("35. Verify Controller Editor panel displays the same values of Name, GeoZone, Latitude, Longitude, Controller ID, Gateway host name as before refreshing browser");
            VerifyDeviceBasicInfo(equipmentInventoryPage, notedName, notedGeozoneName);
            VerifyDeviceLatitudeLongitude(equipmentInventoryPage, notedLatitude, notedLongtitude);
            VerifyControllerIdentity(equipmentInventoryPage, notedControllerId, notedHostName);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_09_01 Controller - Create - Validation")]
        public void EI_09_01()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI0901");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var existingController = SLVHelper.GenerateUniqueName("CTRLEx");            
            var hostName = "localhost";
            var expecteAddMenuItems = new List<string> { "Add GeoZone", "Add Device" };
            var expecteMoreMenuItems = new List<string> { "Import", "Export", "Replace Nodes" };
            var expectedTabList = new List<string> { "Identity", "Inventory", "Time" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI0901*");
            CreateNewGeozone(geozone);
            CreateNewController(existingController, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Dropdown Add menu then click Add Device menu item");
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddDeviceMenuItem();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisplayed();

            Step("6. Verify New Device panel appears");
            VerifyEqual("6. Verify New Device panel appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("7. Select 'CONTROLLER DEVICE'");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectDevice(DeviceType.Controller);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.WaitForNewDevicePropertiesSectionDisplayed();

            Step("8. Verify New Device panel switches to controller property content");
            VerifyEqual("8. Verify New Device panel switches to controller property content", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsNewDevicePropertiesSectionDisplayed());

            Step("9. Clear Name field; Enter any value into Controller ID field; Enter any value into Gateway Host Name field");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(string.Empty);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterControllerIdInput(controller);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNewControllerGatewayHostNameInput(hostName);

            Step("10. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("11. Verify A dialog with title 'Warning' and message 'Please enter a device name.' appears");
            VerifyEqual("11. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("11. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("11. Verify dialog message is 'Please enter a device name.'", "Please enter a device name.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("12. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("13. Verify The dialog disappears");
            VerifyEqual("13. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("14. Verify New Device panel still displays");
            VerifyEqual("14. Verify New Device panel still displays", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("15. Leave Name field empty; Clear Controller ID field; Enter any value into Gateway Host Name field");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(string.Empty);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterControllerIdInput(string.Empty);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNewControllerGatewayHostNameInput(hostName);

            Step("16. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("17. Verify The same with step #11");
            VerifyEqual("17. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("17. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("17. Verify dialog message is 'Please enter a device name.'", "Please enter a device name.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("18. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("19. Verify The dialog disappears");
            VerifyEqual("19. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("20. Verify New Device panel still displays");
            VerifyEqual("20. Verify New Device panel still displays", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("21. Leave Name field empty; Enter any value into Controller ID field; Clear Gateway Host Name field");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(string.Empty);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterControllerIdInput(controller);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNewControllerGatewayHostNameInput(string.Empty);

            Step("22. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("23. Verify The same with step #11");
            VerifyEqual("23. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("23. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("23. Verify dialog message is 'Please enter a device name.'", "Please enter a device name.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("24. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("25. Verify The dialog disappears");
            VerifyEqual("25. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("26. Verify New Device panel still displays");
            VerifyEqual("26. Verify New Device panel still displays", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("27. Enter any value into Name field; Clear Controller ID field; Leave Gateway Host Name field empty");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(controller);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterControllerIdInput(string.Empty);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNewControllerGatewayHostNameInput(string.Empty);

            Step("28. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("29. Verify A dialog with title 'Warning' and message 'Please enter 'Controller ID' property.' appears");
            VerifyEqual("29. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("29. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("29. Verify dialog message is 'Please enter 'Controller ID' property.'", "Please enter 'Controller ID' property.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("30. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("31. Verify The dialog disappears");
            VerifyEqual("31. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("32. Verify New Device panel still displays");
            VerifyEqual("32. Verify New Device panel still displays", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("33. Enter any value into Name field; Enter any value into Controller ID field; Leave Gateway Host Name field empty");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(controller);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterControllerIdInput(controller);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNewControllerGatewayHostNameInput(string.Empty);

            Step("34. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("35. Verify A dialog with title 'Warning' and message 'Please enter 'Gateway Host Name' property.' appears");
            VerifyEqual("35. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("35. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("35. Verify dialog message is 'Please enter 'Gateway Host Name' property.'", "Please enter 'Gateway Host Name' property.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("36. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("37. Verify The dialog disappears");
            VerifyEqual("37. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("38. Verify New Device panel still displays");
            VerifyEqual("38. Verify New Device panel still displays", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("39. Enter into Name field the name of an existing device in the same geozone; Enter any value (may be empty) into Controller ID field; Enter any value (may be empty) into Gateway Host Name field");         
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(existingController);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterControllerIdInput(controller);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNewControllerGatewayHostNameInput(hostName);

            Step("40. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("41. Verify A dialog with title 'Warning' and message 'This device name already exists!' appears");
            VerifyEqual("41. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("41. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("41. Verify dialog message is 'This device name already exists!'", "This device name already exists!", equipmentInventoryPage.Dialog.GetMessageText());

            Step("42. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("43. Verify The dialog disappears");
            VerifyEqual("43. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("44. Verify New Device panel still displays");
            VerifyEqual("44. Verify New Device panel still displays", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("45. Enter an unexisting name; Enter an existing controller id; Enter a value of Gateway Host Name");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(controller);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterControllerIdInput(existingController);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNewControllerGatewayHostNameInput(hostName);

            Step("46. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();

            Step("47. Verify New Device panel disappears");
            VerifyEqual("47. Verify New Device panel disappears", false, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("48. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel'");
            VerifyEqual("48. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel.'", "Position the new device on the map. Click here to cancel.", equipmentInventoryPage.Map.GetRecorderText());

            Step("49. Click on the map");
            equipmentInventoryPage.Map.DragMapToRandomLocation();
            equipmentInventoryPage.Map.ZoomInToGLLevel(ZoomGLLevel.m50);
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("50. Verify A dialog with title 'Warning' and message Id 'controllerdevice@{controller id of step #21} already used for item 'Device'! appears");            
            var expectedMessage = string.Format("Id 'controllerdevice@{0} already used for item 'Device'!", existingController);
            VerifyEqual("50. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("50. Verify dialog title is 'Error'", "Error", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual(string.Format("50. Verify dialog message is '{0}", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("51. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("52. Verify The dialog disappears");
            VerifyEqual("52. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("53. Verify Geozone Editor panel appears back");
            VerifyEqual("53. Verify Geozone Editor panel appears back", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("54. Verify There is no device with name previously entered in New Device panel present in geozone A");
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Controller);
            VerifyEqual(string.Format("54. Verify There is no device with name '{0}' in New Device panel present in '{1}'", controller, geozone), false, subNodesList.Exists(p => p.Equals(controller)));

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_09_02 - iLON Controller ID is not read-only")]
        public void EI_09_02()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI0902");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var hostName = "localhost";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI0902*");
            CreateNewGeozone(geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Dropdown Add menu then click Add Device menu item");
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddDeviceMenuItem();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisplayed();

            Step("6. Verify New Device panel appears");
            VerifyEqual("Verify New Device panel appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("7. Select 'CONTROLLER DEVICE'");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectDevice(DeviceType.Controller);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.WaitForNewDevicePropertiesSectionDisplayed();

            Step("8. Verify New Device panel switches to controller property content");
            VerifyEqual("Verify New Device panel switches to controller property content", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsNewDevicePropertiesSectionDisplayed());

            Step("9. Enter an unexisting name; Enter an unexisting controller id; Enter a value of Gateway Host Name (localhost)");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(controller);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterControllerIdInput(controller);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNewControllerGatewayHostNameInput(hostName);

            Step("10. Click 'Position the device' button and put the device on the map");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            equipmentInventoryPage.ControllerEditorPanel.WaitForTitleHasText();

            Step("11. Verify Controller Device Panel appears. The Controller ID is READ ONLY");
            VerifyEqual("11. Verify Controller Device Panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());
            VerifyEqual("11. Verify The Controller ID is READ ONLY", true, equipmentInventoryPage.ControllerEditorPanel.IsControllerIdInputReadOnly());

            Step("12. Select a Control technology: 'iLON Segment Controller Version 4' and press Save button");
            equipmentInventoryPage.ControllerEditorPanel.SelectControlTechnologyDropDown("iLON Segment Controller Version 4");
            equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

            Step("13. Select the testing controller again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controller);

            Step("14. Verify Controller ID is still READ ONLY");
            VerifyEqual("14. Verify The Controller ID is still READ ONLY", true, equipmentInventoryPage.ControllerEditorPanel.IsControllerIdInputReadOnly());

            Step("15. Select a Control Teachnology: 'iLON Segment Controller E2 or E3', press Save button and select the testing controller again");
            equipmentInventoryPage.ControllerEditorPanel.SelectControlTechnologyDropDown("iLON Segment Controller E2 or E3");
            equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controller);

            Step("16. Verify Controller ID is still READ ONLY");
            VerifyEqual("16. Verify The Controller ID is still READ ONLY", true, equipmentInventoryPage.ControllerEditorPanel.IsControllerIdInputReadOnly());

            Step("17. Select another Control Teachnology different from 2 Teachnologies above, press Save button and select the testing controller again");
            equipmentInventoryPage.ControllerEditorPanel.SelectControlTechnologyDropDown("Telematics Wireless");
            equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controller);

            Step("18. Verify Controller ID is still READ ONLY");
            VerifyEqual("18. Verify The Controller ID is still READ ONLY", true, equipmentInventoryPage.ControllerEditorPanel.IsControllerIdInputReadOnly());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_10 Controller - Update")]
        public void EI_10()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI10");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var controllerPath = string.Format(@"{0}\{1}", geozone, controller);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI10*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select a controller");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controllerPath);

            Step("4. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            if (!equipmentInventoryPage.ControllerEditorPanel.GetControlTechnologyValue().Equals("Open South Bound XML Web API"))
            {
                equipmentInventoryPage.ControllerEditorPanel.SelectControlTechnologyDropDown("Open South Bound XML Web API");
                equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controller);
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            }

            Step("5. Note tabs, expandable sections and all values in the editor of the controller, both editable and readonly ones");
            var tabsList = equipmentInventoryPage.ControllerEditorPanel.GetListOfTabsName();
            var groupsList = equipmentInventoryPage.ControllerEditorPanel.GetListOfGroupsName();
            equipmentInventoryPage.ControllerEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.ControllerEditorPanel.ExpandGroupsActiveTab();
            //Identity of the controller
            var readonlyControllerId = equipmentInventoryPage.ControllerEditorPanel.GetControllerIdValue();
            var controlTechnology = equipmentInventoryPage.ControllerEditorPanel.GetControlTechnologyValue();
            var hardwareRevision = equipmentInventoryPage.ControllerEditorPanel.GetHardwareRevisionValue();
            var softwareVersion = equipmentInventoryPage.ControllerEditorPanel.GetSoftwareVersionValue();
            var commMedia = equipmentInventoryPage.ControllerEditorPanel.GetCommMediaValue();
            var uniqueAddress = equipmentInventoryPage.ControllerEditorPanel.GetUniqueAddressValue();
            var realtimeCommand = equipmentInventoryPage.ControllerEditorPanel.GetRealtimeCommandValue();
            var gzipPayload = equipmentInventoryPage.ControllerEditorPanel.GetGzipPayloadValue();
            var controllerCacheMode = equipmentInventoryPage.ControllerEditorPanel.GetControllerCacheModeValue();
            //Communication
            var gatewayHostName = equipmentInventoryPage.ControllerEditorPanel.GetGatewayHostNameValue();
            var networkId = equipmentInventoryPage.ControllerEditorPanel.GetNetworkIdValue();
            var serverWebAppUrl = equipmentInventoryPage.ControllerEditorPanel.GetServerWebAppUrlValue();
            var username = equipmentInventoryPage.ControllerEditorPanel.GetUsernameValue();
            var password = equipmentInventoryPage.ControllerEditorPanel.GetPasswordValue();
            var commissionMode = equipmentInventoryPage.ControllerEditorPanel.GetCommissionModeValue();
            var configPath = equipmentInventoryPage.ControllerEditorPanel.GetConfigPathValue();
            var realtimePath = equipmentInventoryPage.ControllerEditorPanel.GetRealtimePathValue();
            var groupDimCommand = equipmentInventoryPage.ControllerEditorPanel.GetGroupDimCommandValue();
            var globalDimCommand = equipmentInventoryPage.ControllerEditorPanel.GetGlobalDimCommandValue();
            var maxDevices = equipmentInventoryPage.ControllerEditorPanel.GetMaxDevicesValue();
            var considerStreetLights = equipmentInventoryPage.ControllerEditorPanel.GetConsiderStreetLightsValue();
            var considerReplaceOlc = equipmentInventoryPage.ControllerEditorPanel.GetConsiderReplaceOlcValue();
            var reportTime = equipmentInventoryPage.ControllerEditorPanel.GetReportTimeValue();
            var reportFrequency = equipmentInventoryPage.ControllerEditorPanel.GetReportFrequencyValue();
            var timeout = equipmentInventoryPage.ControllerEditorPanel.GetTimeoutValue();
            var maxConnections = equipmentInventoryPage.ControllerEditorPanel.GetMaxConnectionsValue();
            var requestInterval = equipmentInventoryPage.ControllerEditorPanel.GetRequestIntervalValue();
            var inclLatencyInterval = equipmentInventoryPage.ControllerEditorPanel.GetInclLatencyIntervalValue();

            equipmentInventoryPage.ControllerEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.ControllerEditorPanel.ExpandGroupsActiveTab();
            //Location
            var address1 = equipmentInventoryPage.ControllerEditorPanel.GetAddress1Value();
            var address2 = equipmentInventoryPage.ControllerEditorPanel.GetAddress2Value();
            var city = equipmentInventoryPage.ControllerEditorPanel.GetCityValue();
            var zipCode = equipmentInventoryPage.ControllerEditorPanel.GetZipCodeValue();
            var mapNumber = equipmentInventoryPage.ControllerEditorPanel.GetMapNumberValue();
            //About this cabinet
            var controllerInstallDate = equipmentInventoryPage.ControllerEditorPanel.GetControllerInstallDateValue();
            var comment = equipmentInventoryPage.ControllerEditorPanel.GetCommentValue();

            equipmentInventoryPage.ControllerEditorPanel.SelectTab("Time");
            equipmentInventoryPage.ControllerEditorPanel.ExpandGroupsActiveTab();
            var timezone = equipmentInventoryPage.ControllerEditorPanel.GetTimezoneValue();

            Step("6. Change values of all editable fields except control techlonogy");
            EnterControllerEditableValues(equipmentInventoryPage);

            Step("7. Click Save");
            equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("8. Verify Controller Editor panel disappears");
            VerifyEqual("8. Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("9. Verify There is no any node in geozone being selected");
            VerifyEqual("9. Verify There is no any node in geozone being selected", false, equipmentInventoryPage.GeozoneTreeMainPanel.HasSelectedNode());

            Step("10. Select the controller again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controller);

            Step("11. Verify Controller Editor panel appears");
            VerifyEqual("11. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("12. Verify Tabs, sections and readonly values are remained unchanged against step #5");
            equipmentInventoryPage.ControllerEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.ControllerEditorPanel.ExpandGroupsActiveTab();
            var actualTabsList = equipmentInventoryPage.ControllerEditorPanel.GetListOfTabsName();
            var acutalGroupsList = equipmentInventoryPage.ControllerEditorPanel.GetListOfGroupsName();
            var actualReadonlyControllerId = equipmentInventoryPage.ControllerEditorPanel.GetControllerIdValue();
            VerifyEqual("12. Verify Tabs are unchanged", tabsList, actualTabsList);
            VerifyEqual("12. Verify Group sections are unchanged", groupsList, acutalGroupsList);
            VerifyEqual("12. Verify Readonly values: ControllerId is unchanged", readonlyControllerId, actualReadonlyControllerId);

            Step("13. Verify Editable values are the new values (values after step #6)");
            VerifyControllerEditableValuesAreChanged(equipmentInventoryPage, hardwareRevision, softwareVersion, commMedia, uniqueAddress
                    , realtimeCommand, gzipPayload, controllerCacheMode, gatewayHostName, networkId, serverWebAppUrl, username, password
                    , commissionMode, configPath, realtimePath, groupDimCommand, globalDimCommand, maxDevices, considerStreetLights, considerReplaceOlc
                    , reportTime, reportFrequency, timeout, maxConnections, requestInterval, inclLatencyInterval, address1, address2
                    , city, zipCode, mapNumber, controllerInstallDate, comment, timezone);

            equipmentInventoryPage.ControllerEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.ControllerEditorPanel.ExpandGroupsActiveTab();
            //Identity of the controller
            readonlyControllerId = equipmentInventoryPage.ControllerEditorPanel.GetControllerIdValue();
            controlTechnology = equipmentInventoryPage.ControllerEditorPanel.GetControlTechnologyValue();
            hardwareRevision = equipmentInventoryPage.ControllerEditorPanel.GetHardwareRevisionValue();
            softwareVersion = equipmentInventoryPage.ControllerEditorPanel.GetSoftwareVersionValue();
            commMedia = equipmentInventoryPage.ControllerEditorPanel.GetCommMediaValue();
            uniqueAddress = equipmentInventoryPage.ControllerEditorPanel.GetUniqueAddressValue();
            realtimeCommand = equipmentInventoryPage.ControllerEditorPanel.GetRealtimeCommandValue();
            gzipPayload = equipmentInventoryPage.ControllerEditorPanel.GetGzipPayloadValue();
            controllerCacheMode = equipmentInventoryPage.ControllerEditorPanel.GetControllerCacheModeValue();
            //Communication
            gatewayHostName = equipmentInventoryPage.ControllerEditorPanel.GetGatewayHostNameValue();
            networkId = equipmentInventoryPage.ControllerEditorPanel.GetNetworkIdValue();
            serverWebAppUrl = equipmentInventoryPage.ControllerEditorPanel.GetServerWebAppUrlValue();
            username = equipmentInventoryPage.ControllerEditorPanel.GetUsernameValue();
            password = equipmentInventoryPage.ControllerEditorPanel.GetPasswordValue();
            commissionMode = equipmentInventoryPage.ControllerEditorPanel.GetCommissionModeValue();
            configPath = equipmentInventoryPage.ControllerEditorPanel.GetConfigPathValue();
            realtimePath = equipmentInventoryPage.ControllerEditorPanel.GetRealtimePathValue();
            groupDimCommand = equipmentInventoryPage.ControllerEditorPanel.GetGroupDimCommandValue();
            globalDimCommand = equipmentInventoryPage.ControllerEditorPanel.GetGlobalDimCommandValue();
            maxDevices = equipmentInventoryPage.ControllerEditorPanel.GetMaxDevicesValue();
            considerStreetLights = equipmentInventoryPage.ControllerEditorPanel.GetConsiderStreetLightsValue();
            considerReplaceOlc = equipmentInventoryPage.ControllerEditorPanel.GetConsiderReplaceOlcValue();
            reportTime = equipmentInventoryPage.ControllerEditorPanel.GetReportTimeValue();
            reportFrequency = equipmentInventoryPage.ControllerEditorPanel.GetReportFrequencyValue();
            timeout = equipmentInventoryPage.ControllerEditorPanel.GetTimeoutValue();
            maxConnections = equipmentInventoryPage.ControllerEditorPanel.GetMaxConnectionsValue();
            requestInterval = equipmentInventoryPage.ControllerEditorPanel.GetRequestIntervalValue();
            inclLatencyInterval = equipmentInventoryPage.ControllerEditorPanel.GetInclLatencyIntervalValue();

            equipmentInventoryPage.ControllerEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.ControllerEditorPanel.ExpandGroupsActiveTab();
            //Location
            address1 = equipmentInventoryPage.ControllerEditorPanel.GetAddress1Value();
            address2 = equipmentInventoryPage.ControllerEditorPanel.GetAddress2Value();
            city = equipmentInventoryPage.ControllerEditorPanel.GetCityValue();
            zipCode = equipmentInventoryPage.ControllerEditorPanel.GetZipCodeValue();
            mapNumber = equipmentInventoryPage.ControllerEditorPanel.GetMapNumberValue();
            //About this cabinet
            controllerInstallDate = equipmentInventoryPage.ControllerEditorPanel.GetControllerInstallDateValue();
            comment = equipmentInventoryPage.ControllerEditorPanel.GetCommentValue();

            equipmentInventoryPage.ControllerEditorPanel.SelectTab("Time");
            equipmentInventoryPage.ControllerEditorPanel.ExpandGroupsActiveTab();
            timezone = equipmentInventoryPage.ControllerEditorPanel.GetTimezoneValue();

            Step("14. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("15. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("16. Browse to the controller again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controllerPath);

            Step("17. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("17. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("18. Verify Tabs, sections and readonly values are remained unchanged against step #5");
            equipmentInventoryPage.ControllerEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.ControllerEditorPanel.ExpandGroupsActiveTab();
            actualTabsList = equipmentInventoryPage.ControllerEditorPanel.GetListOfTabsName();
            acutalGroupsList = equipmentInventoryPage.ControllerEditorPanel.GetListOfGroupsName();
            actualReadonlyControllerId = equipmentInventoryPage.ControllerEditorPanel.GetControllerIdValue();
            VerifyEqual("18. Verify Tabs are unchanged", tabsList, actualTabsList);
            VerifyEqual("18. Verify Group sections are unchanged", groupsList, acutalGroupsList);
            VerifyEqual("18. Verify Readonly values: ControllerId is unchanged", readonlyControllerId, actualReadonlyControllerId);

            Step("19. Verify Editable values are remained to be the new values (values after step #6)");
            VerifyControllerEditableValues(equipmentInventoryPage, hardwareRevision, softwareVersion, commMedia, uniqueAddress
                    , realtimeCommand, gzipPayload, controllerCacheMode, gatewayHostName, networkId, serverWebAppUrl, username, password
                    , commissionMode, configPath, realtimePath, groupDimCommand, globalDimCommand, maxDevices, considerStreetLights, considerReplaceOlc
                    , reportTime, reportFrequency, timeout, maxConnections, requestInterval, inclLatencyInterval, address1, address2
                    , city, zipCode, mapNumber, controllerInstallDate, comment, timezone);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_10_01 Controller - Update - Validation")]
        public void EI_10_01()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI1001");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var newController = SLVHelper.GenerateUniqueName("CTRLNew");
            var controllerPath = string.Format(@"{0}\{1}", geozone, controller);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - 'Enable device location' option for Equipment Inventory app in Back Office must be checked");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI1001*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenBackOfficeApp();
            var backOfficePage = loginPage.LoginAsValidUserToBackOffice(Settings.Users["admin"].Username, Settings.Users["admin"].Password);
            backOfficePage.BackOfficeOptionsPanel.SelectConfiguration(App.EquipmentInventory);
            var firstDeviceLocationValue = backOfficePage.BackOfficeDetailsPanel.GetEquipmentDeviceLocationValue();
            backOfficePage.BackOfficeDetailsPanel.TickEquipmentDeviceLocationCheckbox(true);
            backOfficePage.BackOfficeDetailsPanel.ClickSaveButton();
            backOfficePage.WaitForPreviousActionComplete();

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var desktopPage = Browser.NavigateToLoggedInCMS();
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select a controller");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controllerPath);

            Step("4. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Clear Name field");
            equipmentInventoryPage.ControllerEditorPanel.EnterNameInput(string.Empty);

            Step("6. Click Save");
            equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("7. Verify A dialog with title 'Warning' and message 'Please enter a device name.' appears");
            VerifyEqual("7. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("7. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("7. Verify dialog message is 'Please enter a device name.'", "Please enter a device name.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("8. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("9. Verify The dialog disappears");
            VerifyEqual("9. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("10. Verify Controller Editor panel is still displayed");
            VerifyEqual("10. Verify Controller Editor panel still displayed", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("11. Verify Controller A is still selected in geozone tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("11. Verify The Controller '{0}' is selected geozone tree", controller), controller, selectedNodeName);

            Step("12. Verify Controller A is still selected on map");
            VerifyTrue("12. Verify Controller A is selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL(), "Selected", "No device selected");

            Step("13. Enter any value into Name field");         
            equipmentInventoryPage.ControllerEditorPanel.EnterNameInput(newController);

            Step("14. Click Save");
            equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("15. Verify Controller Editor disappears");
            VerifyEqual("15. Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("16. Verify There is not any dialog appearing");
            VerifyEqual("16. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("17. Select controller A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newController);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("18. Verify Controller Editor panel appears");
            VerifyEqual("18. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("19. Verify Value of Name field are the new value");
            VerifyEqual("19. Verify Value of Name field are the new value", newController, equipmentInventoryPage.ControllerEditorPanel.GetNameValue());

            Step("20. Note current latitude and longitude values");
            var latitude = equipmentInventoryPage.ControllerEditorPanel.GetLatitudeValue();
            var longitude = equipmentInventoryPage.ControllerEditorPanel.GetLongitudeValue();

            Step("21. Clear Latitude field");
            equipmentInventoryPage.ControllerEditorPanel.EnterLatitudeInput(string.Empty);

            Step("22. Click Save");
            equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("23. Verify Controller Editor panel disappears");
            VerifyEqual("23. Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("24. Verify Controller A is no longer selected in geozone tree");
            selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyTrue(string.Format("Verify The Controller '{0}' is no longer selected geozone tree", controller), controller != selectedNodeName, controller, selectedNodeName);

            Step("25. Verify Controller A is no longer selected on map");
            VerifyTrue("25. Verify Controller A is no longer selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL() == false, "No device selected", "Selected");

            Step("26. Select controller A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newController);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("27. Verify Controller Editor panel appears");
            VerifyEqual("27. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("28. Verify Value of latitude field is restored and equals the value noted at step #20");
            VerifyEqual(string.Format("28. Verify Value of latitude field is restored and equals '{0}'", latitude), latitude, equipmentInventoryPage.ControllerEditorPanel.GetLatitudeValue());

            Step("29. Verify Value of longitude field is remained the same with the value noted at step #20");
            VerifyEqual(string.Format("29. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.ControllerEditorPanel.GetLongitudeValue());

            Step("30. Clear Longitude field");
            equipmentInventoryPage.ControllerEditorPanel.EnterLongitudeInput(string.Empty);

            Step("31. Click Save");
            equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("32. Verify Controller Editor panel disappears");
            VerifyEqual("32. Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("33. Select controller A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newController);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("34. Verify Controller Editor panel appears");
            VerifyEqual("34. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("35. Verify Value of latitude field is remained the same with the value noted at step #20");
            VerifyEqual(string.Format("35. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.ControllerEditorPanel.GetLatitudeValue());

            Step("36. Verify Value of longitude field is restored and equals the value noted at step #20");
            VerifyEqual(string.Format("36. Verify Value of longitude field is restored and equals the value '{0}'", longitude), longitude, equipmentInventoryPage.ControllerEditorPanel.GetLongitudeValue());

            Step("37. Clear both Latitude and Longitude fields");
            equipmentInventoryPage.ControllerEditorPanel.EnterLatitudeInput(string.Empty);
            equipmentInventoryPage.ControllerEditorPanel.EnterLongitudeInput(string.Empty);

            Step("38. Click Save");
            equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("39. Verify Controller Editor panel disappears");
            VerifyEqual("39. Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("40. Select controller A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newController);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("41. Verify Controller Editor panel appears");
            VerifyEqual("41. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("42. Verify Values of latitude and longitude fields are remained the same with the values noted at step #20");
            VerifyEqual(string.Format("42. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.ControllerEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("42. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.ControllerEditorPanel.GetLongitudeValue());

            Step("43. Enter values of alphanumeric/non-alphanumeric into Latitude and Longitude fields");
            equipmentInventoryPage.ControllerEditorPanel.EnterLatitudeInput(SLVHelper.GenerateString());
            equipmentInventoryPage.ControllerEditorPanel.EnterLongitudeInput(SLVHelper.GenerateString());

            Step("44. Click Save");
            equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("45. Verify Controller Editor panel disappears");
            VerifyEqual("45. Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("46. Select controller A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newController);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("47. Verify Controller Editor panel appears");
            VerifyEqual("47. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("48. Verify Values of latitude and longitude fields are remained the same with the values noted at step #20");
            VerifyEqual(string.Format("48. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.ControllerEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("48. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.ControllerEditorPanel.GetLongitudeValue());

            Step("49. Increase 1 the last number of Latitude and Longitude fields");
            var newLatitude = IncreaseLatLong(latitude);
            var newLongitude = IncreaseLatLong(longitude);
            equipmentInventoryPage.ControllerEditorPanel.EnterLatitudeInput(newLatitude);
            equipmentInventoryPage.ControllerEditorPanel.EnterLongitudeInput(newLongitude);
            equipmentInventoryPage.ControllerEditorPanel.EnterLongitudeInput(newLongitude); //Re-enter 2nd time for auto-filled input issue.

            Step("50. Click Save");
            equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("51. Verify Controller Editor panel disappears");
            VerifyEqual("51. Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("52. Select controller A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newController);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("53. Verify Controller Editor panel appears");
            VerifyEqual("53. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("54. Verify Values of latitude and longitude fields are the new values");
            var actualLatitude = equipmentInventoryPage.ControllerEditorPanel.GetLatitudeValue();
            var actualLongitude = equipmentInventoryPage.ControllerEditorPanel.GetLongitudeValue();
            VerifyTrue(string.Format("54. Verify Value of latitude field is changed '{0}' to '{1}'", latitude, newLatitude), latitude != actualLatitude, actualLatitude, latitude);
            VerifyTrue(string.Format("54. Verify Value of longitude field is changed {0}' to '{1}'", longitude, newLongitude), longitude != actualLongitude, actualLongitude, longitude);

            Step("55. Refresh browser without saving");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("56. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("57. Browse to and select controller A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(string.Format(@"{0}\{1}", geozone, newController));

            Step("58. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("58. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("59. Verify Value of name, latitude, longitude are its last updated values");
            VerifyEqual(string.Format("59. Verify Value of latitude field is '{0}'", actualLatitude), actualLatitude, equipmentInventoryPage.ControllerEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("59. Verify Value of longitude field is {0}'", actualLongitude), actualLongitude, equipmentInventoryPage.ControllerEditorPanel.GetLongitudeValue());

            try
            {
                DeleteGeozone(geozone);

                backOfficePage = Browser.NavigateToLoggedInBackOfficeApp();
                backOfficePage.BackOfficeOptionsPanel.SelectConfiguration(App.EquipmentInventory);
                backOfficePage.BackOfficeDetailsPanel.TickEquipmentDeviceLocationCheckbox(false);
                backOfficePage.BackOfficeDetailsPanel.ClickSaveButton();
                backOfficePage.WaitForPreviousActionComplete();
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_10_02 Controller - Update - Per Control Technology")]
        public void EI_10_02()
        {
            var testData = GetTestDataOfEI_10_02();
            var xmlControlTechnologies = testData["ControlTechnologies"] as List<string>;
            var geozone = SLVHelper.GenerateUniqueName("GZNEI1002");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var controllerPath = string.Format(@"{0}\{1}", geozone, controller);
            
            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI1002*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select controller A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controllerPath);

            Step("4. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Get list of control techlonogy and for each techlonogy, do following steps");            
            foreach (var technology in xmlControlTechnologies)
            {
                Step("5. Select another techlonogy from control techlonogy dropdown");
                Info(string.Format("Select technology '{0}'", technology));
                equipmentInventoryPage.ControllerEditorPanel.SelectControlTechnologyDropDown(technology);

                Step("7. Click Save");
                equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("8. Verify Control Editor panel disappears");
                VerifyEqual("8. Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("9. Select controller A again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controller);
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

                Step("10. Verify Controller Editor panel appears back");
                VerifyEqual("10. Verify Controller Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("11. Note tabs, expandable sections and all values in the editor of the controller, both editable and readonly ones");
                var notedTabs = equipmentInventoryPage.ControllerEditorPanel.GetListOfTabsName();
                var notedGroups = equipmentInventoryPage.ControllerEditorPanel.GetListOfGroupsName();

                Step("12. Change values of all editable fields except control technology");
                equipmentInventoryPage.ControllerEditorPanel.EnterEditablePropertiesValue("Controller ID", "Control technology", "Time zone");
                var dicNotedReadOnlyProperties = equipmentInventoryPage.ControllerEditorPanel.GetReadOnlyPropertiesValue();
                var dicNotedEditableProperties = equipmentInventoryPage.ControllerEditorPanel.GetEditablePropertiesValue();

                Step("13. Click Save");
                equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("14. Verify Control Editor panel disappears");
                VerifyEqual("14. Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("15. Verify There is no any node in geozone being selected");
                VerifyEqual("15. Verify There is no any node in geozone being selected", false, equipmentInventoryPage.GeozoneTreeMainPanel.HasSelectedNode());

                Step("16. Select the controller again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controller);

                Step("17. Verify Controller Editor panel appears");
                VerifyEqual("17. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("18. Verify Tabs, sections and readonly values are remained unchanged against step #10");
                var tabs = equipmentInventoryPage.ControllerEditorPanel.GetListOfTabsName();
                var groups = equipmentInventoryPage.ControllerEditorPanel.GetListOfGroupsName();
                var dicReadOnlyProperties = equipmentInventoryPage.ControllerEditorPanel.GetReadOnlyPropertiesValue();
                var dicEditableProperties = equipmentInventoryPage.ControllerEditorPanel.GetEditablePropertiesValue();
                VerifyEqual("18. Verify Tabs is remained", notedTabs, tabs);
                VerifyEqual("18. Verify Sections is remained", notedGroups, groups);
                VerifyEqual("18. Verify Readonly values are remained", dicNotedReadOnlyProperties, dicReadOnlyProperties);

                Step("19. Verify Editable values are the new values (values after step #12)");
                VerifyEqual(string.Format("[{0}] 19. Verify Editable values are the new values", technology), dicNotedEditableProperties, dicEditableProperties);

                Step("20. Refresh browser");
                Step("21. Go to Equipment Inventory again");
                desktopPage = Browser.RefreshLoggedInCMS();
                equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

                Step("22. Browse to the controller again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controllerPath);
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

                Step("23. Verify Controller Editor panel appears");
                VerifyEqual("Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("24. Verify Tabs, sections and readonly values are remained unchanged against step #10");
                tabs = equipmentInventoryPage.ControllerEditorPanel.GetListOfTabsName();
                groups = equipmentInventoryPage.ControllerEditorPanel.GetListOfGroupsName();
                var dicReadOnlyPropertiesAfterRefreshed = equipmentInventoryPage.ControllerEditorPanel.GetReadOnlyPropertiesValue();
                VerifyEqual("24. Verify Tabs is remained", notedTabs, tabs);
                VerifyEqual("24. Verify Sections is remained", notedGroups, groups);
                VerifyEqual("24. Verify Readonly values are remained", dicNotedReadOnlyProperties, dicReadOnlyPropertiesAfterRefreshed);

                Step("25. Verify Editable values are remained to be the new values (values after step #12)");
                var dicEditablePropertiesAfterRefreshed = equipmentInventoryPage.ControllerEditorPanel.GetEditablePropertiesValue();
                VerifyEqual(string.Format("[{0}] 25. Verify Editable values are the new values", technology), dicNotedEditableProperties, dicEditablePropertiesAfterRefreshed);

                equipmentInventoryPage.ControllerEditorPanel.SelectTab("Identity");
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }           
        }

        [Test, DynamicRetry]
        [Description("EI_11 Controller - Delete")]
        public void EI_11()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI11");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var controllerPath = string.Format(@"{0}\{1}", geozone, controller);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI11*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            
            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select a controller A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controllerPath);

            Step("4. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Click Remove icon button");
            equipmentInventoryPage.ControllerEditorPanel.ClickDeleteButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("6. Verify A dialog with message 'Would you like to delete {{controller A's name}} equipment ?' appears");
            var expectedMessage = string.Format("Would you like to delete {0} equipment ?", controller);
            VerifyEqual("Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual(string.Format("6. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("7. Click No");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("8. Verify The dialog disappears");
            VerifyEqual("8. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("9. Verify Controller Editor panel remains displaying");
            VerifyEqual("9. Verify Controller Editor panel remains displaying", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("10. Verify Controller A is still remained selected in Geozone Tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("10. Verify Controller '{0}' is still remained selected in Geozone Tree", controller), controller, selectedNodeName);

            Step("11. Click Remove icon button again");
            equipmentInventoryPage.ControllerEditorPanel.ClickDeleteButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("12. Verify A dialog with message 'Would you like to delete {{controller A's name}} equipment ?' appears again");
            VerifyEqual("12. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual(string.Format("12. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("13. Click Yes");
            equipmentInventoryPage.Dialog.ClickYesButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForHeaderMessageDisappeared();

            Step("14. Verify The dialog disappears");
            VerifyEqual("Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("15. Verify Controller Editor panel disappears");
            VerifyEqual("15. Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("16. Verify Controller A is no longer present in its parent geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Controller);
            VerifyEqual(string.Format("16. Verify Controller '{0}' is no longer present in its parent geozone '{1}'", controller, geozone), false, subNodesList.Exists(p => p.Equals(controller)));

            Step("17. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("18. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("19. Browse to the controller A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("20. Verify Controller A is not present in its parent geozone");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Controller);
            VerifyEqual(string.Format("20. Verify Controller '{0}' is not present in its parent geozone '{1}'", controller, geozone), false, subNodesList.Exists(p => p.Equals(controller)));

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_13 Controller - Commission")]
        public void EI_13()
        {
            var testData = GetTestDataOfEI_13();
            var controller = testData["Controller"];         
            
            var expectedSettings = new List<string> { "Controller Configuration", "Schedulers", "OLCs" };
            var expectedSections = new List<string> { "Check database configuration", "Commissioning" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" -  Using the controller 'Smartsims' in Real Time Control area to comission successfully.");
            Step("**** Precondition ****\n");

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select controller A (whose control technology supports commission)");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controller);

            Step("4. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());
            
            Step("5. Click Commission button");
            equipmentInventoryPage.ControllerEditorPanel.ClickCommissionButton();
            equipmentInventoryPage.ControllerEditorPanel.WaitForCommissionPanelDisplayed();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("6. Verify Commission panel appears");
            VerifyEqual("6. Verify Commission panel appears", true, equipmentInventoryPage.ControllerEditorPanel.IsCommissionPanelDisplayed());

            Step("7. Verify Commission panel has 3 check boxes: Controller Configuration, Schedulers, OLCs");
            var actualSettings = equipmentInventoryPage.ControllerEditorPanel.CommissionPanel.GetListOfSettings();
            VerifyEqual("7. Verify Commission panel has 3 check boxes: Controller Configuration, Schedulers, OLCs", expectedSettings, actualSettings, false);

            Step("8. Un/check 3 check boxes");
            equipmentInventoryPage.ControllerEditorPanel.CommissionPanel.UncheckAllSettings();

            Step("9. Verify Check boxes are un/checkable");
            VerifyEqual("9. Verify There is no checked boxes", 0, equipmentInventoryPage.ControllerEditorPanel.CommissionPanel.GetListOfCheckedSettings().Count);
            VerifyEqual("9. Verify There are 3 unchecked boxes", 3, equipmentInventoryPage.ControllerEditorPanel.CommissionPanel.GetListOfUncheckedSettings().Count);

            Step("10. Click Launch button");
            equipmentInventoryPage.ControllerEditorPanel.CommissionPanel.ClickLaunchButton();
            equipmentInventoryPage.ControllerEditorPanel.CommissionPanel.WaitForLaunchButtonDisappeared();
            
            Step("11. Verify Commissioning results are displayed: there are 2 sections 'Check database configuration' and 'Commissioning'");
            var actualSections = equipmentInventoryPage.ControllerEditorPanel.CommissionPanel.GetListOfSections();
            VerifyEqual("11. Verify Commissioning results are displayed: there are 2 sections 'Check database configuration' and 'Commissioning'", expectedSections, actualSections, false);

            Step("12. Verify Under each section is a list of details which contains at least 1 line. Each line has an icon Passed and text");
            VerifyEqual("12. Verify Each line has an icon Passed and text", true, equipmentInventoryPage.ControllerEditorPanel.CommissionPanel.AreMessagesContainingIconPassedAndText());

            Step("13. Click Back");
            equipmentInventoryPage.ControllerEditorPanel.CommissionPanel.ClickBackButton();
            equipmentInventoryPage.ControllerEditorPanel.WaitForCommissionPanelDisappeared();

            Step("14. Verify Commission panel disappears");
            VerifyEqual("14. Verify Commission panel disappears", false, equipmentInventoryPage.ControllerEditorPanel.IsCommissionPanelDisplayed());

            Step("15. Verify Controller Editor panel appears back");
            VerifyEqual("15. Verify Controller Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());
        }

        [Test, DynamicRetry]
        [Description("EI_14 Controller - Editor - Control Technology - All")]
        public void EI_14()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI14");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var controllerPath = string.Format(@"{0}\{1}", geozone, controller);
            var expectedTabs = new List<string> { "Identity", "Inventory", "Time" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI14*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select controller A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controllerPath);

            Step("4. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            var longitude = equipmentInventoryPage.ControllerEditorPanel.GetLongitudeValue();
            var latitude = equipmentInventoryPage.ControllerEditorPanel.GetLatitudeValue();
            var technologies = equipmentInventoryPage.ControllerEditorPanel.GetListOfControlTechnologies();
            technologies.Remove("IoT Router");
            technologies.Remove("OSCP Security");
            technologies.Remove("XCAM TD");
            technologies.Remove("FLIR ITS");

            foreach (var technology in technologies)
            {
                Step("5. Change value of field Control technology (FLIR ITS, IoT Router, OSCP Security and XCAM TD are ignored)");
                Step(string.Format("--> Change to '{0}'", technology));
                equipmentInventoryPage.ControllerEditorPanel.SelectControlTechnologyDropDown(technology);

                Step("6. Click Save");
                equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("7. Verify Control Editor panel disappears");
                VerifyEqual("7. Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("8. Select controller A again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controller);

                Step("9. Verify Controller Editor panel appears back");
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
                VerifyEqual("9. Verify Controller Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("10. Verify The attributes Name, Geozone, Longitude, Latitude are displayed correctly");
                VerifyEqual(string.Format("10. Verify Name is '{0}'", controller), controller, equipmentInventoryPage.ControllerEditorPanel.GetNameValue());
                VerifyEqual(string.Format("10. Verify Geozone is '{0}'", geozone), geozone, equipmentInventoryPage.ControllerEditorPanel.GetGeozoneValue());
                VerifyEqual(string.Format("10. Verify Longitude is '{0}'", longitude), longitude, equipmentInventoryPage.ControllerEditorPanel.GetLongitudeValue());
                VerifyEqual(string.Format("10. Verify Latitude is '{0}'", latitude), latitude, equipmentInventoryPage.ControllerEditorPanel.GetLatitudeValue());

                Step("11. Verify The tabs Identity, Inventory and Time are displayed");
                if (technology.Equals("Silver Spring Networks"))
                {
                    Step("-> SLV-1998: ignore for Silver Spring Networks");
                }
                else if (technology.Equals("Philips Starsense Wireless"))
                {
                    Step("-> SLV-1999: ignore for Philips Starsense Wireless");
                }
                else
                {
                    var actualTabs = equipmentInventoryPage.ControllerEditorPanel.GetListOfTabsName();
                    VerifyContain("11. Verify The tabs Identity, Inventory and Time are displayed", actualTabs, expectedTabs);

                    Step("12. Verify In Identity tab, following attributes are displayed: 'Controller ID, 'Gateway Host Name', 'Control technology'");
                    var isIdentityTabExisting = equipmentInventoryPage.ControllerEditorPanel.IsTabExisting("Identity");
                    if (isIdentityTabExisting)
                    {
                        equipmentInventoryPage.ControllerEditorPanel.SelectTab("Identity");
                        VerifyEqual("12. Verify Controller ID label is 'Controller ID'", "Controller ID", equipmentInventoryPage.ControllerEditorPanel.GetControllerIdText());
                        VerifyEqual("12. Verify Controller ID input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsControllerIdInputDisplayed());
                        var actualHostName = equipmentInventoryPage.ControllerEditorPanel.GetGatewayHostNameText();
                        VerifyTrue("12. Verify Gateway Host Name label is 'Gateway Host Name'", actualHostName == "Gateway Host Name" || actualHostName == "Gateway Host Name *", "Gateway Host Name/Gateway Host Name *", actualHostName);
                        VerifyEqual("12. Verify Gateway Host Name input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsGatewayHostNameInputDisplayed());
                        VerifyEqual("12. Verify Control technology label is 'Control technology'", "Control technology", equipmentInventoryPage.ControllerEditorPanel.GetControlTechnologyText());
                        VerifyEqual("12. Verify Control technology dropdown is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsControlTechnologyDropDownDisplayed());
                    }
                    else
                    {
                        Warning("Identity tab does not exist");
                    }

                    Step("13. Verify In Time tab, following attributes are displayed: 'Time zone'");
                    var isTimeTabExisting = equipmentInventoryPage.ControllerEditorPanel.IsTabExisting("Time");
                    if (isTimeTabExisting)
                    {
                        equipmentInventoryPage.ControllerEditorPanel.SelectTab("Time");
                        VerifyEqual("13. Verify Time zone label is 'Time zone'", "Time zone", equipmentInventoryPage.ControllerEditorPanel.GetTimezoneText());
                        VerifyEqual("13. Verify Time zone input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsTimezoneInputDisplayed());
                    }
                    else
                    {
                        Warning(string.Format("13. Technology: {0} - Time tab does not exist", technology));
                    }
                }

                Step("14. **Repeat from step #5 to the end for all technologies");
                equipmentInventoryPage.ControllerEditorPanel.SelectTab("Identity");
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_14_01 Controller - Editor - Control Technology - iLON Segment Controller")]
        public void EI_14_01()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI1401");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var controllerPath = string.Format(@"{0}\{1}", geozone, controller);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI1401*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");           
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select controller A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controllerPath);

            Step("4. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            var technologies = equipmentInventoryPage.ControllerEditorPanel.GetListOfControlTechnologies();
            technologies = technologies.Where(p => p.Contains("iLON Segment Controller")).ToList();
            Step("5. Get all controller technologyies whose names contains 'iLON Segment Controller'");

            foreach (var technology in technologies)
            {
                Step("6. Change Controller technology to one of values at step #5");
                Step(string.Format("--> Change to '{0}'", technology));
                equipmentInventoryPage.ControllerEditorPanel.SelectControlTechnologyDropDown(technology);

                Step("7. Click Save");
                equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("8. Verify Control Editor panel disappears");
                VerifyEqual("Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("9. Select controller A again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controller);

                Step("10. Verify Controller Editor panel appears back");
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
                VerifyEqual("10. Verify Controller Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("11. Verify The tab 'Inputs and outputs' is displayed");
                var actualTabs = equipmentInventoryPage.ControllerEditorPanel.GetListOfTabsName();
                VerifyEqual("11. The tab 'Inputs and outputs' is displayed", true, actualTabs.Contains("Inputs and outputs"));

                Step("12. Verify In the Inventory tab, following attributes are displayed: 'Cabinet Wattage'");
                equipmentInventoryPage.ControllerEditorPanel.SelectTab("Inventory");
                VerifyEqual("12. Verify Cabinet wattage label is 'Cabinet wattage'", "Cabinet wattage", equipmentInventoryPage.ControllerEditorPanel.GetCabinetWattageText());
                VerifyEqual("12. Verify Cabinet wattage input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsCabinetWattageInputDisplayed());

                Step("13. Verify In the 'Inputs and outputs' tab, following sections are displayed: 'About the Segment Controller's digital inputs', 'About the Segment Controller's digital outputs', 'Modbus Digital Inputs - Failure labels', 'Modbus analog inputs - labels'");
                equipmentInventoryPage.ControllerEditorPanel.SelectTab("Inputs and outputs");
                var expectedGroups = new List<string> { "About the Segment Controller's digital inputs", "About the Segment Controller's digital outputs", "Modbus Digital Inputs - Failure labels", "Modbus analog inputs - Labels" };
                var actualGroups = equipmentInventoryPage.ControllerEditorPanel.GetListOfGroupsNameActiveTab();
                VerifyEqual("13. Verify Sections are as expected", expectedGroups, actualGroups);

                Step("14. Verify In the 'About the Segment Controller's digital ouputs' section, following attributes are displayed: 'Mains control mode', 'Light control mode', 'Output 1 - Label', 'Output 1 - Calendar name', 'Output 2 - Label', 'Output 2 - Calendar name'");
                equipmentInventoryPage.ControllerEditorPanel.ExpandGroup("About the Segment Controller's digital ouputs");
                VerifyEqual("14. Verify Mains control mode label is 'Mains control mode'", "Mains control mode", equipmentInventoryPage.ControllerEditorPanel.GetMainsControlModeText());
                VerifyEqual("14. Verify Mains control mode dropdown is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsMainsControlModeDropDownDisplayed());
                VerifyEqual("14. Verify Light control mode label is 'Light control mode'", "Light control mode", equipmentInventoryPage.ControllerEditorPanel.GetLightControlModeText());
                VerifyEqual("14. Verify Light control mode dropdown is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsLightControlModeDropDownDisplayed());
                VerifyEqual("14. Verify Output 1 - Label label is 'Output 1 - Label'", "Output 1 - Label", equipmentInventoryPage.ControllerEditorPanel.GetOutput1LabelText());
                VerifyEqual("14. Verify Output 1 - Label input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsOutput1LabelInputDisplayed());
                VerifyEqual("14. Verify Output 1 - Calendar name label is 'Output 1 - Calendar name'", "Output 1 - Calendar name", equipmentInventoryPage.ControllerEditorPanel.GetOutput1CalendarText());
                VerifyEqual("14. Verify Output 1 - Calendar name input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsOutput1CalendarNameInputDisplayed());
                VerifyEqual("14. Verify Output 2 - Label label is 'Output 2 - Label'", "Output 2 - Label", equipmentInventoryPage.ControllerEditorPanel.GetOutput2LabelText());
                VerifyEqual("14. Verify Output 2 - Label input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsOutput2LabelInputDisplayed());
                VerifyEqual("14. Verify Output 2 - Calendar name label is 'Output 2 - Calendar name'", "Output 2 - Calendar name", equipmentInventoryPage.ControllerEditorPanel.GetOutput2CalendarText());
                VerifyEqual("14. Verify Output 2 - Calendar name input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsOutput2CalendarNameInputDisplayed());

                Step("15. Repeat from step #6 to the end with other technologyies at step #5");
                equipmentInventoryPage.ControllerEditorPanel.SelectTab("Identity");
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_14_02 Controller - Editor - Control Technology - Open South Bound XML Web API")]
        public void EI_14_02()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI1402");
            var controller = SLVHelper.GenerateUniqueName("CRTL");
            var controllerPath = string.Format(@"{0}\{1}", geozone, controller);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI1402*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select controller A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controllerPath);

            Step("4. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            var technologies = equipmentInventoryPage.ControllerEditorPanel.GetListOfControlTechnologies();
            technologies = technologies.Where(p => p.Contains("Open South Bound XML Web API")).ToList();
            Step("5. Get all controller technologyies whose names contains 'Open South Bound XML Web API'");

            foreach (var technology in technologies)
            {
                Step("6. Change Controller technology to one of values at step #5");
                Step(string.Format("--> Change to '{0}'", technology));
                equipmentInventoryPage.ControllerEditorPanel.SelectControlTechnologyDropDown(technology);

                Step("7. Click Save");
                equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("8. Verify Control Editor panel disappears");
                VerifyEqual("8. Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("9. Select controller A again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controller);

                Step("10. Verify Controller Editor panel appears back");
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
                VerifyEqual("10. Verify Controller Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("11. Expected In Identity tab, following attributes are displayed: 'Realtime command', 'Gzip payload', 'Controller cache mode', 'Commission mode', 'Realtime path', 'Config path', 'Group dim command', 'Global dim command', 'Max devices', 'Timeout', 'Max connections'");
                equipmentInventoryPage.ControllerEditorPanel.SelectTab("Identity");
                equipmentInventoryPage.ControllerEditorPanel.ExpandGroupsActiveTab();
                VerifyEqual("11. Verify Realtime command label is 'Mains control mode'", "Realtime command", equipmentInventoryPage.ControllerEditorPanel.GetRealtimeCommandText());
                VerifyEqual("11. Verify Realtime command input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsRealtimePathInputDisplayed());
                VerifyEqual("11. Verify Gzip payload label is 'Gzip payload'", "Gzip payload", equipmentInventoryPage.ControllerEditorPanel.GetGzipPayloadText());
                VerifyEqual("11. Verify Gzip payload dropdown is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsGzipPayloadDropDownDisplayed());
                VerifyEqual("11. Verify Controller cache mode label is 'Controller cache mode'", "Controller cache mode", equipmentInventoryPage.ControllerEditorPanel.GetControllerCacheModeText());
                VerifyEqual("11. Verify Controller cache mode dropdown is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsControllerCacheModeDropDownDisplayed());
                VerifyEqual("11. Verify Commission mode label is 'Commission mode'", "Commission mode", equipmentInventoryPage.ControllerEditorPanel.GetCommissionModeText());
                VerifyEqual("11. Verify Commission mode dropdown is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsCommissionModeDropDownDisplayed());
                VerifyEqual("11. Verify Realtime path label is 'Realtime path'", "Realtime path", equipmentInventoryPage.ControllerEditorPanel.GetRealtimePathText());
                VerifyEqual("11. Verify Realtime path input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsRealtimePathInputDisplayed());
                VerifyEqual("11. Verify Config path label is 'Config path'", "Config path", equipmentInventoryPage.ControllerEditorPanel.GetConfigPathText());
                VerifyEqual("11. Verify Config path input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsConfigPathInputDisplayed());
                VerifyEqual("11. Verify Group dim command label is 'Group dim command'", "Group dim command", equipmentInventoryPage.ControllerEditorPanel.GetGroupDimCommandText());
                VerifyEqual("11. Verify Group dim command checkbox is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsGroupDimCommandCheckboxDisplayed());
                VerifyEqual("11. Verify Global dim command label is 'Global dim command'", "Global dim command", equipmentInventoryPage.ControllerEditorPanel.GetGlobalDimCommandText());
                VerifyEqual("11. Verify Global dim command checkbox is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsGlobalDimCommandCheckboxDisplayed());
                VerifyEqual("11. Verify Max devices label is 'Max devices'", "Max devices", equipmentInventoryPage.ControllerEditorPanel.GetMaxDevicesText());
                VerifyEqual("11. Verify Max devices input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsMaxDevicesInputDisplayed());
                VerifyEqual("11. Verify Timeout label is 'Timeout'", "Timeout", equipmentInventoryPage.ControllerEditorPanel.GetTimeoutText());
                VerifyEqual("11. Verify Timeout input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsTimeoutInputDisplayed());
                VerifyEqual("11. Verify Max connections label is 'Max connections'", "Max connections", equipmentInventoryPage.ControllerEditorPanel.GetMaxConnectionsText());
                VerifyEqual("11. Verify Max connections input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsMaxConnectionsInputDisplayed());

                Step("12. Repeat from step #6 to the end with other technologyies at step #5");
                equipmentInventoryPage.ControllerEditorPanel.SelectTab("Identity");
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_14_03 Controller - Editor - Control Technology - Telematics Wireless")]
        public void EI_14_03()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI1403");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var controllerPath = string.Format(@"{0}\{1}", geozone, controller);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI1403*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select controller A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controllerPath);

            Step("4. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            var technologies = equipmentInventoryPage.ControllerEditorPanel.GetListOfControlTechnologies();
            technologies = technologies.Where(p => p.Contains("Telematics Wireless")).ToList();
            Step("5. Get all controller technologyies whose names contains 'Telematics Wireless'");

            foreach (var technology in technologies)
            {
                Step("6. Change Controller technology to one of values at step #5");
                Step(string.Format("--> Change to '{0}'", technology));
                equipmentInventoryPage.ControllerEditorPanel.SelectControlTechnologyDropDown(technology);

                Step("7. Click Save");
                equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("8. Verify Control Editor panel disappears");
                VerifyEqual("8. Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("9. Select controller A again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controller);
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

                Step("10. Verify In Identity tab, following attributes are displayed: 'Realtime command', 'Commission mode', 'Realtime path', 'Config path', 'Auto-commissioning'");
                equipmentInventoryPage.ControllerEditorPanel.SelectTab("Identity");
                equipmentInventoryPage.ControllerEditorPanel.ExpandGroupsActiveTab();
                VerifyEqual("10. Verify Realtime command label is 'Realtime comman'", "Realtime command", equipmentInventoryPage.ControllerEditorPanel.GetRealtimeCommandText());
                VerifyEqual("10. Verify Realtime command input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsRealtimePathInputDisplayed());
                VerifyEqual("10. Verify Commission mode label is 'Commission mode'", "Commission mode", equipmentInventoryPage.ControllerEditorPanel.GetCommissionModeText());
                VerifyEqual("10. Verify Commission mode dropdown is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsCommissionModeDropDownDisplayed());
                VerifyEqual("10. Verify Realtime path label is 'Realtime path'", "Realtime path", equipmentInventoryPage.ControllerEditorPanel.GetRealtimePathText());
                VerifyEqual("10. Verify Realtime path input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsRealtimePathInputDisplayed());
                VerifyEqual("10. Verify Config path label is 'Config path'", "Config path", equipmentInventoryPage.ControllerEditorPanel.GetConfigPathText());
                VerifyEqual("10. Verify Config path input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsConfigPathInputDisplayed());

                Step("11. Verify In Identity tab, following sections are displayed: 'Auto-commissioning'");
                var actualGroups = equipmentInventoryPage.ControllerEditorPanel.GetListOfGroupsNameActiveTab();
                VerifyEqual("11. Verify 'Auto-commissioning' section is displayed", true, actualGroups.Contains("Auto-commissioning"));

                Step("12. Repeat from step #6 to the end with other technologyies at step #5");
                equipmentInventoryPage.ControllerEditorPanel.SelectTab("Identity");
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_14_04 Controller - Editor - Control Technology - Silver Spring Networks")]
        public void EI_14_04()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI1404");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var controllerPath = string.Format(@"{0}\{1}", geozone, controller);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI1404*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select controller A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controllerPath);

            Step("4. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            var technologies = equipmentInventoryPage.ControllerEditorPanel.GetListOfControlTechnologies();
            technologies = technologies.Where(p => p.Contains("Silver Spring Networks")).ToList();
            Step("5. Get all controller technologyies whose names contains 'Silver Spring Networks'");

            foreach (var technology in technologies)
            {
                Step("6. Change Controller technology to one of values at step #5");
                Step(string.Format("--> Change to '{0}'", technology));
                equipmentInventoryPage.ControllerEditorPanel.SelectControlTechnologyDropDown(technology);

                Step("7. Click Save");
                equipmentInventoryPage.ControllerEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("8. Verify Control Editor panel disappears");
                VerifyEqual("8. Verify Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("9. Select controller A again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controller);
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

                Step("10. Verify In Identity tab, following sections are displayed: 'Control System' section is displayed");
                equipmentInventoryPage.ControllerEditorPanel.SelectTab("Identity");
                equipmentInventoryPage.ControllerEditorPanel.ExpandGroupsActiveTab();
                var actualGroups = equipmentInventoryPage.ControllerEditorPanel.GetListOfGroupsNameActiveTab();
                VerifyEqual("10. Verify 'Control System' section is displayed", true, actualGroups.Contains("Control System"));

                Step("11. Verify Under 'Control System' section, following attributes are displayed: 'Is CPD', 'Library version', 'Last IMU log sequence', 'Last IMU request time', 'Timeout', 'Retries', 'Skip delete schedule'");
                VerifyEqual("11. Verify Is CPD label is 'Is CPD'", "Is CPD", equipmentInventoryPage.ControllerEditorPanel.GetIsCpdText());
                VerifyEqual("11. Verify Is CPD checkbox is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsIsCpdCheckboxDisplayed());
                VerifyEqual("11. Verify Library version label is 'Library version'", "Library version", equipmentInventoryPage.ControllerEditorPanel.GetLibraryVersionText());
                VerifyEqual("11. Verify Library version input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsLibraryVersionInputDisplayed());
                VerifyEqual("11. Verify Last IMU log sequence label is 'Last IMU log sequence'", "Last IMU log sequence", equipmentInventoryPage.ControllerEditorPanel.GetLastImuLogSequenceText());
                VerifyEqual("11. Verify Last IMU log sequence input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsLastImuLogSequenceInputDisplayed());
                VerifyEqual("11. Verify Last IMU request time label is 'Last IMU request time'", "Last IMU request time", equipmentInventoryPage.ControllerEditorPanel.GetLastImuRequestTimeText());
                VerifyEqual("11. Verify Last IMU request time input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsLastImuRequestTimeInputDisplayed());
                VerifyEqual("11. Verify Timeout label is 'Timeout'", "Timeout", equipmentInventoryPage.ControllerEditorPanel.GetTimeoutText());
                VerifyEqual("11. Verify Timeout input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsTimeoutInputDisplayed());
                VerifyEqual("11. Verify Retries label is 'Retries'", "Retries", equipmentInventoryPage.ControllerEditorPanel.GetRetriesText());
                VerifyEqual("11. Verify Retries input is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsRetriesInputDisplayed());
                VerifyEqual("11. Verify Skip delete schedule label is 'Skip delete schedule'", "Skip delete schedule", equipmentInventoryPage.ControllerEditorPanel.GetSkipDeleteScheduleText());
                VerifyEqual("11. Verify Skip delete schedule checkbox is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsSkipDeleteScheduleCheckboxDisplayed());

                Step("12. Repeat from step #6 to the end with other technologyies at step #5");
                equipmentInventoryPage.ControllerEditorPanel.SelectTab("Identity");
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_14_05 Controller - Editor - UI")]
        public void EI_14_05()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI1405");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var controllerPath = string.Format(@"{0}\{1}", geozone, controller);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI1405*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select controller A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(controllerPath);

            Step("4. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Verify Toolbar of the panel has following items displayed: 'Back' (or 'Cancel', 'Close') button, 'Commision' button, 'Save' button, 'Delete' button");
            VerifyEqual("5. Verify Back button is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsBackButtonDisplayed());
            VerifyEqual("5. Verify Commision button is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsCommissionButtonDisplayed());
            VerifyEqual("5. Verify Save button is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsSaveButtonDisplayed());
            VerifyEqual("5. Verify Delete button is displayed", true, equipmentInventoryPage.ControllerEditorPanel.IsDeleteButtonDisplayed());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }                

        [Test, DynamicRetry]
        [Description("EI_16 Streetlight - Create")]
        public void EI_16()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI16");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");           
            var typeOfEquipment = "SSN Cimcon Dim Photocell[Lamp #0]";
            var expecteAddMenuItems = new List<string> { "Add GeoZone", "Add Device" };
            var expecteMoreMenuItems = new List<string> { "Import", "Export", "Replace Nodes" };
            var expectedTabList = new List<string> { "Identity", "Inventory", "Electricity network" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI16*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Dropdown Add menu then click Add Device menu item");
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddDeviceMenuItem();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisplayed();

            Step("6. Verify New Device panel appears");
            VerifyEqual("6. Verify New Device panel appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("7. Verify New Device panel lists following device types: 'BUILDING', 'CAMERA IP', 'CITY OBJECT', 'CONTROLLER DEVICE', 'ELECTRICAL COUNTER', 'ENVIRONMENTAL SENSOR', 'INPUTS', 'NATURE', 'NETWORK COMPONENT', 'OCCUPANCY SENSOR', 'OUTPUTS', 'PARKING PLACE', 'STREETLIGHT', 'SWITCH DEVICE', 'TANK', 'TRANSPORT SIGNAGE', 'VEHICLE', 'VEHICLE CHARGING STATION', 'WASTE CONTAINER', 'WEATHER STATION', 'CABINET CONTROLLER'");
            var expectedDeviceTypeList = DeviceType.GetList();
            var actualDeviceTypeList = equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetListOfDeviceTypes();
            VerifyEqual("7. Verify New Device panel lists following device types as expected", expectedDeviceTypeList, actualDeviceTypeList, false);

            Step("8. Select 'STREETLIGHT'");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectDevice(DeviceType.Streetlight);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.WaitForNewDevicePropertiesSectionDisplayed();

            Step("9. Verify New Device panel switches to controller property content");
            VerifyEqual("9. Verify New Device panel switches to controller property content", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsNewDevicePropertiesSectionDisplayed());

            Step("10. Verify Streetlight property content:");
            Step("  o The first line is controller icon and text 'STREETLIGHT'");
            VerifyEqual("10. Verify The first line is controller icon", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.CheckIfDeviceIcon(DeviceType.Streetlight));
            VerifyEqual("10. Verify text is 'STREETLIGHT'", "STREETLIGHT", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNewDeviceText());
            Step("  o Streetlight name property has a label whose text is 'Name' and an input whose value starts with 'New Streetlight' and is editable");
            VerifyEqual("10. Verify Streetlight Name property has a label whose text is 'Name'", "Name", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNameText());
            VerifyEqual("10. Verify Name input whose value starts with 'New Streetlight'", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNameValue().Contains("New Streetlight"));
            VerifyEqual("10. Verify Name input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsNameInputReadOnly());
            Step("  o Controller id property has a label whose text is 'Controller ID *' and a dropdown list is selectable");
            VerifyEqual("10. Verify Controller id property has a label whose text is 'Controller ID *'", "Controller ID *", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetControllerIdText());            
            VerifyEqual("10. Verify Controller dropdown is selectable", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsControllerIdDropDownSelectable());
            Step("  o Identifier property has a label whose text is 'Identifier *' and an input whose value is empty and is editable");
            VerifyEqual("10. Verify Identifier property has a label whose text is 'Identifier *'", "Identifier *", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetIdentifierText());
            VerifyEqual("10. Verify Identifier input whose value is empty", string.Empty, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetIdentifierValue());
            VerifyEqual("[#1398297] 10. Verify Identifier input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsIdentifierInputReadOnly());
            Step("  o Equipment type property has a label whose text is 'Type of equipment *' and a dropdown list whose value is empty and is selectable");
            VerifyEqual("10. Verify Equipment type property has a label whose text is 'Type of equipment *'", "Type of equipment *", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetTypeEquipmentText());
            VerifyEqual("10. Verify Equipment type dropdown list whose value is empty", "Select a value", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNewDeviceTypeOfEquipmentValue());
            VerifyEqual("10. Verify Equipment type dropdown is selectable", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsTypeOfEquipmentDropDownSelectable());
            Step("  o 'Position the device' button");
            VerifyEqual("10. Verify 'Position the device' button is visible", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsPositionDeviceButtonDisplayed());

            Step("11. Enter an unexisting value into Name field");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(streetlight);

            Step("12. Select a value from Controller ID dropdown");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectControllerIdDropDown(controller);

            Step("13. Enter an unexisting value into Identifier field");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterIdentifierInput(streetlight);

            Step("14. Select a value from Equipment type dropdown");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectTypeOfEquipmentDropDown(typeOfEquipment);

            Step("15. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();

            Step("16. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel.'");
            VerifyEqual("16. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel.'", "Position the new device on the map. Click here to cancel.", equipmentInventoryPage.Map.GetRecorderText());

            Step("17. Verify New Device panel disappears");
            VerifyEqual("17. Verify New Device panel disappears", false, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("18. Verify Geozone Editor panel disappears");
            VerifyEqual("18. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("19. Specify boundary of the new device by steps: zoom in the map using mouse scroll button; zoom in once more time using zooming bar of the map; drag the map");
            equipmentInventoryPage.Map.DragMapToRandomLocation();
            equipmentInventoryPage.Map.ZoomInToGLLevel(ZoomGLLevel.m50);

            Step("20. Place the streetlight on the map");
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForTitleHasText();

            Step("21. Verify Map recorder panel disappears");
            VerifyEqual("21. Verify Map recorder panel disappears", false, equipmentInventoryPage.Map.IsRecorderDisplayed());

            Step("22. Verify The Streetlight is get selected on map and geozone tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("Verify The Streetlight '{0}' is selected geozone tree", streetlight), streetlight, selectedNodeName);
            VerifyTrue("22. Verify The Streetlight is selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL(), "Selected", "No device selected");

            Step("23. Verify Streetlight Editor panel appears");
            VerifyEqual("23. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("24. Verify Value of Name field is the value entered in New Device panel step");
            VerifyEqual(string.Format("24. Verify Value of Name field is '{0}'", streetlight), streetlight, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());

            Step("25. Verify Value of GeoZone is geozone A's name");
            VerifyEqual(string.Format("25. Verify Value of GeoZone is '{0}'", geozone), geozone, equipmentInventoryPage.StreetlightEditorPanel.GetGeozoneValue());

            Step("26. Verify Value of Latitude field is filled");
            VerifyEqual("26. Verify Value of Latitude is filled", true, !string.IsNullOrEmpty(equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue()));

            Step("27. Verify Value of Longitude field is filled");
            VerifyEqual("27. Verify Value of Longitude is filled", true, !string.IsNullOrEmpty(equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue()));

            Step("28. Verify There are 3 tabs in Streetlight Editor panel: 'Identity', 'Inventory', 'Electricity network'");
            var actualTabList = equipmentInventoryPage.StreetlightEditorPanel.GetListOfTabsName();
            VerifyEqual("28. Verify There are 3 tabs in Streetlight Editor panel as expected", expectedTabList, actualTabList);

            Step("29. Verify In 'Identity' tab, values of Controller id, Identifier, Equipment type fields are the values entered in New Device panel step");
            VerifyEqual(string.Format("29. Verify Controller ID field is '{0}'", controller), controller, equipmentInventoryPage.StreetlightEditorPanel.GetControllerIdValue());
            VerifyEqual(string.Format("29. Verify Identifer field is '{0}'", streetlight), streetlight, equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue());
            VerifyEqual(string.Format("29. Verify Type Of Equipment field is '{0}'", typeOfEquipment), typeOfEquipment, equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentValue());

            var notedName = equipmentInventoryPage.StreetlightEditorPanel.GetNameValue();
            var notedGeozoneName = equipmentInventoryPage.StreetlightEditorPanel.GetGeozoneValue();
            var notedLatitude = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue();
            var notedLongtitude = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue();
            var notedControllerId = equipmentInventoryPage.StreetlightEditorPanel.GetControllerIdValue();
            var notedIdentifier = equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue();
            var notedTypeOfEquipment = equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentValue();

            Step("30. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("31. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("32. Browse to geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("33. Verify The newly-created streetlight is present in geozone A");
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Streetlight);
            VerifyEqual(string.Format("33. Verify The newly-created switch '{0}' is present in geozone '{1}'", streetlight, geozone), true, subNodesList.Exists(p => p.Equals(streetlight)));

            Step("34. Select the created streetlight");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);

            Step("35. Verify Streetlight Editor panel appears");
            VerifyEqual("35. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("36. Verify Streetlight Editor panel displays the same values of Name, GeoZone, Latitude, Longitude, Controller ID, Identifier, Equipment Type as before refreshing browser");
            VerifyDeviceBasicInfo(equipmentInventoryPage, notedName, notedGeozoneName);
            VerifyDeviceLatitudeLongitude(equipmentInventoryPage, notedLatitude, notedLongtitude);
            VerifyDeviceIdentity(equipmentInventoryPage, notedControllerId, notedIdentifier, notedTypeOfEquipment);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_16_01 Streetlight - Create - Validation")]
        public void EI_16_01()
        {
            var testData = GetTestDataOfEI_16_01();
            var controllerId = testData["ControllerId"];
            var controllerName = testData["ControllerName"];
            var geozone = SLVHelper.GenerateUniqueName("GZNEI1601");
            var newStreetlight = SLVHelper.GenerateUniqueName("STL");
            var existingStreetlight = SLVHelper.GenerateUniqueName("STLEx");
            var typeOfEquipment = "SSN Cimcon Dim Photocell[Lamp #0]";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI1601*");
            CreateNewGeozone(geozone);
            CreateNewDevice(DeviceType.Streetlight, existingStreetlight, controllerId, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Dropdown Add menu then click Add Device menu item");
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddDeviceMenuItem();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisplayed();

            Step("6. Verify New Device panel appears");
            VerifyEqual("6. Verify New Device panel appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("7. Select 'STREETLIGHT'");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectDevice(DeviceType.Streetlight);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.WaitForNewDevicePropertiesSectionDisplayed();

            Step("8. Verify New Device panel switches to controller property content");
            VerifyEqual("8. Verify New Device panel switches to controller property content", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsNewDevicePropertiesSectionDisplayed());
            VerifyEqual("[#1398297] 8. Verify Identifier input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsIdentifierInputReadOnly());

            Step("9. Leave all fields empty");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(string.Empty);

            Step("10. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("11. Verify A dialog with title 'Warning' and message 'Please enter a device name.' appears");
            VerifyEqual("11. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("11. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("11. Verify dialog message is 'Please enter a device name.'", "Please enter a device name.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("12. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("13. Verify The dialog disappears");
            VerifyEqual("13. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("14. Verify New Device panel still displays");
            VerifyEqual("14. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("15. Enter any value into Name field; Leave other fields empty");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(newStreetlight);

            Step("16. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("17. Verify A dialog with title 'Warning' and message 'Please enter 'Controller ID' property.' appears");
            VerifyEqual("17. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("17. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("17. Verify dialog message is 'Please enter 'Controller ID' property.'", "Please enter 'Controller ID' property.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("18. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("19. Verify The dialog disappears");
            VerifyEqual("19. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("20. Verify New Device panel still displays");
            VerifyEqual("20. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("21. Select a value for Controller id field; Leave other fields intact");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectControllerIdDropDown(controllerName);

            Step("22. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("23. Verify A dialog with title 'Warning' and message 'Please enter 'Identifier' property.' appears");
            VerifyEqual("23. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("23. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("23. Verify dialog message is 'Please enter 'Identifier' property.'", "Please enter 'Identifier' property.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("24. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("25. Verify The dialog disappears");
            VerifyEqual("25. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("26. Verify New Device panel still displays");
            VerifyEqual("26. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("27. Enter any but not existing device name value into Identifier field; Leave other fields intact");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterIdentifierInput(newStreetlight);

            Step("28. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("29. Verify A dialog with title 'Warning' and message 'Please enter 'Type of equipment' property.' appears");
            VerifyEqual("29. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("29. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("29. Verify dialog message is 'Please enter 'Type of equipment' property.'", "Please enter 'Type of equipment' property.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("30. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("31. Verify The dialog disappears");
            VerifyEqual("31. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("32. Verify New Device panel still displays");
            VerifyEqual("32. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("33. Enter an existing device name into Name field; Leave other fields intact");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(existingStreetlight);

            Step("34. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("35. Verify A dialog with title 'Warning' and message 'This device name already exists!' appears");
            VerifyEqual("35. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("35. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("35. Verify dialog message is 'This device name already exists!'", "This device name already exists!", equipmentInventoryPage.Dialog.GetMessageText());

            Step("36. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("37. Verify The dialog disappears");
            VerifyEqual("37. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("38. Verify New Device panel still displays");
            VerifyEqual("38. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("39. Enter an unexisting name; Enter an existing identifier value; Other fields are left intact");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(newStreetlight);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterIdentifierInput(existingStreetlight);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectTypeOfEquipmentDropDown(typeOfEquipment);

            Step("40. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();

            Step("41. Verify New Device panel disappears");
            VerifyEqual("41. Verify New Device panel disappears", false, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("42. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel'");
            VerifyEqual("42. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel.'", "Position the new device on the map. Click here to cancel.", equipmentInventoryPage.Map.GetRecorderText());

            Step("43. Click on the map");
            equipmentInventoryPage.Map.DragMapToRandomLocation();
            equipmentInventoryPage.Map.ZoomInToGLLevel(ZoomGLLevel.m50);
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("44. Verify A dialog with title 'Error' and message Id '{streetlight id}@{controller id of step #21} already used for item 'Device'! appears");            
            var expectedMessage = string.Format("Id '{0}@{1} already used for item 'Device'!", existingStreetlight, controllerId);
            VerifyEqual("44. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("44. Verify dialog title is 'Error'", "Error", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual(string.Format("44. Verify dialog message is '{0}", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("45. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("46. Verify The dialog disappears");
            VerifyEqual("46. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("47. Verify Geozone Editor panel appears back");
            VerifyEqual("47. Verify Geozone Editor panel appears back", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("48. Verify There is no device with name previously entered in New Device panel present in geozone A");
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Streetlight);
            VerifyEqual(string.Format("48. Verify Streetlight '{0}' is not present in geozone '{1}'", newStreetlight, geozone), false, subNodesList.Exists(p => p.Equals(newStreetlight)));

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_17 Streetlight - Update")]
        public void EI_17()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI17");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI17*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;                      

            Step("3. Select a streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);

            Step("4. Verify Streetlight Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Note tabs, expandable sections and all values in the editor of the streetlight, both editable and readonly ones");
            var tabsList = equipmentInventoryPage.StreetlightEditorPanel.GetListOfTabsName();
            var groupsList = equipmentInventoryPage.StreetlightEditorPanel.GetListOfGroupsName();
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroupsActiveTab();
            //Identity of the light point
            var controllerId = equipmentInventoryPage.StreetlightEditorPanel.GetControllerIdValue();
            var readonlyIdentifier = equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue();
            //Control system
            var typeOfEquipment = equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentValue();
            var dimmingGroup = equipmentInventoryPage.StreetlightEditorPanel.GetDimmingGroupValue();
            var uniqueAddress = equipmentInventoryPage.StreetlightEditorPanel.GetUniqueAddressValue();
            var controllerInstallDate = equipmentInventoryPage.StreetlightEditorPanel.GetControllerInstallDateValue();
            var installStatus = equipmentInventoryPage.StreetlightEditorPanel.GetInstallStatusValue();
            var serialNumber = equipmentInventoryPage.StreetlightEditorPanel.GetSerialNumberValue();
            var deviceHwVersion = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceHwVersionValue();
            var deviceSwVersion = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceSwVersionValue();
            var deviceHwType = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceHwTypeValue();
            var nicSerialNumber = equipmentInventoryPage.StreetlightEditorPanel.GetNicSerialNumberValue();
            var nicHwVersion = equipmentInventoryPage.StreetlightEditorPanel.GetNicHwVersionValue();
            var nicSwVersion = equipmentInventoryPage.StreetlightEditorPanel.GetNicSwVersionValue();
            var nicHwModel = equipmentInventoryPage.StreetlightEditorPanel.GetNicHwModelValue();
            var nicFallbackMode = equipmentInventoryPage.StreetlightEditorPanel.GetNicFallbackModeValue();
            var manufactoringDate = equipmentInventoryPage.StreetlightEditorPanel.GetManufactoringDateValue();
            var deviceName = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceNameValue();
            var deviceManufactorer = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceManufacturerValue();
            var utilityId = equipmentInventoryPage.StreetlightEditorPanel.GetUtilityIdValue();
            var meterProgramId = equipmentInventoryPage.StreetlightEditorPanel.GetMeterProgramIdValue();
            var catalogNumber = equipmentInventoryPage.StreetlightEditorPanel.GetCatalogNumberValue();
            var readonlyConfigStatus = equipmentInventoryPage.StreetlightEditorPanel.GetConfigStatusValue();
            var readonlyConfigStatusMessage = equipmentInventoryPage.StreetlightEditorPanel.GetConfigStatusMessageValue();
            var readonlyCommunicationStatus = equipmentInventoryPage.StreetlightEditorPanel.GetCommunicationStatusValue();
            var reference = equipmentInventoryPage.StreetlightEditorPanel.GetReferenceValue();
            var elexonChargeCode = equipmentInventoryPage.StreetlightEditorPanel.GetElexonChargeCodeValue();
            var timeout = equipmentInventoryPage.StreetlightEditorPanel.GetTimeoutValue();
            var retries = equipmentInventoryPage.StreetlightEditorPanel.GetRetriesValue();
            var readonlyLastEventLogSequence = equipmentInventoryPage.StreetlightEditorPanel.GetLastEventLogSequenceValue();
            var readonlyLastEventRequestTime = equipmentInventoryPage.StreetlightEditorPanel.GetLastEventRequestTimeValue();
            var readonlyLastMeterLogSequence = equipmentInventoryPage.StreetlightEditorPanel.GetLastMeterLogSequenceValue();
            var readonlyLastMeterRequestTime = equipmentInventoryPage.StreetlightEditorPanel.GetLastMeterRequestTimeValue();
            var isCpd = equipmentInventoryPage.StreetlightEditorPanel.GetIsCpdValue();
            var readonlyLastImuLogSequence = equipmentInventoryPage.StreetlightEditorPanel.GetLastImuLogSequenceValue();
            var readonlyLastImuRequestTime = equipmentInventoryPage.StreetlightEditorPanel.GetLastImuRequestTimeValue();

            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroupsActiveTab();
            //Location
            var premise = equipmentInventoryPage.StreetlightEditorPanel.GetPremiseValue();
            var address1 = equipmentInventoryPage.StreetlightEditorPanel.GetAddress1Value();
            var address2 = equipmentInventoryPage.StreetlightEditorPanel.GetAddress2Value();
            var city = equipmentInventoryPage.StreetlightEditorPanel.GetCityValue();
            var zipCode = equipmentInventoryPage.StreetlightEditorPanel.GetZipCodeValue();
            var mapNumber = equipmentInventoryPage.StreetlightEditorPanel.GetMapNumberValue();
            var locationType = equipmentInventoryPage.StreetlightEditorPanel.GetLocationTypeValue();
            var utilityLocationId = equipmentInventoryPage.StreetlightEditorPanel.GetUtilityLocationIdValue();
            var pictureFilePath = equipmentInventoryPage.StreetlightEditorPanel.GetPictureFilePathValue();
            //Customer
            var accountNumber = equipmentInventoryPage.StreetlightEditorPanel.GetAccountNumberValue();
            var customerNumber = equipmentInventoryPage.StreetlightEditorPanel.GetCustomerNumberValue();
            var customerName = equipmentInventoryPage.StreetlightEditorPanel.GetCustomerNameValue();
            //Lamp
            var lampType = equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue();
            var lampWattage = equipmentInventoryPage.StreetlightEditorPanel.GetLampWattageValue();
            var fixedSavedPower = equipmentInventoryPage.StreetlightEditorPanel.GetFixedSavedPowerValue();
            var lampInstallDate = equipmentInventoryPage.StreetlightEditorPanel.GetLampInstallDateValue();
            var powerFactorThreshold = equipmentInventoryPage.StreetlightEditorPanel.GetPowerFactorThresholdValue();
            var onLuxLevel = equipmentInventoryPage.StreetlightEditorPanel.GetOnLuxLevelValue();
            var offLuxLevel = equipmentInventoryPage.StreetlightEditorPanel.GetOffLuxLevelValue();
            //Driver or ballast
            var ballastType = equipmentInventoryPage.StreetlightEditorPanel.GetBallastTypeValue();
            var dimmingInterface = equipmentInventoryPage.StreetlightEditorPanel.GetDimmingInterfaceValue();
            var ballastBrand = equipmentInventoryPage.StreetlightEditorPanel.GetBallastBrandValue();
            var poleHeadInstall = equipmentInventoryPage.StreetlightEditorPanel.GetPoleHeadInstallValue();
            //Luminaire
            var luminaireBrand = equipmentInventoryPage.StreetlightEditorPanel.GetLuminaireBrandValue();
            var luminaireType = equipmentInventoryPage.StreetlightEditorPanel.GetLuminaireTypeValue();
            var luminaireModel = equipmentInventoryPage.StreetlightEditorPanel.GetLuminaireModelValue();
            var lightDistribution = equipmentInventoryPage.StreetlightEditorPanel.GetLightDistributionValue();
            var orientation = equipmentInventoryPage.StreetlightEditorPanel.GetOrientationValue();
            var colorCode = equipmentInventoryPage.StreetlightEditorPanel.GetColorCodeValue();
            var status = equipmentInventoryPage.StreetlightEditorPanel.GetStatusValue();
            var luminaireInstallDate = equipmentInventoryPage.StreetlightEditorPanel.GetLuminaireInstallDateValue();
            //Bracket
            var bracketBrand = equipmentInventoryPage.StreetlightEditorPanel.GetBracketBrandValue();
            var bracketModel = equipmentInventoryPage.StreetlightEditorPanel.GetBracketModelValue();
            var bracketType = equipmentInventoryPage.StreetlightEditorPanel.GetBracketTypeValue();
            var bracketColor = equipmentInventoryPage.StreetlightEditorPanel.GetBracketColorValue();
            //Pole or support
            var poleType = equipmentInventoryPage.StreetlightEditorPanel.GetPoleTypeValue();
            var poleHeight = equipmentInventoryPage.StreetlightEditorPanel.GetPoleHeightValue();
            var poleShape = equipmentInventoryPage.StreetlightEditorPanel.GetPoleShapeValue();
            var poleMaterial = equipmentInventoryPage.StreetlightEditorPanel.GetPoleMaterialValue();
            var poleColorCode = equipmentInventoryPage.StreetlightEditorPanel.GetPoleColorCodeValue();
            var poleStatus = equipmentInventoryPage.StreetlightEditorPanel.GetPoleStatusValue();
            var typeOfGroundFixing = equipmentInventoryPage.StreetlightEditorPanel.GetTypeGroundFixingValue();
            var poleInstallDate = equipmentInventoryPage.StreetlightEditorPanel.GetPoleInstallDateValue();
            //Comment
            var comment = equipmentInventoryPage.StreetlightEditorPanel.GetCommentValue();

            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroupsActiveTab();
            var energySupplier = equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue();
            var networkType = equipmentInventoryPage.StreetlightEditorPanel.GetNetworkTypeValue();
            var supplyVoltage = equipmentInventoryPage.StreetlightEditorPanel.GetSupplyVoltageValue();
            var cabinet = equipmentInventoryPage.StreetlightEditorPanel.GetCabinetValue();
            var transformer = equipmentInventoryPage.StreetlightEditorPanel.GetTransformerValue();
            var feederNumber = equipmentInventoryPage.StreetlightEditorPanel.GetFeederNumberValue();
            var switchValue = equipmentInventoryPage.StreetlightEditorPanel.GetSwitchValue();
            var substation = equipmentInventoryPage.StreetlightEditorPanel.GetSubstationValue();
            var segment = equipmentInventoryPage.StreetlightEditorPanel.GetSegmentValue();
            var section = equipmentInventoryPage.StreetlightEditorPanel.GetSectionValue();
            var highVoltageThreshold = equipmentInventoryPage.StreetlightEditorPanel.GetHighVoltageThresholdValue();
            var lowVoltageThreshold = equipmentInventoryPage.StreetlightEditorPanel.GetLowVoltageThresholdValue();

            Step("6. Change values of all editable fields except equipment type");
            EnterStreetlightEditableValues(equipmentInventoryPage);

            Step("7. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("8. Verify Streetlight Editor panel disappears");
            VerifyEqual("8. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("9. Verify There is no any node in geozone being selected");
            VerifyEqual("9. Verify There is no any node in geozone being selected", false, equipmentInventoryPage.GeozoneTreeMainPanel.HasSelectedNode());

            Step("10. Select the streetlight again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);

            Step("11. Verify Streetlight Editor panel appears");
            VerifyEqual("11. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("12. Verify Tabs, sections and readonly values are remained unchanged against step #5");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroupsActiveTab();
            var actualTabsList = equipmentInventoryPage.StreetlightEditorPanel.GetListOfTabsName();
            var acutalGroupsList = equipmentInventoryPage.StreetlightEditorPanel.GetListOfGroupsName();
            var actualReadonlyIdentifier = equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue();
            VerifyEqual("12. Verify Tabs are unchanged", tabsList, actualTabsList);
            VerifyEqual("12. Verify Group sections are unchanged", groupsList, acutalGroupsList);
            VerifyStreetlightReadOnlyValuesAreUnchanged(equipmentInventoryPage, readonlyIdentifier, readonlyConfigStatus, readonlyConfigStatusMessage, readonlyCommunicationStatus
                , readonlyLastEventLogSequence, readonlyLastEventRequestTime, readonlyLastImuLogSequence, readonlyLastMeterRequestTime, readonlyLastImuLogSequence, readonlyLastImuRequestTime);

            Step("13. Verify Editable values are the new values (values after step #6)");
            VerifyStreetlightEditableValuesAreChanged(equipmentInventoryPage
            , dimmingGroup, uniqueAddress, controllerInstallDate, installStatus, serialNumber, deviceHwVersion, deviceSwVersion, deviceHwType, nicSerialNumber, nicHwVersion, nicSwVersion
            , nicHwModel, nicFallbackMode, manufactoringDate, deviceName, deviceManufactorer, utilityId, meterProgramId, catalogNumber, elexonChargeCode, timeout, retries, isCpd
            , premise, address1, address2, city, zipCode, mapNumber, locationType, utilityLocationId
            , accountNumber, customerNumber, customerName, lampType, lampWattage, fixedSavedPower, lampInstallDate, powerFactorThreshold, onLuxLevel, offLuxLevel
            , ballastType, dimmingInterface, ballastBrand, poleHeadInstall, luminaireBrand, luminaireType, luminaireModel, lightDistribution, orientation, colorCode, status, luminaireInstallDate
            , bracketBrand, bracketModel, bracketType, bracketColor, poleType, poleHeight, poleShape, poleMaterial, poleColorCode, poleStatus, typeOfGroundFixing, poleInstallDate, comment
            , energySupplier, networkType, supplyVoltage, cabinet, transformer, feederNumber, switchValue, substation, segment, section, highVoltageThreshold, lowVoltageThreshold);

            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroupsActiveTab();
            //Identity of the light point
            readonlyIdentifier = equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue();
            //Control system
            typeOfEquipment = equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentValue();
            dimmingGroup = equipmentInventoryPage.StreetlightEditorPanel.GetDimmingGroupValue();
            uniqueAddress = equipmentInventoryPage.StreetlightEditorPanel.GetUniqueAddressValue();
            controllerInstallDate = equipmentInventoryPage.StreetlightEditorPanel.GetControllerInstallDateValue();
            installStatus = equipmentInventoryPage.StreetlightEditorPanel.GetInstallStatusValue();
            serialNumber = equipmentInventoryPage.StreetlightEditorPanel.GetSerialNumberValue();
            deviceHwVersion = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceHwVersionValue();
            deviceSwVersion = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceSwVersionValue();
            deviceHwType = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceHwTypeValue();
            nicSerialNumber = equipmentInventoryPage.StreetlightEditorPanel.GetNicSerialNumberValue();
            nicHwVersion = equipmentInventoryPage.StreetlightEditorPanel.GetNicHwVersionValue();
            nicSwVersion = equipmentInventoryPage.StreetlightEditorPanel.GetNicSwVersionValue();
            nicHwModel = equipmentInventoryPage.StreetlightEditorPanel.GetNicHwModelValue();
            nicFallbackMode = equipmentInventoryPage.StreetlightEditorPanel.GetNicFallbackModeValue();
            manufactoringDate = equipmentInventoryPage.StreetlightEditorPanel.GetManufactoringDateValue();
            deviceName = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceNameValue();
            deviceManufactorer = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceManufacturerValue();
            utilityId = equipmentInventoryPage.StreetlightEditorPanel.GetUtilityIdValue();
            meterProgramId = equipmentInventoryPage.StreetlightEditorPanel.GetMeterProgramIdValue();
            catalogNumber = equipmentInventoryPage.StreetlightEditorPanel.GetCatalogNumberValue();
            readonlyConfigStatus = equipmentInventoryPage.StreetlightEditorPanel.GetConfigStatusValue();
            readonlyConfigStatusMessage = equipmentInventoryPage.StreetlightEditorPanel.GetConfigStatusMessageValue();
            readonlyCommunicationStatus = equipmentInventoryPage.StreetlightEditorPanel.GetCommunicationStatusValue();
            reference = equipmentInventoryPage.StreetlightEditorPanel.GetReferenceValue();
            elexonChargeCode = equipmentInventoryPage.StreetlightEditorPanel.GetElexonChargeCodeValue();
            timeout = equipmentInventoryPage.StreetlightEditorPanel.GetTimeoutValue();
            retries = equipmentInventoryPage.StreetlightEditorPanel.GetRetriesValue();
            readonlyLastEventLogSequence = equipmentInventoryPage.StreetlightEditorPanel.GetLastEventLogSequenceValue();
            readonlyLastEventRequestTime = equipmentInventoryPage.StreetlightEditorPanel.GetLastEventRequestTimeValue();
            readonlyLastMeterLogSequence = equipmentInventoryPage.StreetlightEditorPanel.GetLastMeterLogSequenceValue();
            readonlyLastMeterRequestTime = equipmentInventoryPage.StreetlightEditorPanel.GetLastMeterRequestTimeValue();
            isCpd = equipmentInventoryPage.StreetlightEditorPanel.GetIsCpdValue();
            readonlyLastImuLogSequence = equipmentInventoryPage.StreetlightEditorPanel.GetLastImuLogSequenceValue();
            readonlyLastImuRequestTime = equipmentInventoryPage.StreetlightEditorPanel.GetLastImuRequestTimeValue();

            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroupsActiveTab();
            //Location
            premise = equipmentInventoryPage.StreetlightEditorPanel.GetPremiseValue();
            address1 = equipmentInventoryPage.StreetlightEditorPanel.GetAddress1Value();
            address2 = equipmentInventoryPage.StreetlightEditorPanel.GetAddress2Value();
            city = equipmentInventoryPage.StreetlightEditorPanel.GetCityValue();
            zipCode = equipmentInventoryPage.StreetlightEditorPanel.GetZipCodeValue();
            mapNumber = equipmentInventoryPage.StreetlightEditorPanel.GetMapNumberValue();
            locationType = equipmentInventoryPage.StreetlightEditorPanel.GetLocationTypeValue();
            utilityLocationId = equipmentInventoryPage.StreetlightEditorPanel.GetUtilityLocationIdValue();
            pictureFilePath = equipmentInventoryPage.StreetlightEditorPanel.GetPictureFilePathValue();
            //Customer
            accountNumber = equipmentInventoryPage.StreetlightEditorPanel.GetAccountNumberValue();
            customerNumber = equipmentInventoryPage.StreetlightEditorPanel.GetCustomerNumberValue();
            customerName = equipmentInventoryPage.StreetlightEditorPanel.GetCustomerNameValue();
            //Lamp
            lampType = equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue();
            lampWattage = equipmentInventoryPage.StreetlightEditorPanel.GetLampWattageValue();
            fixedSavedPower = equipmentInventoryPage.StreetlightEditorPanel.GetFixedSavedPowerValue();
            lampInstallDate = equipmentInventoryPage.StreetlightEditorPanel.GetLampInstallDateValue();
            powerFactorThreshold = equipmentInventoryPage.StreetlightEditorPanel.GetPowerFactorThresholdValue();
            onLuxLevel = equipmentInventoryPage.StreetlightEditorPanel.GetOnLuxLevelValue();
            offLuxLevel = equipmentInventoryPage.StreetlightEditorPanel.GetOffLuxLevelValue();
            //Driver or ballast
            ballastType = equipmentInventoryPage.StreetlightEditorPanel.GetBallastTypeValue();
            dimmingInterface = equipmentInventoryPage.StreetlightEditorPanel.GetDimmingInterfaceValue();
            ballastBrand = equipmentInventoryPage.StreetlightEditorPanel.GetBallastBrandValue();
            poleHeadInstall = equipmentInventoryPage.StreetlightEditorPanel.GetPoleHeadInstallValue();
            //Luminaire
            luminaireBrand = equipmentInventoryPage.StreetlightEditorPanel.GetLuminaireBrandValue();
            luminaireType = equipmentInventoryPage.StreetlightEditorPanel.GetLuminaireTypeValue();
            luminaireModel = equipmentInventoryPage.StreetlightEditorPanel.GetLuminaireModelValue();
            lightDistribution = equipmentInventoryPage.StreetlightEditorPanel.GetLightDistributionValue();
            orientation = equipmentInventoryPage.StreetlightEditorPanel.GetOrientationValue();
            colorCode = equipmentInventoryPage.StreetlightEditorPanel.GetColorCodeValue();
            status = equipmentInventoryPage.StreetlightEditorPanel.GetStatusValue();
            luminaireInstallDate = equipmentInventoryPage.StreetlightEditorPanel.GetLuminaireInstallDateValue();
            //Bracket
            bracketBrand = equipmentInventoryPage.StreetlightEditorPanel.GetBracketBrandValue();
            bracketModel = equipmentInventoryPage.StreetlightEditorPanel.GetBracketModelValue();
            bracketType = equipmentInventoryPage.StreetlightEditorPanel.GetBracketTypeValue();
            bracketColor = equipmentInventoryPage.StreetlightEditorPanel.GetBracketColorValue();
            //Pole or support
            poleType = equipmentInventoryPage.StreetlightEditorPanel.GetPoleTypeValue();
            poleHeight = equipmentInventoryPage.StreetlightEditorPanel.GetPoleHeightValue();
            poleShape = equipmentInventoryPage.StreetlightEditorPanel.GetPoleShapeValue();
            poleMaterial = equipmentInventoryPage.StreetlightEditorPanel.GetPoleMaterialValue();
            poleColorCode = equipmentInventoryPage.StreetlightEditorPanel.GetPoleColorCodeValue();
            poleStatus = equipmentInventoryPage.StreetlightEditorPanel.GetPoleStatusValue();
            typeOfGroundFixing = equipmentInventoryPage.StreetlightEditorPanel.GetTypeGroundFixingValue();
            poleInstallDate = equipmentInventoryPage.StreetlightEditorPanel.GetPoleInstallDateValue();
            //Comment
            comment = equipmentInventoryPage.StreetlightEditorPanel.GetCommentValue();

            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroupsActiveTab();
            energySupplier = equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue();
            networkType = equipmentInventoryPage.StreetlightEditorPanel.GetNetworkTypeValue();
            supplyVoltage = equipmentInventoryPage.StreetlightEditorPanel.GetSupplyVoltageValue();
            cabinet = equipmentInventoryPage.StreetlightEditorPanel.GetCabinetValue();
            transformer = equipmentInventoryPage.StreetlightEditorPanel.GetTransformerValue();
            feederNumber = equipmentInventoryPage.StreetlightEditorPanel.GetFeederNumberValue();
            switchValue = equipmentInventoryPage.StreetlightEditorPanel.GetSwitchValue();
            substation = equipmentInventoryPage.StreetlightEditorPanel.GetSubstationValue();
            segment = equipmentInventoryPage.StreetlightEditorPanel.GetSegmentValue();
            section = equipmentInventoryPage.StreetlightEditorPanel.GetSectionValue();
            highVoltageThreshold = equipmentInventoryPage.StreetlightEditorPanel.GetHighVoltageThresholdValue();
            lowVoltageThreshold = equipmentInventoryPage.StreetlightEditorPanel.GetLowVoltageThresholdValue();

            Step("14. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("15. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("16. Browse to the streetlight again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);

            Step("17. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("18. Verify Tabs, sections and readonly values are remained unchanged against step #5");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroupsActiveTab();
            actualTabsList = equipmentInventoryPage.StreetlightEditorPanel.GetListOfTabsName();
            acutalGroupsList = equipmentInventoryPage.StreetlightEditorPanel.GetListOfGroupsName();
            actualReadonlyIdentifier = equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue();
            VerifyEqual("18. Verify Tabs are unchanged", tabsList, actualTabsList);
            VerifyEqual("18. Verify Group sections are unchanged", groupsList, acutalGroupsList);
            VerifyStreetlightReadOnlyValuesAreUnchanged(equipmentInventoryPage, readonlyIdentifier, readonlyConfigStatus, readonlyConfigStatusMessage, readonlyCommunicationStatus
                , readonlyLastEventLogSequence, readonlyLastEventRequestTime, readonlyLastImuLogSequence, readonlyLastMeterRequestTime, readonlyLastImuLogSequence, readonlyLastImuRequestTime);

            Step("19. Verify Editable values are remained to be the new values (values after step #6)");
            VerifyStreetlightEditableValues(equipmentInventoryPage
           , controllerId, dimmingGroup, uniqueAddress, controllerInstallDate, installStatus, serialNumber, deviceHwVersion, deviceSwVersion, deviceHwType, nicSerialNumber, nicHwVersion, nicSwVersion
           , nicHwModel, nicFallbackMode, manufactoringDate, deviceName, deviceManufactorer, utilityId, meterProgramId, catalogNumber, elexonChargeCode, timeout, retries, isCpd
           , premise, address1, address2, city, zipCode, mapNumber, locationType, utilityLocationId
           , accountNumber, customerNumber, customerName, lampType, lampWattage, fixedSavedPower, lampInstallDate, powerFactorThreshold, onLuxLevel, offLuxLevel
           , ballastType, dimmingInterface, ballastBrand, poleHeadInstall, luminaireBrand, luminaireType, luminaireModel, lightDistribution, orientation, colorCode, status, luminaireInstallDate
           , bracketBrand, bracketModel, bracketType, bracketColor, poleType, poleHeight, poleShape, poleMaterial, poleColorCode, poleStatus, typeOfGroundFixing, poleInstallDate, comment
           , energySupplier, networkType, supplyVoltage, cabinet, transformer, feederNumber, switchValue, substation, segment, section, highVoltageThreshold, lowVoltageThreshold);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_17_01 Streetlight - Update - Validation")]
        public void EI_17_01()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI1701");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var newStreetlightName = SLVHelper.GenerateUniqueName("STLNew");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - 'Enable device location' option for Equipment Inventory app in Back Office must be checked");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI1701*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenBackOfficeApp();
            var backOfficePage = loginPage.LoginAsValidUserToBackOffice(Settings.Users["admin"].Username, Settings.Users["admin"].Password);
            backOfficePage.BackOfficeOptionsPanel.SelectConfiguration(App.EquipmentInventory);
            var firstDeviceLocationValue = backOfficePage.BackOfficeDetailsPanel.GetEquipmentDeviceLocationValue();
            backOfficePage.BackOfficeDetailsPanel.TickEquipmentDeviceLocationCheckbox(true);
            backOfficePage.BackOfficeDetailsPanel.ClickSaveButton();
            backOfficePage.WaitForPreviousActionComplete();

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var desktopPage = Browser.NavigateToLoggedInCMS();
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select a streetlight");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Streetlight Editor panel appears");            
            VerifyEqual("4. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Clear Name field");
            equipmentInventoryPage.StreetlightEditorPanel.EnterNameInput(string.Empty);

            Step("6. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("7. Verify A dialog with title 'Warning' and message 'Please enter a device name.' appears");
            VerifyEqual("7. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("7. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("7. Verify dialog message is 'Please enter a device name.'", "Please enter a device name.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("8. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("9. Verify The dialog disappears");
            VerifyEqual("9. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("10. Verify Streetlight Editor panel is still displayed");
            VerifyEqual("10. Verify Streetlight Editor panel still displayed", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("11. Verify Streetlight A is still selected in geozone tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("11. Verify The Streetlight '{0}' is selected geozone tree", streetlight), streetlight, selectedNodeName);

            Step("12. Verify Streetlight A is still selected on map");
            VerifyTrue("12. Verify Streetlight A is selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL(), "Selected", "No device selected");

            Step("13. Enter any value into Name field");          
            equipmentInventoryPage.StreetlightEditorPanel.EnterNameInput(newStreetlightName);

            Step("14. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("15. Verify Streetlight Editor disappears");
            VerifyEqual("15. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("16. Verify There is not any dialog appearing");
            VerifyEqual("16. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("17. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newStreetlightName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("18. Verify Streetlight Editor panel appears");
            VerifyEqual("18. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("19. Verify Value of Name field are the new value");
            VerifyEqual("19. Verify Value of Name field are the new value", newStreetlightName, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());

            Step("20. Note current latitude and longitude values");
            var latitude = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue();
            var longitude = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue();

            Step("21. Clear Latitude field");
            equipmentInventoryPage.StreetlightEditorPanel.EnterLatitudeInput(string.Empty);

            Step("22. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("23. Verify Streetlight Editor panel disappears");
            VerifyEqual("23. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("24. Verify Streetlight A is no longer selected in geozone tree");
            selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyTrue(string.Format("24. Verify The Streetlight '{0}' is no longer selected geozone tree", streetlight), streetlight != selectedNodeName, streetlight, selectedNodeName);

            Step("25. Verify Streetlight A is no longer selected on map");
            VerifyTrue("25. Verify Streetlight A is no longer selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL() == false, "No device selected", "Selected");

            Step("26. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newStreetlightName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("27. Verify Streetlight Editor panel appears");
            VerifyEqual("27. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("28. Verify Value of latitude field is restored and equals the value noted at step #20");
            VerifyEqual(string.Format("28. Verify Value of latitude field is restored and equals '{0}'", latitude), latitude, equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue());

            Step("29. Verify Value of longitude field is remained the same with the value noted at step #20");
            VerifyEqual(string.Format("29. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue());

            Step("30. Clear Longitude field");
            equipmentInventoryPage.StreetlightEditorPanel.EnterLongitudeInput(string.Empty);

            Step("31. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("32. Verify Streetlight Editor panel disappears");
            VerifyEqual("32. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("33. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newStreetlightName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("34. Verify Streetlight Editor panel appears");
            VerifyEqual("34. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("35. Verify Value of latitude field is remained the same with the value noted at step #20");
            VerifyEqual(string.Format("35. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue());

            Step("36. Verify Value of longitude field is restored and equals the value noted at step #20");
            VerifyEqual(string.Format("36. Verify Value of longitude field is restored and equals the value '{0}'", longitude), longitude, equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue());

            Step("37. Clear both Latitude and Longitude fields");
            equipmentInventoryPage.StreetlightEditorPanel.EnterLatitudeInput(string.Empty);
            equipmentInventoryPage.StreetlightEditorPanel.EnterLongitudeInput(string.Empty);

            Step("38. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("39. Verify Streetlight Editor panel disappears");
            VerifyEqual("39. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("40. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newStreetlightName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("41. Verify Streetlight Editor panel appears");
            VerifyEqual("41. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("42. Verify Values of latitude and longitude fields are remained the same with the values noted at step #20");
            VerifyEqual(string.Format("42. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("42. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue());

            Step("43. Enter values of alphanumeric/non-alphanumeric into Latitude and Longitude fields");
            equipmentInventoryPage.StreetlightEditorPanel.EnterLatitudeInput(SLVHelper.GenerateString());
            equipmentInventoryPage.StreetlightEditorPanel.EnterLongitudeInput(SLVHelper.GenerateString());

            Step("44. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("45. Verify Streetlight Editor panel disappears");
            VerifyEqual("45. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("46. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newStreetlightName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("47. Verify Streetlight Editor panel appears");
            VerifyEqual("47. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("48. Verify Values of latitude and longitude fields are remained the same with the values noted at step #20");
            VerifyEqual(string.Format("48. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("48. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue());

            Step("49. Increase 1 the last number of Latitude and Longitude fields");
            var newLatitude = IncreaseLatLong(latitude);
            var newLongitude = IncreaseLatLong(longitude);
            equipmentInventoryPage.StreetlightEditorPanel.EnterLatitudeInput(newLatitude);
            equipmentInventoryPage.StreetlightEditorPanel.EnterLongitudeInput(newLongitude);
            equipmentInventoryPage.StreetlightEditorPanel.EnterLongitudeInput(newLongitude); //Re-enter 2nd time for auto-filled input issue.

            Step("50. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("51. Verify Streetlight Editor panel disappears");
            VerifyEqual("51. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("52. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newStreetlightName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("53. Verify Streetlight Editor panel appears");
            VerifyEqual("53. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("54. Verify Values of latitude and longitude fields are the new values");
            var actualLatitude = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue();
            var actualLongitude = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue();
            VerifyTrue(string.Format("54. Verify Value of latitude field is changed '{0}' to '{1}'", latitude, newLatitude), latitude != actualLatitude, actualLatitude, latitude);
            VerifyTrue(string.Format("54. Verify Value of longitude field is changed {0}' to '{1}'", longitude, newLongitude), longitude != actualLongitude, actualLongitude, longitude);

            Step("55. Refresh browser without saving");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("56. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("57. Browse to and select streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(string.Format(@"{0}\{1}", geozone, newStreetlightName));

            Step("58. Verify Streetlight Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("58. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("59. Verify Value of name, latitude, longitude are its last updated values");
            VerifyEqual(string.Format("59. Verify Value of latitude field is '{0}'", actualLatitude), actualLatitude, equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("59. Verify Value of longitude field is {0}'", actualLongitude), actualLongitude, equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue());

            try
            {
                DeleteGeozone(geozone);

                backOfficePage = Browser.NavigateToLoggedInBackOfficeApp();
                backOfficePage.BackOfficeOptionsPanel.SelectConfiguration(App.EquipmentInventory);
                backOfficePage.BackOfficeDetailsPanel.TickEquipmentDeviceLocationCheckbox(false);
                backOfficePage.BackOfficeDetailsPanel.ClickSaveButton();
                backOfficePage.WaitForPreviousActionComplete();
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_17_02 Streetlight - Update - Per Control Technology")]
        public void EI_17_02()
        {
            var testData = GetTestDataOfEI_17_02();
            var xmlEquipmentTypes = testData["EquipmentTypes"] as List<string>;          
            var geozone = SLVHelper.GenerateUniqueName("GZNEI1702");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI1702*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);

            Step("4. Verify Streetlight Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Get list of control techlonogy and for each techlonogy, do following steps");
            foreach (var equipmentType in xmlEquipmentTypes)
            {
                Step("5. Select another equipment type from Equipment Type dropdown");
                Info(string.Format("Select equipment type '{0}'", equipmentType));
                equipmentInventoryPage.StreetlightEditorPanel.SelectTypeOfEquipmentDropDown(equipmentType);

                Step("7. Click Save");
                equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("8. Verify Control Editor panel disappears");
                VerifyEqual("8. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("9. Select streetlight A again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

                Step("10. Verify Streetlight Editor panel appears back");
                VerifyEqual("10. Verify Streetlight Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("11. Note tabs, expandable sections and all values in the editor of the streetlight, both editable and readonly ones");
                var notedTabs = equipmentInventoryPage.StreetlightEditorPanel.GetListOfTabsName();
                var notedGroups = equipmentInventoryPage.StreetlightEditorPanel.GetListOfGroupsName();

                Step("12. Change values of all editable fields except equipment type");
                equipmentInventoryPage.StreetlightEditorPanel.EnterEditablePropertiesValue("Controller ID *", "Type of equipment *", "Identifier *", "Picture file path", "Cabinet Controller");
                var dicNotedReadOnlyProperties = equipmentInventoryPage.StreetlightEditorPanel.GetReadOnlyPropertiesValue();
                var dicNotedEditableProperties = equipmentInventoryPage.StreetlightEditorPanel.GetEditablePropertiesValue();

                Step("13. Click Save");
                equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("14. Verify Control Editor panel disappears");
                VerifyEqual("14. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("15. Verify There is no any node in geozone being selected");
                VerifyEqual("15. Verify There is no any node in geozone being selected", false, equipmentInventoryPage.GeozoneTreeMainPanel.HasSelectedNode());

                Step("16. Select the streetlight again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);

                Step("17. Verify Streetlight Editor panel appears");
                VerifyEqual("17. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("18. Verify Tabs, sections and readonly values are remained unchanged against step #10");
                var tabs = equipmentInventoryPage.StreetlightEditorPanel.GetListOfTabsName();
                var groups = equipmentInventoryPage.StreetlightEditorPanel.GetListOfGroupsName();
                var dicReadOnlyProperties = equipmentInventoryPage.StreetlightEditorPanel.GetReadOnlyPropertiesValue();
                var dicEditableProperties = equipmentInventoryPage.StreetlightEditorPanel.GetEditablePropertiesValue();
                VerifyEqual("18. Verify Tabs is remained", notedTabs, tabs);
                VerifyEqual("18. Verify Sections is remained", notedGroups, groups);
                VerifyEqual("18. Verify Readonly values are remained", dicNotedReadOnlyProperties, dicReadOnlyProperties);

                Step("19. Verify Editable values are the new values (values after step #12)");
                VerifyEqual(string.Format("[{0}] 19. Verify Editable values are the new values", equipmentType), dicNotedEditableProperties, dicEditableProperties);

                Step("20. Refresh browser");
                Step("21. Go to Equipment Inventory again");
                desktopPage = Browser.RefreshLoggedInCMS();
                equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

                Step("22. Browse to the streetlight again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

                Step("23. Verify Streetlight Editor panel appears");
                VerifyEqual("23. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("24. Verify Tabs, sections and readonly values are remained unchanged against step #10");
                tabs = equipmentInventoryPage.StreetlightEditorPanel.GetListOfTabsName();
                groups = equipmentInventoryPage.StreetlightEditorPanel.GetListOfGroupsName();
                var dicReadOnlyPropertiesAfterRefreshed = equipmentInventoryPage.StreetlightEditorPanel.GetReadOnlyPropertiesValue();
                VerifyEqual("24. Verify Tabs is remained", notedTabs, tabs);
                VerifyEqual("24. Verify Sections is remained", notedGroups, groups);
                VerifyEqual("24. Verify Readonly values are remained", dicNotedReadOnlyProperties, dicReadOnlyPropertiesAfterRefreshed);

                Step("25. Verify Editable values are remained to be the new values (values after step #12)");
                var dicEditablePropertiesAfterRefreshed = equipmentInventoryPage.StreetlightEditorPanel.GetEditablePropertiesValue();
                VerifyEqual(string.Format("[{0}] 25. Verify Editable values are the new values", equipmentType), dicNotedEditableProperties, dicEditablePropertiesAfterRefreshed);

                equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identity");
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }            
        }

        [Test, DynamicRetry]
        [Description("EI_18 Streetlight - Delete")]
        public void EI_18()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI18");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI18*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select a streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);

            Step("4. Verify Streetlight Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Click Remove icon button");
            equipmentInventoryPage.StreetlightEditorPanel.ClickDeleteButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("6. Verify A dialog with message 'Would you like to delete {{streetlight A's name}} equipment ?' appears");
            var expectedMessage = string.Format("Would you like to delete {0} equipment ?", streetlight);
            VerifyEqual("Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual(string.Format("6. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("7. Click No");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("8. Verify The dialog disappears");
            VerifyEqual("Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("9. Verify Streetlight Editor panel remains displaying");
            VerifyEqual("9. Verify Streetlight Editor panel remains displaying", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("10. Verify Streetlight A is still remained selected in Geozone Tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("10. Verify Streetlight '{0}' is still remained selected in Geozone Tree", streetlight), streetlight, selectedNodeName);

            Step("11. Click Remove icon button again");
            equipmentInventoryPage.StreetlightEditorPanel.ClickDeleteButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("12. Verify A dialog with message 'Would you like to delete {{streetlight A's name}} equipment ?' appears again");
            VerifyEqual("Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual(string.Format("12. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("13. Click Yes");
            equipmentInventoryPage.Dialog.ClickYesButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForHeaderMessageDisappeared();

            Step("14. Verify The dialog disappears");
            VerifyEqual("Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("15. Verify Streetlight Editor panel disappears");
            VerifyEqual("15. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("16. Verify Streetlight A is no longer present in its parent geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Streetlight);
            VerifyEqual(string.Format("16. Verify Streetlight '{0}' is no longer present in its parent geozone '{1}'", streetlight, geozone), false, subNodesList.Exists(p => p.Equals(streetlight)));

            Step("17. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("18. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("19. Browse to the Streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("20. Verify Streetlight A is not present in its parent geozone");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Streetlight);
            VerifyEqual(string.Format("20. Verify Streetlight '{0}' is not present in its parent geozone '{1}'", streetlight, geozone), false, subNodesList.Exists(p => p.Equals(streetlight)));

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_19 Streetlight - Duplicate")]
        public void EI_19()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI19");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = string.Format("STL{0}DUP", DateTime.Now.Timestamp());
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI19*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select a streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);

            Step("4. Verify Streetlight Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Note tabs, expandable sections and all values in the editor of the streetlight, both editable and readonly ones");
            var expectedTabsList = equipmentInventoryPage.StreetlightEditorPanel.GetListOfTabsName();
            var expectedGroupsList = equipmentInventoryPage.StreetlightEditorPanel.GetListOfGroupsName();
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroupsActiveTab();
            //Identity of the light point
            var controllerId = equipmentInventoryPage.StreetlightEditorPanel.GetControllerIdValue();
            var readonlyIdentifier = equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue();
            //Control system
            var typeOfEquipment = equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentValue();
            var dimmingGroup = equipmentInventoryPage.StreetlightEditorPanel.GetDimmingGroupValue();
            var uniqueAddress = equipmentInventoryPage.StreetlightEditorPanel.GetUniqueAddressValue();
            var controllerInstallDate = equipmentInventoryPage.StreetlightEditorPanel.GetControllerInstallDateValue();
            var installStatus = equipmentInventoryPage.StreetlightEditorPanel.GetInstallStatusValue();
            var serialNumber = equipmentInventoryPage.StreetlightEditorPanel.GetSerialNumberValue();
            var deviceHwVersion = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceHwVersionValue();
            var deviceSwVersion = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceSwVersionValue();
            var deviceHwType = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceHwTypeValue();
            var nicSerialNumber = equipmentInventoryPage.StreetlightEditorPanel.GetNicSerialNumberValue();
            var nicHwVersion = equipmentInventoryPage.StreetlightEditorPanel.GetNicHwVersionValue();
            var nicSwVersion = equipmentInventoryPage.StreetlightEditorPanel.GetNicSwVersionValue();
            var nicHwModel = equipmentInventoryPage.StreetlightEditorPanel.GetNicHwModelValue();
            var nicFallbackMode = equipmentInventoryPage.StreetlightEditorPanel.GetNicFallbackModeValue();
            var manufactoringDate = equipmentInventoryPage.StreetlightEditorPanel.GetManufactoringDateValue();
            var deviceName = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceNameValue();
            var deviceManufactorer = equipmentInventoryPage.StreetlightEditorPanel.GetDeviceManufacturerValue();
            var utilityId = equipmentInventoryPage.StreetlightEditorPanel.GetUtilityIdValue();
            var meterProgramId = equipmentInventoryPage.StreetlightEditorPanel.GetMeterProgramIdValue();
            var catalogNumber = equipmentInventoryPage.StreetlightEditorPanel.GetCatalogNumberValue();
            var readonlyConfigStatus = equipmentInventoryPage.StreetlightEditorPanel.GetConfigStatusValue();
            var readonlyConfigStatusMessage = equipmentInventoryPage.StreetlightEditorPanel.GetConfigStatusMessageValue();
            var readonlyCommunicationStatus = equipmentInventoryPage.StreetlightEditorPanel.GetCommunicationStatusValue();
            var reference = equipmentInventoryPage.StreetlightEditorPanel.GetReferenceValue();
            var elexonChargeCode = equipmentInventoryPage.StreetlightEditorPanel.GetElexonChargeCodeValue();
            var timeout = equipmentInventoryPage.StreetlightEditorPanel.GetTimeoutValue();
            var retries = equipmentInventoryPage.StreetlightEditorPanel.GetRetriesValue();
            var readonlyLastEventLogSequence = equipmentInventoryPage.StreetlightEditorPanel.GetLastEventLogSequenceValue();
            var readonlyLastEventRequestTime = equipmentInventoryPage.StreetlightEditorPanel.GetLastEventRequestTimeValue();
            var readonlyLastMeterLogSequence = equipmentInventoryPage.StreetlightEditorPanel.GetLastMeterLogSequenceValue();
            var readonlyLastMeterRequestTime = equipmentInventoryPage.StreetlightEditorPanel.GetLastMeterRequestTimeValue();
            var isCpd = equipmentInventoryPage.StreetlightEditorPanel.GetIsCpdValue();
            var readonlyLastImuLogSequence = equipmentInventoryPage.StreetlightEditorPanel.GetLastImuLogSequenceValue();
            var readonlyLastImuRequestTime = equipmentInventoryPage.StreetlightEditorPanel.GetLastImuRequestTimeValue();

            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroupsActiveTab();
            //Location
            var premise = equipmentInventoryPage.StreetlightEditorPanel.GetPremiseValue();
            var address1 = equipmentInventoryPage.StreetlightEditorPanel.GetAddress1Value();
            var address2 = equipmentInventoryPage.StreetlightEditorPanel.GetAddress2Value();
            var city = equipmentInventoryPage.StreetlightEditorPanel.GetCityValue();
            var zipCode = equipmentInventoryPage.StreetlightEditorPanel.GetZipCodeValue();
            var mapNumber = equipmentInventoryPage.StreetlightEditorPanel.GetMapNumberValue();
            var locationType = equipmentInventoryPage.StreetlightEditorPanel.GetLocationTypeValue();
            var utilityLocationId = equipmentInventoryPage.StreetlightEditorPanel.GetUtilityLocationIdValue();
            var pictureFilePath = equipmentInventoryPage.StreetlightEditorPanel.GetPictureFilePathValue();
            //Customer
            var accountNumber = equipmentInventoryPage.StreetlightEditorPanel.GetAccountNumberValue();
            var customerNumber = equipmentInventoryPage.StreetlightEditorPanel.GetCustomerNumberValue();
            var customerName = equipmentInventoryPage.StreetlightEditorPanel.GetCustomerNameValue();
            //Lamp
            var lampType = equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue();
            var lampWattage = equipmentInventoryPage.StreetlightEditorPanel.GetLampWattageValue();
            var fixedSavedPower = equipmentInventoryPage.StreetlightEditorPanel.GetFixedSavedPowerValue();
            var lampInstallDate = equipmentInventoryPage.StreetlightEditorPanel.GetLampInstallDateValue();
            var powerFactorThreshold = equipmentInventoryPage.StreetlightEditorPanel.GetPowerFactorThresholdValue();
            var onLuxLevel = equipmentInventoryPage.StreetlightEditorPanel.GetOnLuxLevelValue();
            var offLuxLevel = equipmentInventoryPage.StreetlightEditorPanel.GetOffLuxLevelValue();
            //Driver or ballast
            var ballastType = equipmentInventoryPage.StreetlightEditorPanel.GetBallastTypeValue();
            var dimmingInterface = equipmentInventoryPage.StreetlightEditorPanel.GetDimmingInterfaceValue();
            var ballastBrand = equipmentInventoryPage.StreetlightEditorPanel.GetBallastBrandValue();
            var poleHeadInstall = equipmentInventoryPage.StreetlightEditorPanel.GetPoleHeadInstallValue();
            //Luminaire
            var luminaireBrand = equipmentInventoryPage.StreetlightEditorPanel.GetLuminaireBrandValue();
            var luminaireType = equipmentInventoryPage.StreetlightEditorPanel.GetLuminaireTypeValue();
            var luminaireModel = equipmentInventoryPage.StreetlightEditorPanel.GetLuminaireModelValue();
            var lightDistribution = equipmentInventoryPage.StreetlightEditorPanel.GetLightDistributionValue();
            var orientation = equipmentInventoryPage.StreetlightEditorPanel.GetOrientationValue();
            var colorCode = equipmentInventoryPage.StreetlightEditorPanel.GetColorCodeValue();
            var status = equipmentInventoryPage.StreetlightEditorPanel.GetStatusValue();
            var luminaireInstallDate = equipmentInventoryPage.StreetlightEditorPanel.GetLuminaireInstallDateValue();
            //Bracket
            var bracketBrand = equipmentInventoryPage.StreetlightEditorPanel.GetBracketBrandValue();
            var bracketModel = equipmentInventoryPage.StreetlightEditorPanel.GetBracketModelValue();
            var bracketType = equipmentInventoryPage.StreetlightEditorPanel.GetBracketTypeValue();
            var bracketColor = equipmentInventoryPage.StreetlightEditorPanel.GetBracketColorValue();
            //Pole or support
            var poleType = equipmentInventoryPage.StreetlightEditorPanel.GetPoleTypeValue();
            var poleHeight = equipmentInventoryPage.StreetlightEditorPanel.GetPoleHeightValue();
            var poleShape = equipmentInventoryPage.StreetlightEditorPanel.GetPoleShapeValue();
            var poleMaterial = equipmentInventoryPage.StreetlightEditorPanel.GetPoleMaterialValue();
            var poleColorCode = equipmentInventoryPage.StreetlightEditorPanel.GetPoleColorCodeValue();
            var poleStatus = equipmentInventoryPage.StreetlightEditorPanel.GetPoleStatusValue();
            var typeOfGroundFixing = equipmentInventoryPage.StreetlightEditorPanel.GetTypeGroundFixingValue();
            var poleInstallDate = equipmentInventoryPage.StreetlightEditorPanel.GetPoleInstallDateValue();
            //Comment
            var comment = equipmentInventoryPage.StreetlightEditorPanel.GetCommentValue();

            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroupsActiveTab();
            var energySupplier = equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue();
            var networkType = equipmentInventoryPage.StreetlightEditorPanel.GetNetworkTypeValue();
            var supplyVoltage = equipmentInventoryPage.StreetlightEditorPanel.GetSupplyVoltageValue();
            var cabinet = equipmentInventoryPage.StreetlightEditorPanel.GetCabinetValue();
            var transformer = equipmentInventoryPage.StreetlightEditorPanel.GetTransformerValue();
            var feederNumber = equipmentInventoryPage.StreetlightEditorPanel.GetFeederNumberValue();
            var switchValue = equipmentInventoryPage.StreetlightEditorPanel.GetSwitchValue();
            var substation = equipmentInventoryPage.StreetlightEditorPanel.GetSubstationValue();
            var segment = equipmentInventoryPage.StreetlightEditorPanel.GetSegmentValue();
            var section = equipmentInventoryPage.StreetlightEditorPanel.GetSectionValue();
            var highVoltageThreshold = equipmentInventoryPage.StreetlightEditorPanel.GetHighVoltageThresholdValue();
            var lowVoltageThreshold = equipmentInventoryPage.StreetlightEditorPanel.GetLowVoltageThresholdValue();

            Step("6. Click Duplicate button");
            equipmentInventoryPage.StreetlightEditorPanel.ClickDuplicateButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForDuplicateEquipmentPanelDisplayed();

            Step("7. Verify Duplicate equipment panel appears");
            VerifyEqual("7. Verify Duplicate equipment panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsDuplicateEquipmentPanelDisplayed());

            Step("8. Verify The first line in the panel is streetlight icon and text 'STREETLIGHT'");
            VerifyEqual("8. Verify The first line in the panel is streetlight icon", true, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.CheckIfDeviceIcon(DeviceType.Streetlight));
            VerifyEqual("8. Verify text is 'STREETLIGHT'", "STREETLIGHT", equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetDeviceCaptionText());

            Step("9. Verify Streetlight name property has a label whose text is 'Name' and an input whose value is the name of streetlight A");
            VerifyEqual("Verify Streetlight name property has a label whose text is 'Name'", "Name", equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetNameText());
            VerifyEqual(string.Format("9. Verify an input whose value is '{0}'", streetlight), streetlight, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetNameValue());

            Step("10. Verify Next to Name field is a numeric up down input with value filled (so called Counter input)");
            VerifyEqual("10. Verify Next to Name field is a numeric up down input", true, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.IsCounterNumericUpDownInput());
            VerifyEqual("10. Verify input with value filled", true, !string.IsNullOrEmpty(equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetCountValue()));

            Step("11. Verify There is no entry in device list and barcode section is not displayed");
            VerifyEqual("11. Verify There is no entry in device list", true, !equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetListOfDuplicatedDevicesName().Any());
            VerifyEqual("11. Verify barcode section is not displayed", false, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.IsBarcodeSectionDisplayed());

            Step("12. Verify Map recorder panel appears with text 'Click on the map to position a new device. Click here to stop.'");
            VerifyEqual("12. Verify Map recorder panel appears", true, equipmentInventoryPage.Map.IsRecorderDisplayed());
            VerifyEqual("12. Verify Map recorder text is 'Click on the map to position a new device. Click here to stop.'", "Click on the map to position a new device. Click here to stop.", equipmentInventoryPage.Map.GetRecorderText());

            Step("13. Click Cancel section on map recorder panel");
            equipmentInventoryPage.Map.ClickRecorderCancelButton();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForDuplicateEquipmentPanelDisappeared();

            Step("14. Verify Map recorder panel disappears");
            VerifyEqual("14. Verify Map recorder panel disappears", false, equipmentInventoryPage.Map.IsRecorderDisplayed());

            Step("15. Verify Duplicate equipment panel disappears");
            VerifyEqual("15. Verify Duplicate equipment panel appears", false, equipmentInventoryPage.StreetlightEditorPanel.IsDuplicateEquipmentPanelDisplayed());

            Step("16. Verify Streetlight editor panel appears back");
            VerifyEqual("16. Verify Streetlight Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("17. Verify Streetlight A is still being selected in geozone and map");
            VerifyEqual("17. Verify The Streetlight is being selected in geozone tree", streetlight, equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName());
            equipmentInventoryPage.Map.MoveToSelectedDeviceGL();
            VerifyEqual("17. Verify The Streetlight is being selected in map", streetlight, equipmentInventoryPage.Map.GetDeviceNameGL());

            Step("18. Repeat steps from #6 to #12");
            equipmentInventoryPage.StreetlightEditorPanel.ClickDuplicateButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForDuplicateEquipmentPanelDisplayed();

            Step("--> Verify Duplicate equipment panel appears");
            VerifyEqual("18. Verify Duplicate equipment panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsDuplicateEquipmentPanelDisplayed());

            Step("--> Verify The first line in the panel is streetlight icon and text 'STREETLIGHT'");
            VerifyEqual("18. Verify The first line in the panel is streetlight icon", true, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.CheckIfDeviceIcon(DeviceType.Streetlight));
            VerifyEqual("18. Verify text is 'STREETLIGHT'", "STREETLIGHT", equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetDeviceCaptionText());

            Step("--> Verify Streetlight name property has a label whose text is 'Name' and an input whose value is the name of streetlight A");
            VerifyEqual("18. Verify Streetlight name property has a label whose text is 'Name'", "Name", equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetNameText());
            VerifyEqual(string.Format("18. Verify an input whose value is '{0}'", streetlight), streetlight, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetNameValue());

            Step("--> Verify Next to Name field is a numeric up down input with value filled (so called Counter input)");
            VerifyEqual("18. Verify Next to Name field is a numeric up down input", true, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.IsCounterNumericUpDownInput());
            VerifyEqual("18. Verify input with value filled", true, !string.IsNullOrEmpty(equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetCountValue()));

            Step("--> Verify There is no entry in device list and barcode section is not displayed");
            VerifyEqual("18. Verify There is no entry in device list", true, !equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetListOfDuplicatedDevicesName().Any());
            VerifyEqual("18. Verify barcode section is not displayed", false, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.IsBarcodeSectionDisplayed());

            Step("--> Verify Map recorder panel appears with text 'Click on the map to position a new device. Click here to stop.'");
            VerifyEqual("Verify Map recorder panel appears", true, equipmentInventoryPage.Map.IsRecorderDisplayed());
            VerifyEqual("Verify Map recorder text is 'Click on the map to position a new device. Click here to stop.'", "Click on the map to position a new device. Click here to stop.", equipmentInventoryPage.Map.GetRecorderText());

            Step("19. Note the value of Counter");
            var listDuplicatedionSL = new List<string>();
            var counter = int.Parse(equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetCountValue());
            var duplicatedName = string.Format("{0}{1}", streetlight, counter);

            Step("20. Click on the map to place the new device");
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("21. Verify Duplicate equipment panel appears");
            VerifyEqual("21. Verify Duplicate equipment panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsDuplicateEquipmentPanelDisplayed());

            Step("22. Verify Name and Counter input fields are disabled. Counter's value increases 1");
            VerifyEqual("22. Verify Name input field is disabled", true, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.IsNameInputReadOnly());
            VerifyEqual("22. Verify Counter input field is disabled", true, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.IsCounterInputReadOnly());
            VerifyEqual("22. Verify Counter's value increases 1", counter + 1, int.Parse(equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetCountValue()));

            Step(string.Format("23. Verify There is one (more) entry added in device list with name '{0}'", duplicatedName));
            var deviceList = equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetListOfDuplicatedDevicesName();
            VerifyEqual(string.Format("23. Verify device list has '{0}'", duplicatedName), true, deviceList.Any(p => p.Equals(duplicatedName)));
            listDuplicatedionSL.Add(duplicatedName);

            Step("24. Verify Barcode section is displayed. Barcode section displays an input field and OK button");
            VerifyEqual("24. Verify Barcode section is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.IsBarcodeSectionDisplayed());
            VerifyEqual("24. Verify Barcode section displays an input field", true, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.IsBarcodeInputDisplayed());
            VerifyEqual("24. Verify Barcode section displays OK button", true, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.IsBarcodeOkButtonDisplayed());

            Step("25. Repeat steps from #19 to the end a couple of times to have more duplicates");
            Step("26. Verify The same expectation of repeated steps");
            for (int i = 0; i < 3; i++)
            {
                counter = int.Parse(equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetCountValue());
                duplicatedName = string.Format("{0}{1}", streetlight, counter);

                Step("--> Click on the map to place the new device");
                equipmentInventoryPage.Map.ClickRandomPoint();
                equipmentInventoryPage.WaitForPreviousActionComplete();

                Step("--> Verify Duplicate equipment panel appears");
                VerifyEqual("26. Verify Duplicate equipment panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsDuplicateEquipmentPanelDisplayed());

                Step("--> Verify Name and Counter input fields are disabled. Counter's value increases 1");
                VerifyEqual("26. Verify Name input field is disabled", true, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.IsNameInputReadOnly());
                VerifyEqual("26. Verify Counter input field is disabled", true, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.IsCounterInputReadOnly());
                VerifyEqual("26. Verify Counter's value increases 1", counter + 1, int.Parse(equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetCountValue()));

                Step(string.Format("--> Verify There is one (more) entry added in device list with name '{0}'", duplicatedName));
                deviceList = equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.GetListOfDuplicatedDevicesName();
                VerifyEqual(string.Format("26. Verify device list has '{0}'", duplicatedName), true, deviceList.Any(p => p.Equals(duplicatedName)));
                listDuplicatedionSL.Add(duplicatedName);

                Step("--> Verify Barcode section is displayed. Barcode section displays an input field and OK button");
                VerifyEqual("26. Verify Barcode section is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.IsBarcodeSectionDisplayed());
                VerifyEqual("26. Verify Barcode section displays an input field", true, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.IsBarcodeInputDisplayed());
                VerifyEqual("26. Verify Barcode section displays OK button", true, equipmentInventoryPage.StreetlightEditorPanel.DuplicateEquipmentPanel.IsBarcodeOkButtonDisplayed());
            }

            Step("27. Select each duplicate streetlight");
            Step("28. Verify Tabs, expandable sections and all values (except Unique address, Utility ID)  of each are the same as noted at step #5");
            Step("29. Verify Unique address, Utility ID (SLV-1499) of duplicates should be empty");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            var allStreetlightsInSelectedGeozone = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Streetlight);
            foreach (var dupStreetlight in listDuplicatedionSL)
            {
                if (allStreetlightsInSelectedGeozone.Exists(p => p.Equals(dupStreetlight)))
                {
                    Step(string.Format("--> Verify values of '{0}'", dupStreetlight));
                    equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(dupStreetlight);
                    equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

                    var tabsList = equipmentInventoryPage.StreetlightEditorPanel.GetListOfTabsName();
                    var groupsList = equipmentInventoryPage.StreetlightEditorPanel.GetListOfGroupsName();
                    VerifyEqual("Verify Tabs as expected", expectedTabsList, tabsList);
                    VerifyEqual("Verify Groups as expected", expectedGroupsList, groupsList);

                    VerifyStreetlightReadOnlyValuesAreUnchanged(equipmentInventoryPage, equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue(), readonlyConfigStatus, readonlyConfigStatusMessage, readonlyCommunicationStatus
                     , readonlyLastEventLogSequence, readonlyLastEventRequestTime, readonlyLastImuLogSequence, readonlyLastMeterRequestTime, readonlyLastImuLogSequence, readonlyLastImuRequestTime);
                    VerifyStreetlightEditableValues(equipmentInventoryPage
                       , controllerId, dimmingGroup, string.Empty, controllerInstallDate, installStatus, serialNumber, deviceHwVersion, deviceSwVersion, deviceHwType, nicSerialNumber, nicHwVersion, nicSwVersion
                       , nicHwModel, nicFallbackMode, manufactoringDate, deviceName, deviceManufactorer, string.Empty, meterProgramId, catalogNumber, elexonChargeCode, timeout, retries, isCpd
                       , premise, address1, address2, city, zipCode, mapNumber, locationType, utilityLocationId
                       , accountNumber, customerNumber, customerName, lampType, lampWattage, fixedSavedPower, lampInstallDate, powerFactorThreshold, onLuxLevel, offLuxLevel
                       , ballastType, dimmingInterface, ballastBrand, poleHeadInstall, luminaireBrand, luminaireType, luminaireModel, lightDistribution, orientation, colorCode, status, luminaireInstallDate
                       , bracketBrand, bracketModel, bracketType, bracketColor, poleType, poleHeight, poleShape, poleMaterial, poleColorCode, poleStatus, typeOfGroundFixing, poleInstallDate, comment
                       , energySupplier, networkType, supplyVoltage, cabinet, transformer, feederNumber, switchValue, substation, segment, section, highVoltageThreshold, lowVoltageThreshold);

                    equipmentInventoryPage.DeleteCurrentDevice();
                }
                else
                    Warning(string.Format("[SC-1378] Equipment Inventory - Duplicated device '{0}' is not immediately visible in the geozone tree", streetlight));
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_20 Streetlight - Commission")]
        public void EI_20()
        {
            var testData = GetTestDataOfEI_20();
            var controllerId = testData["ControllerId"];
            var controllerName = testData["ControllerName"];
            var geozone = SLVHelper.GenerateUniqueName("GZNEI20");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);
            var expectedSections = new List<string> { "Check database configuration", "Commissioning" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create streetlight using Smartsims/Smartsims commission");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI20*");
            CreateNewGeozone(geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controllerId, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select streetlight A (whose control technology supports commission)");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);

            Step("4. Verify Streetlight Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Click Commission button");
            equipmentInventoryPage.StreetlightEditorPanel.ClickCommissionButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForCommissionPanelDisplayed();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("6. Verify Commission panel appears");
            VerifyEqual("Verify Commission panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsCommissionPanelDisplayed());
            
            Step("7. Verify Commissioning results are displayed: there are 2 sections 'Check database configuration' and 'Commissioning'");
            var actualSections = equipmentInventoryPage.StreetlightEditorPanel.CommissionPanel.GetListOfSections();
            VerifyEqual("8. Verify Commissioning results are displayed: there are 2 sections 'Check database configuration' and 'Commissioning'", expectedSections, actualSections, false);

            Step("8. Verify Under each section is a list of details which contains at least 1 line. Each line has an icon Passed and text");
            VerifyEqual("8. Verify Each line has an icon Passed and text", true, equipmentInventoryPage.StreetlightEditorPanel.CommissionPanel.AreMessagesContainingIconPassedAndText());

            Step("9. Click Back");
            equipmentInventoryPage.StreetlightEditorPanel.CommissionPanel.ClickBackButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForCommissionPanelDisappeared();

            Step("10. Verify Commission panel disappears");
            VerifyEqual("10. Verify Commission panel disappears", false, equipmentInventoryPage.StreetlightEditorPanel.IsCommissionPanelDisplayed());

            Step("11. Verify Controller Editor panel appears back");
            VerifyEqual("11. Verify Controller Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_21 Streetlight - Replace Lamp")]
        public void EI_21()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI21");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a new streetlight.");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI21*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("2. Select new streetlight");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("3. Press Replace Lamp button");
            equipmentInventoryPage.StreetlightEditorPanel.ClickReplaceLampButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("4. Verify the message pop-up displayed");
            Step(" o Would you like to replace the lamp of 'name of streetlight' ?");
            var expectedMessage = string.Format("Would you like to replace the lamp of '{0}' ?", streetlight);
            VerifyEqual("4. Verify the message pop-up displayed as expected", expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("5. Press No button on the message pop-up");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("6. Verify The message is closed");
            VerifyEqual("6. Verify The message is closed", true, !equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("7. Press Replace Lamp button again");
            equipmentInventoryPage.StreetlightEditorPanel.ClickReplaceLampButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("8. Press Yes button on the message pop-up");
            equipmentInventoryPage.Dialog.ClickYesButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("9. Verify The message pop-up displayed");
            Step(" o The lamp 'name of streetlight' is successfully replaced.");
            expectedMessage = string.Format("The lamp '{0}' is successfully replaced.", streetlight);
            VerifyEqual("9. Verify the message pop-up displayed as expected", expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("10. Press OK button");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("11. Verify The message pop-up is closed");
            VerifyEqual("11. Verify The message is closed", true, !equipmentInventoryPage.IsPopupDialogDisplayed());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_22 Streetlight - Replace Node")]
        public void EI_22()
        {
            var testData = GetTestDataOfEI_22();
            var controllerId = testData["ControllerId"];
            var controllerName = testData["ControllerName"];
            var geozone = SLVHelper.GenerateUniqueName("GZNEI22");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);
            var validMacAddress1 = SLVHelper.GenerateMACAddress();
            var validMacAddress2 = SLVHelper.GenerateMACAddress();

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a new streetlight with Type of equipment: LRL Lumen IQ Node using Smartsims/Smartsims commission.");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI22*");
            CreateNewGeozone(geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controllerId, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("2. Select new streetlight");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("3. Press Replace Node button");
            equipmentInventoryPage.StreetlightEditorPanel.ClickReplaceNodeButton();
            if (Browser.Name.Equals("IE"))
            {
                Wait.ForSeconds(5); //wait for replace node panel displayed
                if (!equipmentInventoryPage.StreetlightEditorPanel.IsReplaceNodePanelDisplayed())
                {
                    Warning("Bug #1281995: Equipment Inventory - Replace Node does not work on IE11");
                    DeleteDevice(controllerId, streetlight);
                    return;
                }                
            }
            else
                equipmentInventoryPage.StreetlightEditorPanel.WaitForReplaceNodePanelDisplayed();

            Step("4. Verify the new UI panel displays with");
            Step(" o Unique address textbox is empty");
            Step(" o Save icon");
            VerifyEqual("4. Verify Unique address textbox is empty", "", equipmentInventoryPage.StreetlightEditorPanel.ReplaceNodePanel.GetUniqueAddressValue());
            VerifyEqual("4. Verify Unique Save icon is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.ReplaceNodePanel.IsSaveIconDisplayed());

            Step("5. Press Close button");
            equipmentInventoryPage.StreetlightEditorPanel.ReplaceNodePanel.ClickBackButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForReplaceNodePanelDisappeared();

            Step("6. Verify Replace Node panel is closed and Streetlight Editor panel displays");
            equipmentInventoryPage.StreetlightEditorPanel.IsReplaceNodePanelDisplayed();
            VerifyEqual("6. Verify Replace Node panel is closed", true, !equipmentInventoryPage.StreetlightEditorPanel.IsReplaceNodePanelDisplayed());
            VerifyEqual("6. Verify Streetlight Editor panel displays", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("7. Press Replace Node button again");
            equipmentInventoryPage.StreetlightEditorPanel.ClickReplaceNodeButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForReplaceNodePanelDisplayed();

            Step("8. Input a valid Unique Address into Unique address textbox");
            equipmentInventoryPage.StreetlightEditorPanel.ReplaceNodePanel.EnterUniqueAddressInput(validMacAddress1);

            Step("9. Press Save icon");
            equipmentInventoryPage.StreetlightEditorPanel.ReplaceNodePanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForReplaceNodePanelDisappeared();            
            if (equipmentInventoryPage.HasPopupDialogDisplayed())
            {
                Warning("Bug #1332468: Replace Node is done multiple times at once");
                equipmentInventoryPage.Dialog.ClickOkButton();
                equipmentInventoryPage.WaitForPopupDialogDisappeared();
            }

            Step("10. Verify Replace Node process is completed.");
            Step(" o Replace Node panel is close");
            Step(" o Unique Address in Streetlight Editor panel is updated with new value and READ-ONLY");
            VerifyEqual("10. Verify Replace Node panel is closed", true, !equipmentInventoryPage.StreetlightEditorPanel.IsReplaceNodePanelDisplayed());
            VerifyEqual("10. Verify Unique Address in Streetlight Editor panel is updated", validMacAddress1, equipmentInventoryPage.StreetlightEditorPanel.GetUniqueAddressValue());
            VerifyEqual("10. Verify Unique Address in Streetlight Editor panel is READ-ONLY", true, equipmentInventoryPage.StreetlightEditorPanel.IsUniqueAddressReadOnly());

            Step("11. Press Replace Node button again");
            equipmentInventoryPage.StreetlightEditorPanel.ClickReplaceNodeButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForReplaceNodePanelDisplayed();

            Step("12. Verify Replace Node panel appears with");
            Step(" o Unique address textbox is set the new value.");
            VerifyEqual("12. Verify Unique address textbox is set the new value", validMacAddress1, equipmentInventoryPage.StreetlightEditorPanel.ReplaceNodePanel.GetUniqueAddressValue());

            Step("13. Update Unique Address to the new value, and press Save");
            equipmentInventoryPage.StreetlightEditorPanel.ReplaceNodePanel.EnterUniqueAddressInput(validMacAddress2);
            equipmentInventoryPage.StreetlightEditorPanel.ReplaceNodePanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForReplaceNodePanelDisappeared();

            Step("14. Verify Replace Node process is completed.");
            Step(" o Replace Node panel is close");
            Step(" o Unique Address in Streetlight Editor panel is updated with new value and READ-ONLY");
            VerifyEqual("14. Verify Replace Node panel is closed", true, !equipmentInventoryPage.StreetlightEditorPanel.IsReplaceNodePanelDisplayed());
            VerifyEqual("14. Verify Unique Address in Streetlight Editor panel is updated with new value", validMacAddress2, equipmentInventoryPage.StreetlightEditorPanel.GetUniqueAddressValue());
            VerifyEqual("14. Verify Unique Address in Streetlight Editor panel is READ-ONLY", true, equipmentInventoryPage.StreetlightEditorPanel.IsUniqueAddressReadOnly());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_23 Streetlight - Lamp Type Editor - View")]
        public void EI_23()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI23");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI23*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select streetlight A (streetlight A should be created during this test to make sure its lamp type is empty)");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Streetlight Editor panel appears");
            VerifyEqual("4. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Inventory tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");

            Step("6. Verify Value of lamp type is empty");
            VerifyEqual("6. Verify Value of lamp type is empty", "Select a value", equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue());

            Step("7. Note list of lamp types");
            var lampTypeList = equipmentInventoryPage.StreetlightEditorPanel.GetListOfLampTypes();

            Step("8. Click Edit icon next to Lamp Type dropdown");
            equipmentInventoryPage.StreetlightEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.WaitForPropertiesSectionDisappeared();

            Step("9. Verify Lamp Type Editor panel appears");
            VerifyEqual("9. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsLampTypePanelDisplayed());

            Step("10. Verify Lamp Type Editor panel has title 'Lamp Types', Import and Add buttons");
            VerifyEqual("10. Verify Lamp Type Editor panel has title 'Lamp Types'", "Lamp Types", equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetPanelTitleText());
            VerifyEqual("10. Verify Import and Add buttons are displayed", true, equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.IsImportButtonDisplayed() && equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.IsAddButtonDisplayed());

            Step("11. Verify List of lamp types in the editor = list of ones noted at step #7");
            var actualLampTypesList = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetListOfLampTypes();
            VerifyEqual("11. Verify List of lamp types in the editor = list of ones noted at step #7", lampTypeList, actualLampTypesList, false);

            Step("12. Verify There is no lamp type in the list being selected");
            VerifyEqual("12. Verify There is no lamp type in the list being selected", false, equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.HasSelectedLampType());

            Step("13. Verify Save button and editing layout of Properties section of a selected lamp type are not visible");
            VerifyEqual("13. Verify Save button is not displayed", false, equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.IsSaveButtonDisplayed());
            VerifyEqual("13. Verify Properties section of a selected lamp type are not visible", false, equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.IsPropertiesSectionDisplayed());

            Step("14. Click Close button");
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.ClickBackButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForLampTypePanelDisappeared();

            Step("15. Verify Lamp Type Editor panel disappears");
            VerifyEqual("15. Verify Lamp Type Editor panel disappears", false, equipmentInventoryPage.StreetlightEditorPanel.IsLampTypePanelDisplayed());

            Step("16. Verify Streetlight Editor panel appears back");
            VerifyEqual("16. Verify Streetlight Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("17. Verify Value of lamp type is still empty");
            VerifyEqual("17. Verify Value of lamp type is still empty", "Select a value", equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue());

            Step("18. Select a value for lamp type");
            var lampType = lampTypeList.PickRandom();
            equipmentInventoryPage.StreetlightEditorPanel.SelectLampTypeDropDown(lampType);

            Step("19. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("20. Verify Streetlight Editor panel disappears");
            VerifyEqual("20. Verify Streetlight Editor panel appears back", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("21. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("22. Verify Streetlight Editor panel appears back");
            VerifyEqual("22. Verify Streetlight Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("23. Select Inventory tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");

            Step("24. Verify Value of lamp type is remained to be the selected value");
            VerifyEqual(string.Format("24. Verify Value of lamp type is '{0}'", lampType), lampType, equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue());

            Step("25. Click Edit icon next to Lamp Type dropdown");
            equipmentInventoryPage.StreetlightEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.WaitForPropertiesSectionDisplayed();

            Step("26. Verify Lamp Type Editor panel appears");
            VerifyEqual("26. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsLampTypePanelDisplayed());

            Step("27. Verify The selected lamp type in streetlight editor panel is being selected in Lamp Type Editor panel");
            VerifyEqual(string.Format("27. Verify The selected lamp type in Lamp Type Editor panel is '{0}'", lampType), lampType, equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetSelectedLampType());

            Step("28. Verify Remove button for the selected lamp type is visible");
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.ScrollToSelectedLampType();
            VerifyEqual("28. Verify Remove button for the selected lamp type is visible", true, equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.IsSelectedLampTypeRemoveButtonDisplayed());

            Step("29. Verify Save button and editing layouts are visible in Properties section");
            VerifyEqual("29. Verify Save button is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.IsSaveButtonDisplayed());
            VerifyEqual("29. Verify editing layouts are visible in Properties section", true, equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.IsPropertiesSectionDisplayed());

            Step("30. Verify Editing layout contains fields:");
            Step(" o Name: label is 'Name', value is name of the selected lamp type");
            Step(" o Identifier: label is 'Identifier', value is not empty");
            Step(" o Default lamp wattage: label is 'Default lamp Wattage', value is a number");
            Step(" o Default warmup time: label is 'Default warmup time', value is a number");
            Step(" o Default I Level 1 min: label is 'Default I Level 1 min', value is a number");
            Step(" o Default I Level 1 max: label is 'Default I Level 1 max', value is a number");
            Step(" o Default I Level 2 min: label is 'Default I Level 2 min', value is a number");
            Step(" o Default I Level 2 max: label is 'Default I Level 2 max', value is a number");
            Step(" o Default I no: label is 'Default I no', value is a number");
            Step(" o Default I PF min: label is 'Default I PF min', value is a number");
            Step(" o Default V no: label is 'Default V no', value is a number");
            Step(" o Default V min: label is 'Default V min', value is a number");
            Step(" o Default V max: label is 'Default V max', value is a number");
            Step(" o Default min output: label is 'Default min output', value is a number");
            Step(" o Default control V max: label is 'Default control V max', value is a number");
            Step(" o Default BH max: label is 'Default BH max', value is a number");
            Step(" o Default power max: label is 'Default power max', value is a number");
            Step(" o Default CLO hours 1% increment: label is 'Default CLO hours 1% increment', value is a number");
            Step(" o Default CLO initial value: label is 'Default CLO initial value', value is a number");
            Step(" o Default interface: label is 'Default interface', value is one of items of a dropdown");
            VerifyLampTypePropetiesSection(equipmentInventoryPage, lampType);

            Step("31. Verify Identifier field is disabled and other fields are editable");
            VerifyEqual("31. Verify Identifier field is disabled", true, equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.IsIdentifierInputReadOnly());
            VerifyEqual("31. Verify Other fields are editable", true, equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.AreInputsEditable());
            VerifyEqual("31. Verify Interface field is editable", true, !equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.IsInterfaceDropDownReadOnly());

            Step("32. Select another lamp type");
            lampType = lampTypeList.PickRandom();
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.SelectLampType(lampType);

            Step("33. Close Lamp Type Editor panel");
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.ClickBackButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForLampTypePanelDisappeared();

            Step("34. Verify Lamp Type Editor panel appears");
            VerifyEqual("34. Verify Lamp Type Editor panel appears", false, equipmentInventoryPage.StreetlightEditorPanel.IsLampTypePanelDisplayed());

            Step("35. Verify Streetlight Editor panel appears back");
            VerifyEqual("35. Verify Streetlight Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("36. Verify Value of lamp type is now the one selected later");
            VerifyEqual(string.Format("36. Verify Value of lamp type is '{0}'", lampType), lampType, equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue());

            Step("37. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("38. Verify Streetlight Editor panel disappears");
            VerifyEqual("38. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("39. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("40. Verify Streetlight Editor panel appears");
            VerifyEqual("40. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("41. Select Inventory tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");

            Step("42. Verify Value of lamp type is now the one selected later");
            VerifyEqual(string.Format("42. Verify Value of lamp type is '{0}'", lampType), lampType, equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue());

            Step("43. Refresh browser");
            Step("44. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("45. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("46. Verify Streetlight Editor panel appears");
            VerifyEqual("46. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("47. Select Inventory tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");

            Step("48. Verify Value of lamp type is now the one selected later");
            VerifyEqual(string.Format("48. Verify Value of lamp type is '{0}'", lampType), lampType, equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_23_01 Streetlight - Lamp Type Editor - Create")]
        public void EI_23_01()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI2301");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI2301*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Streetlight Editor panel appears");
            VerifyEqual("4. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Inventory tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");

            Step("6. Click Edit icon next to Lamp Type dropdown");
            equipmentInventoryPage.StreetlightEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.WaitForPropertiesSectionDisappeared();

            Step("7. Verify Lamp Type Editor panel appears");
            VerifyEqual("7. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsLampTypePanelDisplayed());

            Step("8. Click Add button");
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.ClickAddButton();
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.WaitForPropertiesSectionDisplayed();

            Step("9. Verify Fields in Properties section are reset:");
            Step(" o Name is filled with value starting with 'New Lamp Type'");
            Step(" o Identifier is editable and is filled with value 'Manufacturer/LampTechno/Power/BallastType'");
            Step(" o Default interface is is empty or filled with one of items in the dropdown");
            Step(" o Other values are filled with numbers");
            VerifyLampTypePropetiesSectionAddNew(equipmentInventoryPage);

            Step("10. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("11. Verify A dialog with title 'Error' and message 'Brand 'Manufacturer/LampTechno/Power/BallastType' already exists!' appears");
            VerifyEqual("11. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("11. Verify dialog title is 'Error'", "Error", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("11. Verify dialog message is ''Brand 'Manufacturer/LampTechno/Power/BallastType' already exists!'", "Brand 'Manufacturer/LampTechno/Power/BallastType' already exists!", equipmentInventoryPage.Dialog.GetMessageText());

            Step("12. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("13. Verify The dialog disappears");
            VerifyEqual("13. Verify A dialog appears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("14. Change values of all editable fields");
            EnterLampTypesPropertiesSectionValues(equipmentInventoryPage);

            var name = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetNameValue();
            var identifier = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetIdentifierValue();
            var lampWattage = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetLampWattageValue();
            var warmupTime = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetWarmupTimeValue();
            var iLevel1Min = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetILevel1MinValue();
            var iLevel1Max = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetILevel1MaxValue();
            var iLevel2Min = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetILevel2MinValue();
            var iLevel2Max = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetILevel2MaxValue();
            var iNo = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetINoValue();
            var pfMin = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetPfMinValue();
            var vNo = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetVNoValue();
            var vMin = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetVMinValue();
            var vMax = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetVMaxValue();
            var minOutputValue = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetMinOutputValueValue();
            var controlVoltMax = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetControlVoltMaxValue();
            var bhMax = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetBhMaxValue();
            var powerMax = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetPowerMaxValue();
            var cloHoursIncrement = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetCloHoursIncrementValue();
            var cloInitialValue = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetCloInitialValueValue();
            var interfaceValue = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetInterfaceValue();

            Step("15. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("16. Verify New values are applied");
            VerifyLampTypePropetiesSectionValues(equipmentInventoryPage, name, identifier, lampWattage, warmupTime, iLevel1Min, iLevel1Max, iLevel2Min, iLevel2Max
            , pfMin, iNo, vNo, vMin, vMax, minOutputValue, controlVoltMax, bhMax, powerMax, cloHoursIncrement, cloInitialValue, interfaceValue);

            Step("17. Verify A new entry with new name is appended into lamp type list");
            var listLampTypes = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetListOfLampTypes();
            VerifyEqual(string.Format("17. Verify Lamp type '{0}' is appended into lamp type list", name), true, listLampTypes.Contains(name));

            Step("18. Verify Select another lamp type then select the previous one");
            listLampTypes.Remove(name);
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.SelectLampType(listLampTypes.PickRandom());
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.SelectLampType(name);

            Step("19. Verify New values are remained applied");
            VerifyLampTypePropetiesSectionValues(equipmentInventoryPage, name, identifier, lampWattage, warmupTime, iLevel1Min, iLevel1Max, iLevel2Min, iLevel2Max
           , pfMin, iNo, vNo, vMin, vMax, minOutputValue, controlVoltMax, bhMax, powerMax, cloHoursIncrement, cloInitialValue, interfaceValue);

            Step("20. Close Lamp Type Editor panel");
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.ClickBackButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForLampTypePanelDisappeared();

            Step("21. Verify Lamp Type Editor panel disappears");
            VerifyEqual("21. Verify Lamp Type Editor panel disappears", false, equipmentInventoryPage.StreetlightEditorPanel.IsLampTypePanelDisplayed());

            Step("22. Verify Streetlight Editor panel appears back");
            VerifyEqual("22. Verify Streetlight Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("23. Verify Value of lamp type is the newly-created one");
            VerifyEqual(string.Format("23. Verify Value of lamp type is '{0}'", name), name, equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue());

            Step("24. Verify The newly created lamp type is present in the lamp type dropdown list");
            var lampTypes = equipmentInventoryPage.StreetlightEditorPanel.GetListOfLampTypes();
            VerifyEqual(string.Format("24. Verify Lamp type '{0}' is present in the lamp type dropdown list", name), true, lampTypes.Contains(name));

            Step("25. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("26. Verify Streetlight Editor panel disappears");
            VerifyEqual("26. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("27. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("28. Verify Streetlight Editor panel appears");
            VerifyEqual("28. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("29. Select Inventory tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");

            Step("30. Verify Value of lamp type is remained to be the new one");
            VerifyEqual(string.Format("30. Verify Value of lamp type is '{0}'", name), name, equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue());

            Step("31. Refresh browser");
            Step("32. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("33. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("34. Verify Streetlight Editor panel appears");
            VerifyEqual("34. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("35. Select Inventory tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");

            Step("36. Verify Value of lamp type is remained to be the new one");
            VerifyEqual(string.Format("36. Verify Value of lamp type is '{0}'", name), name, equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue());

            Step("37. Click Edit icon next to Lamp Type dropdown");
            equipmentInventoryPage.StreetlightEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.WaitForPropertiesSectionDisplayed();

            Step("38. Verify Lamp Type Editor panel appears");
            VerifyEqual("38. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsLampTypePanelDisplayed());

            Step("39. Verify The newly created lamp type is still present in lamp type list");
            listLampTypes = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetListOfLampTypes();
            VerifyEqual(string.Format("39. Verify Lamp type '{0}' is still present in lamp type list", name), true, listLampTypes.Contains(name));            
            
            try
            {
                DeleteGeozone(geozone);
                DeleteLampType(name);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_23_02 Streetlight - Lamp Type Editor - Update")]
        public void EI_23_02()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI2302");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI2302*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Streetlight Editor panel appears");
            VerifyEqual("Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Inventory tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");

            Step("6. Click Edit icon next to Lamp Type dropdown");
            equipmentInventoryPage.StreetlightEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.WaitForPropertiesSectionDisappeared();

            Step("7. Verify Lamp Type Editor panel appears");
            VerifyEqual("7. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsLampTypePanelDisplayed());

            Step("8. Select a lamp type in the list");
            var listLampTypes = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetListOfLampTypes();
            var lampType = listLampTypes.PickRandom();
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.SelectLampType(lampType);
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.WaitForPropertiesSectionDisplayed();

            Step("9. Verify Fields in Properties section are populated:");
            Step(" o Name is filled with name of the selected one");
            Step(" o Identifier is disabled and is filled with identifier of the selected one");
            Step(" o Default interface is filled with one of items in the dropdown");
            Step(" o Other values are filled with numbers");
            VerifyLampTypePropetiesSectionUpdate(equipmentInventoryPage, lampType);
            var notedName = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetNameValue();
            var notedLampWattage = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetLampWattageValue();
            var notedIdentifier = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetIdentifierValue();
            var notedWarmupTime = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetWarmupTimeValue();
            var notedILevel1Min = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetILevel1MinValue();
            var notedILevel1Max = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetILevel1MaxValue();
            var notedILevel2Min = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetILevel2MinValue();
            var notedILevel2Max = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetILevel2MaxValue();
            var notedINo = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetINoValue();
            var notedPfMin = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetPfMinValue();
            var notedVNo = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetVNoValue();
            var notedVMin = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetVMinValue();
            var notedVMax = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetVMaxValue();
            var notedMinOutputValue = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetMinOutputValueValue();
            var notedControlVoltMax = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetControlVoltMaxValue();
            var notedBhMax = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetBhMaxValue();
            var notedPowerMax = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetPowerMaxValue();
            var notedCloHoursIncrement = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetCloHoursIncrementValue();
            var notedCloInitialValue = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetCloInitialValueValue();
            var notedInterfaceValue = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetInterfaceValue();

            Step("10. Change values of all editable fields");
            EnterLampTypesPropertiesSectionValues(equipmentInventoryPage, false);
            var name = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetNameValue();
            var identifier = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetIdentifierValue();
            var lampWattage = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetLampWattageValue();
            var warmupTime = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetWarmupTimeValue();
            var iLevel1Min = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetILevel1MinValue();
            var iLevel1Max = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetILevel1MaxValue();
            var iLevel2Min = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetILevel2MinValue();
            var iLevel2Max = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetILevel2MaxValue();
            var iNo = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetINoValue();
            var pfMin = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetPfMinValue();
            var vNo = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetVNoValue();
            var vMin = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetVMinValue();
            var vMax = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetVMaxValue();
            var minOutputValue = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetMinOutputValueValue();
            var controlVoltMax = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetControlVoltMaxValue();
            var bhMax = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetBhMaxValue();
            var powerMax = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetPowerMaxValue();
            var cloHoursIncrement = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetCloHoursIncrementValue();
            var cloInitialValue = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetCloInitialValueValue();
            var interfaceValue = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetInterfaceValue();

            Step("11. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("12. Verify New values are applied");
            VerifyLampTypePropetiesSectionValues(equipmentInventoryPage, name, identifier, lampWattage, warmupTime, iLevel1Min, iLevel1Max, iLevel2Min, iLevel2Max
            , pfMin, iNo, vNo, vMin, vMax, minOutputValue, controlVoltMax, bhMax, powerMax, cloHoursIncrement, cloInitialValue, interfaceValue);

            Step("13. Verify Select another lamp type then select the previous one");
            listLampTypes.Remove(name);
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.SelectLampType(listLampTypes.PickRandom());
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.SelectLampType(notedName);

            Step("14. Verify New values are remained applied");
            VerifyLampTypePropetiesSectionValues(equipmentInventoryPage, name, identifier, lampWattage, warmupTime, iLevel1Min, iLevel1Max, iLevel2Min, iLevel2Max
            , pfMin, iNo, vNo, vMin, vMax, minOutputValue, controlVoltMax, bhMax, powerMax, cloHoursIncrement, cloInitialValue, interfaceValue);

            Step("15. Close Lamp Type Editor panel");
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.ClickBackButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForLampTypePanelDisappeared();

            Step("16. Verify Lamp Type Editor panel disappears");
            VerifyEqual("16. Verify Lamp Type Editor panel disappears", false, equipmentInventoryPage.StreetlightEditorPanel.IsLampTypePanelDisplayed());

            Step("17. Verify Streetlight Editor panel appears back");
            VerifyEqual("17. Verify Streetlight Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("18. Value of lamp type is the updated one");
            VerifyEqual(string.Format("18. Verify Value of lamp type is '{0}'", name), name, equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue());

            Step("19. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("20. Verify Streetlight Editor panel disappears");
            VerifyEqual("20. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("21. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("22. Verify Streetlight Editor panel appears");
            VerifyEqual("22. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("23. Select Inventory tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");

            Step("24. Verify Value of lamp type is remained to be the updated one");
            VerifyEqual(string.Format("24. Verify Value of lamp type is '{0}'", name), name, equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue());

            Step("25. Refresh browser");
            Step("26. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("27. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("28. Verify Streetlight Editor panel appears");
            VerifyEqual("28. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("29. Select Inventory tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");

            Step("30. Verify Value of lamp type is remained to be the updated one");
            VerifyEqual(string.Format("29. Verify Value of lamp type is '{0}'", name), name, equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeValue());

            Step("31. Click Edit icon next to Lamp Type dropdown");
            equipmentInventoryPage.StreetlightEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.WaitForPropertiesSectionDisplayed();

            Step("32. Verify Lamp Type Editor panel appears");
            VerifyEqual("32. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsLampTypePanelDisplayed());

            Step("33. Verify The updated one is being selected");
            var selectedLampType = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetSelectedLampType();
            VerifyEqual(string.Format("33. Verify Lamp type '{0}' is being selected", name), name, selectedLampType);

            Step("34. Verify New values of the updated one are still remained");
            VerifyLampTypePropetiesSectionValues(equipmentInventoryPage, name, identifier, lampWattage, warmupTime, iLevel1Min, iLevel1Max, iLevel2Min, iLevel2Max
            , pfMin, iNo, vNo, vMin, vMax, minOutputValue, controlVoltMax, bhMax, powerMax, cloHoursIncrement, cloInitialValue, interfaceValue);

            try
            {
                //Update lamp type
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterNameInput(notedName);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterLampWattageNumericInput(notedLampWattage);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterWarmupTimeNumericInput(notedWarmupTime);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterILevel1MinNumericInput(notedILevel1Min);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterILevel1MaxNumericInput(notedILevel1Max);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterILevel2MinNumericInput(notedILevel2Min);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterILevel2MaxNumericInput(notedILevel2Max);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterINoNumericInput(notedINo);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterPfMinNumericInput(notedPfMin);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterVNoNumericInput(notedVNo);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterVMinNumericInput(notedVMin);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterVMaxNumericInput(notedVMax);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterMinOutputValueNumericInput(notedMinOutputValue);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterControlVoltMaxNumericInput(notedControlVoltMax);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterBhMaxNumericInput(notedBhMax);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterPowerMaxNumericInput(notedPowerMax);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterCloHoursIncrementNumericInput(notedCloHoursIncrement);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.EnterCloInitialValueNumericInput(notedCloInitialValue);
                if (!notedInterfaceValue.Equals("Select a value")) equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.SelectInterfaceDropDown(notedInterfaceValue);
                equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                
                DeleteGeozone(geozone);

            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_23_03 Streetlight - Lamp Type Editor - Delete")]
        public void EI_23_03()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI2303");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var newLampType = SLVHelper.GenerateUniqueName("LT");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);            

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - A new streetlight and a new lamp type is prepared in advance");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI2303*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);
            CreateNewLampType(newLampType);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Streetlight Editor panel appears");
            VerifyEqual("4. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Inventory tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");

            Step("6. Click Edit icon next to Lamp Type input");
            equipmentInventoryPage.StreetlightEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.WaitForPropertiesSectionDisappeared();

            Step("7. Verify Lamp Type Editor panel appears");
            VerifyEqual("7. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsLampTypePanelDisplayed());

            Step("8. Select a lamp type in the list");
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.SelectLampType(newLampType);
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.WaitForPropertiesSectionDisplayed();

            Step("9. Verify Remove button for the selected lamp type is displayed");
            VerifyEqual("9. Verify Remove button for the selected lamp type is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.IsSelectedLampTypeRemoveButtonDisplayed());

            Step("10. Click Remove button of the selected one");
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.ClickRemoveSelectedLampTypeIcon();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("11. Verify A confirmation dialog with title 'Confirmation' and message 'Would you like to delete {{selected lamp type's name}} lamp type ?'");
            var expectedMessage = string.Format("Would you like to delete {0} lamp type ?", newLampType);
            VerifyEqual("11. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("11. Verify dialog title is 'Confirmation'", "Confirmation", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual(string.Format("11. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("12. Click No");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("13. Verify The dialog disappears");
            VerifyEqual("13. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("14. Verify The selected one is still present in the list and being selected");
            VerifyEqual(string.Format("14. Verify Lamp type '{0}' is still present and being selected", newLampType), newLampType, equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetSelectedLampType());

            Step("15. Click Remove button of the selected lamp type again");
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.ClickRemoveSelectedLampTypeIcon();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("16. Verify A confirmation dialog with title 'Confirmation' and message 'Would you like to delete {{selected lamp type's name}} lamp type ?'");
            VerifyEqual("16. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("16. Verify dialog title is 'Confirmation'", "Confirmation", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual(string.Format("16. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("17. Click Yes");
            equipmentInventoryPage.Dialog.ClickYesButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("18. Verify The dialog disappears");
            VerifyEqual("18. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("19. Verify The selected one is no longer present in the list");
            var listLampTypes = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetListOfLampTypes();
            VerifyEqual(string.Format("19. Verify Lamp type '{0}' is no longer present in the list", newLampType), false, listLampTypes.Contains(newLampType));

            Step("20. Refresh browser");
            Step("21. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("22. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("23. Verify Streetlight Editor panel appears");
            VerifyEqual("23. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("24. Select Inventory tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");

            Step("25. Click Edit icon next to Lamp Type dropdown");
            equipmentInventoryPage.StreetlightEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.WaitForPropertiesSectionDisappeared();

            Step("26. Verify Lamp Type Editor panel appears");
            VerifyEqual("26. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsLampTypePanelDisplayed());

            Step("27. Verify The deleted lamp type is no longer present in lamp type list");
            listLampTypes = equipmentInventoryPage.StreetlightEditorPanel.LampTypePanel.GetListOfLampTypes();
            VerifyEqual(string.Format("27. Verify Lamp type '{0}' is no longer present in lamp type list", newLampType), false, listLampTypes.Contains(newLampType));

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_24 Streetlight - Energy Supplier Editor - View")]
        public void EI_24()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI24");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI24*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select streetlight A (streetlight A should be created during this test to make sure its energy supplier is empty)");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Streetlight Editor panel appears");
            VerifyEqual("Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Electricity network tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");

            Step("6. Verify Value of energy supplier is empty");
            VerifyEqual("6. Verify Value of energy supplier is empty", "Select a value", equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            Step("7. Note list of energy suppliers");
            var energySupplierList = equipmentInventoryPage.StreetlightEditorPanel.GetListOfEnergySuppliers();

            Step("8. Click Edit icon next to Energy Supplier dropdown");
            equipmentInventoryPage.StreetlightEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForEnergySupplierPanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisappeared();

            Step("9. Verify Energy Supplier Editor panel appears");
            VerifyEqual("9. Verify Energy Supplier Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("10. Verify Energy Supplier Editor panel has title 'Energy supplier', Add buttons");
            VerifyEqual("10. Verify Energy Supplier Editor panel has title 'Energy supplier'", "Energy supplier", equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetPanelTitleText());
            VerifyEqual("10. Verify Add buttons are displayed", true, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.IsAddButtonDisplayed());

            Step("11. Verify List of lamp types in the editor = list of ones noted at step #7");
            var actualEnergySupplierList = equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetListOfEnergySuppliers();
            VerifyEqual("11. Verify List of lamp types in the editor = list of ones noted at step #7", energySupplierList, actualEnergySupplierList, false);

            Step("12. Verify There is no energy supplier in the list being selected");
            VerifyEqual("12. Verify There is no energy supplier in the list being selected", false, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.HasSelectedEnergySupplier());

            Step("13. Verify Save button and editing layout of Properties section of a selected energy supplier are not visible");
            VerifyEqual("13. Verify Save button is not displayed", false, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.IsSaveButtonDisplayed());
            VerifyEqual("13. Verify Properties section of a selected energy supplier are not visible", false, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.IsPropertiesSectionDisplayed());

            Step("14. Click Close button");
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.ClickBackButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForEnergySupplierPanelDisappeared();

            Step("15. Verify Energy Supplier Editor panel disappears");
            VerifyEqual("15. Verify Energy Supplier Editor panel disappears", false, equipmentInventoryPage.StreetlightEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("16. Verify Streetlight Editor panel appears back");
            VerifyEqual("16. Verify Streetlight Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("17. Verify Value of energy supplier is still empty");
            VerifyEqual("17. Verify Value of energy supplier is still empty", "Select a value", equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            Step("18. Select a value for energy supplier");
            var energySupplier = energySupplierList.PickRandom();
            equipmentInventoryPage.StreetlightEditorPanel.SelectEnergySupplierDropDown(energySupplier);

            Step("19. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("20. Verify Streetlight Editor panel disappears");
            VerifyEqual("20. Verify Streetlight Editor panel appears back", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("21. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("22. Verify Streetlight Editor panel appears back");
            VerifyEqual("22. Verify Streetlight Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("23. Select Electricity network tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");

            Step("24. Verify Value of energy supplier is remained to be the selected value");
            VerifyEqual(string.Format("24. Verify Value of energy supplier is '{0}'", energySupplier), energySupplier, equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            Step("25. Click Edit icon next to Energy Supplier dropdown");
            equipmentInventoryPage.StreetlightEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForEnergySupplierPanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisplayed();

            Step("26. Verify Energy Supplier Editor panel appears");
            VerifyEqual("26. Verify Energy Supplier Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("27. Verify The selected energy supplier in streetlight editor panel is being selected in Energy Supplier Editor panel");
            VerifyEqual(string.Format("27. Verify The selected energy supplier in Energy Supplier Editor panel is '{0}'", energySupplier), energySupplier, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetSelectedEnergySupplier());

            Step("28. Verify Remove button for the selected energy supplier is visible");
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.ScrollToSelectedEnergySupplier();
            VerifyEqual("28. Verify Remove button for the selected energy supplier is visible", true, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.IsSelectedEnergySupplierRemoveButtonDisplayed());

            Step("29. Verify Save button and editing layouts are visible in Properties section");
            VerifyEqual("29. Verify Save button is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.IsSaveButtonDisplayed());
            VerifyEqual("29. Verify editing layouts are visible in Properties section", true, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.IsPropertiesSectionDisplayed());

            Step("30. Verify Editing layout contains fields:");
            Step(" o Name: label is 'Name', value is name of the selected energy supplier");
            Step(" o KgCo2byKwH: label is 'KgCo2byKwH', value is a number");
            double value;
            VerifyEqual("30. Verify Name - label is 'Name'", "Name", equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetNameText());
            VerifyEqual(string.Format("30. Verify Name - value is '{0}'", energySupplier), energySupplier, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetNameValue());
            VerifyEqual("30. Verify KgCo2byKwH - label is 'KgCo2byKwH'", "KgCo2byKwH", equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetKgCo2byKwhText());
            VerifyEqual("30. Verify KgCo2byKwH - value is a number", true, double.TryParse(equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue(), out value));

            Step("31. Verify Name field is disabled and KgCo2byKwH is editable");
            VerifyEqual("31. Verify Identifier field is disabled", false, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.IsNameInputEditable());
            VerifyEqual("31. Verify KgCo2byKwH is editable", true, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.IsKgCo2byKwhNumericInputEditable());

            Step("32. Select another energy supplier");
            energySupplier = energySupplierList.PickRandom();
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.SelectEnergySupplier(energySupplier);

            Step("33. Close Energy Supplier Editor panel");
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.ClickBackButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForEnergySupplierPanelDisappeared();

            Step("34. Verify Energy Supplier Editor panel appears");
            VerifyEqual("34. Verify Energy Supplier Editor panel appears", false, equipmentInventoryPage.StreetlightEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("35. Verify Streetlight Editor panel appears back");
            VerifyEqual("35. Verify Streetlight Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("36. Verify Value of energy supplier is now the one selected later");
            VerifyEqual(string.Format("36. Verify Value of energy supplier is '{0}'", energySupplier), energySupplier, equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            Step("37. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("38. Verify Streetlight Editor panel disappears");
            VerifyEqual("38. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("39. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("40. Verify Streetlight Editor panel appears");
            VerifyEqual("40. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("41. Select Electricity network tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");

            Step("42. Verify Value of energy supplier is now the one selected later");
            VerifyEqual(string.Format("42. Verify Value of energy supplier is '{0}'", energySupplier), energySupplier, equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            Step("43. Refresh browser");
            Step("44. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("45. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("46. Verify Streetlight Editor panel appears");
            VerifyEqual("46. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("47. Select Electricity network tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");

            Step("48. Verify Value of energy supplier is now the one selected later");
            VerifyEqual(string.Format("48. Verify Value of energy supplier is '{0}'", energySupplier), energySupplier, equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_24_01 Streetlight - Energy Supplier Editor - Create")]
        public void EI_24_01()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI2401");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI2401*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");            
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Streetlight Editor panel appears");
            VerifyEqual("4. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Electricity network tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");

            Step("6. Click Edit icon next to Energy Supplier dropdown");
            equipmentInventoryPage.StreetlightEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForEnergySupplierPanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisappeared();

            Step("7. Verify Energy Supplier Editor panel appears");
            VerifyEqual("7. Verify Energy Supplier Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("8. Click Add button");
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.ClickAddButton();
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisplayed();

            Step("9. Verify Fields in Properties section are reset:");
            Step(" o Name is filled with value starting with 'New Provider'");
            Step(" o KgCo2byKwH is editable and is filled with a number");
            double value;
            var nameField = equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetNameValue();
            VerifyTrue("9. Verify Name is filled with value starting with 'New Provider'", nameField.Contains("New Provider"), "Contains 'New Provider'", nameField);
            VerifyEqual("9. Verify KgCo2byKwH is editable", true, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.IsNameInputEditable());
            VerifyEqual("9. Verify KgCo2byKwH is filled with a number", true, double.TryParse(equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue(), out value));

            Step("10. Change values of all editable fields");
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.EnterNameInput(SLVHelper.GenerateUniqueName("NewES"));
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.EnterKgCo2byKwhNumericInput(SLVHelper.GenerateStringInteger(99999));
            var name = equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetNameValue();
            var kgCo2byKwh = equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue();

            Step("11. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("12. Verify New values are applied");
            VerifyEqual(string.Format("12. Verify Name is '{0}'", name), name, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetNameValue());
            VerifyEqual(string.Format("12. Verify KgCo2byKwH is '{0}'", kgCo2byKwh), kgCo2byKwh, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue());

            Step("13. Verify A new entry with new name is appended into energy supplier list");
            var listEnergySuppliers = equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetListOfEnergySuppliers();
            VerifyEqual(string.Format("13. Verify Lamp type '{0}' is appended into energy supplier list", name), true, listEnergySuppliers.Contains(name));

            Step("14. Verify Select another energy supplier then select the previous one");
            listEnergySuppliers.Remove(name);
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.SelectEnergySupplier(listEnergySuppliers.PickRandom());
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.SelectEnergySupplier(name);

            Step("15. Verify New values are remained applied");
            VerifyEqual(string.Format("15. Verify Name is '{0}'", name), name, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetNameValue());
            VerifyEqual(string.Format("15. Verify KgCo2byKwH is '{0}'", kgCo2byKwh), kgCo2byKwh, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue());

            Step("16. Close Energy Supplier Editor panel");
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.ClickBackButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForEnergySupplierPanelDisappeared();

            Step("17. Verify Energy Supplier Editor panel disappears");
            VerifyEqual("17. Verify Energy Supplier Editor panel disappears", false, equipmentInventoryPage.StreetlightEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("18. Verify Streetlight Editor panel appears back");
            VerifyEqual("18. Verify Streetlight Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("19. Verify Value of energy supplier is the newly-created one");
            VerifyEqual(string.Format("19. Verify Value of energy supplier is '{0}'", name), name, equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            Step("20. Verify The newly created energy supplier is present in the energy supplier dropdown list");
            var energySuppliers = equipmentInventoryPage.StreetlightEditorPanel.GetListOfEnergySuppliers();
            VerifyEqual(string.Format("20. Verify Energy supplier '{0}' is present in the energy supplier dropdown list", name), true, energySuppliers.Contains(name));

            Step("21. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("22. Verify Streetlight Editor panel disappears");
            VerifyEqual("22. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("23. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("24. Verify Streetlight Editor panel appears");
            VerifyEqual("24. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("25. Select Electricity network tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");

            Step("26. Verify Value of energy supplier is remained to be the new one");
            VerifyEqual(string.Format("26. Verify Value of energy supplier is '{0}'", name), name, equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            Step("27. Refresh browser");
            Step("28. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("29. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("30. Verify Streetlight Editor panel appears");
            VerifyEqual("30. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("31. Select Electricity network tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");

            Step("32. Verify Value of energy supplier is remained to be the new one");
            VerifyEqual(string.Format("32. Verify Value of energy supplier is '{0}'", name), name, equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            Step("33. Click Edit icon next to Energy Supplier dropdown");
            equipmentInventoryPage.StreetlightEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForEnergySupplierPanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisplayed();

            Step("34. Verify Energy Supplier Editor panel appears");
            VerifyEqual("34. Verify Energy Supplier Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("35. Verify The newly created energy supplier is still present in energy supplier list");
            listEnergySuppliers = equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetListOfEnergySuppliers();
            VerifyEqual(string.Format("35. Verify Energy supplier '{0}' is still present in energy supplier list", name), true, listEnergySuppliers.Contains(name));            

            try
            {
                DeleteGeozone(geozone);
                DeleteEnergySupplier(name);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_24_02 Streetlight - Energy Supplier Editor - Update")]
        public void EI_24_02()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI2402");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI2402*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Streetlight Editor panel appears");
            VerifyEqual("Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Electricity network tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");

            Step("6. Click Edit icon next to Energy Supplier dropdown");
            equipmentInventoryPage.StreetlightEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForEnergySupplierPanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisappeared();

            Step("7. Verify Energy Supplier Editor panel appears");
            VerifyEqual("7.Verify Energy Supplier Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("8. Select a energy supplier in the list");
            var listEnergySuppliers = equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetListOfEnergySuppliers();
            var energySupplier = listEnergySuppliers.PickRandom();
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.SelectEnergySupplier(energySupplier);
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisplayed();

            Step("9. Verify Fields in Properties section are populated:");
            Step(" o Name is readonly and is filled with name of the selected one");
            Step(" o KgCo2byKwH is filled with a number");
            var notedName = equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetNameValue();
            var notedKgCo2byKwh = equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue();
            double value;
            VerifyEqual("9. Verify Name is readonly", false, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.IsNameInputEditable());
            VerifyEqual("9. Verify Name is filled with name of the selected one", energySupplier, notedName);
            VerifyEqual("9. Verify KgCo2byKwH is filled with a number", true, double.TryParse(notedKgCo2byKwh, out value));

            Step("10. Change values of all editable fields");
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.EnterKgCo2byKwhNumericInput(SLVHelper.GenerateStringInteger(99999));
            var name = equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetNameValue();
            var kgCo2byKwh = equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue();

            Step("11. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("12. Verify New values are applied");
            VerifyEqual(string.Format("12. Verify KgCo2byKwH is '{0}'", kgCo2byKwh), kgCo2byKwh, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue());

            Step("13. Verify Select another energy supplier then select the previous one");
            listEnergySuppliers.Remove(name);
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.SelectEnergySupplier(listEnergySuppliers.PickRandom());
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.SelectEnergySupplier(notedName);

            Step("14. Verify New values are remained applied");
            VerifyEqual(string.Format("14. Verify KgCo2byKwH is '{0}'", kgCo2byKwh), kgCo2byKwh, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue());

            Step("15. Close Energy Supplier Editor panel");
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.ClickBackButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForEnergySupplierPanelDisappeared();

            Step("16. Verify Energy Supplier Editor panel disappears");
            VerifyEqual("16. Verify Energy Supplier Editor panel disappears", false, equipmentInventoryPage.StreetlightEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("17. Verify Streetlight Editor panel appears back");
            VerifyEqual("17. Verify Streetlight Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("18. Value of energy supplier is the updated one");
            VerifyEqual(string.Format("18. Verify Value of energy supplier is '{0}'", name), name, equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            Step("19. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("20. Verify Streetlight Editor panel disappears");
            VerifyEqual("20. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("21. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("22. Verify Streetlight Editor panel appears");
            VerifyEqual("22. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("23. Select Electricity network tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");

            Step("24. Verify Value of energy supplier is remained to be the updated one");
            VerifyEqual(string.Format("24. Verify Value of energy supplier is '{0}'", name), name, equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            Step("25. Refresh browser");
            Step("26. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("27. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("28. Verify Streetlight Editor panel appears");
            VerifyEqual("28. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("29. Select Electricity network tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");

            Step("30. Verify Value of energy supplier is remained to be the updated one");
            VerifyEqual(string.Format("30. Verify Value of energy supplier is '{0}'", name), name, equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            Step("31. Click Edit icon next to Energy Supplier dropdown");
            equipmentInventoryPage.StreetlightEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForEnergySupplierPanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisplayed();

            Step("32. Verify Energy Supplier Editor panel appears");
            VerifyEqual("32. Verify Energy Supplier Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("33. Verify The updated one is being selected");
            var selectedEnergySupplier = equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetSelectedEnergySupplier();
            VerifyEqual(string.Format("33. Verify Energy supplier '{0}' is being selected", name), name, selectedEnergySupplier);

            Step("34. Verify New values of the updated one are still remained");
            VerifyEqual(string.Format("34. Verify KgCo2byKwH is '{0}'", kgCo2byKwh), kgCo2byKwh, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue());
           
            try
            { 
                UpdateEnergySupplier(name, notedKgCo2byKwh);
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_24_03 Streetlight - Energy Supplier Editor - Delete")]
        public void EI_24_03()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI2403");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var newEnergySupplier = SLVHelper.GenerateUniqueName("NES");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI2403*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);          
            
            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Streetlight Editor panel appears");
            VerifyEqual("4. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Electricity network tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");

            Step("6. Create a new energy supplier from Energy Supplier Editor panel and select for the currently selected streetlight (streetlight A)");
            equipmentInventoryPage.StreetlightEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisappeared();
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.CreateNewEnergySupplier(newEnergySupplier);

            Step("7. Save the streetlight");
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.ClickBackButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForEnergySupplierPanelDisappeared();
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("8. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);

            Step("9. Verify Streetlight Editor panel appears");
            VerifyEqual("9. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("10. Select Electricity network tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");

            Step("11. Verify Value of energy supplier is the one created at step #6");
            VerifyEqual(string.Format("11. Verify Value of energy supplier is '{0}'", newEnergySupplier), newEnergySupplier, equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            Step("12. Click Edit icon next to Energy Supplier input");
            equipmentInventoryPage.StreetlightEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForEnergySupplierPanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisplayed();

            Step("13. Verify Energy Supplier Editor panel appears");
            VerifyEqual("13. Verify Energy Supplier Editor panel appears", true, equipmentInventoryPage.StreetlightEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("14. Verify The one created at step #6 is being selected");
            var selectedEnergySupplier = equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetSelectedEnergySupplier();
            VerifyEqual(string.Format("14. Verify Energy supplier '{0}' is being selected", newEnergySupplier), newEnergySupplier, selectedEnergySupplier);

            Step("15. Click Remove button of the selected one");
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.ClickRemoveSelectedEnergySupplierIcon();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("16. Verify A confirmation dialog with title 'Confirmation' and message 'Would you like to delete {{selected energy supplier's name}} provider ?'");
            var expectedMessage = string.Format("Would you like to delete {0} provider ?", newEnergySupplier);
            VerifyEqual("16. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("16. Verify dialog title is 'Confirmation'", "Confirmation", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual(string.Format("16. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("17. Click No");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("18. Verify The dialog disappears");
            VerifyEqual("18. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("19. Verify The selected one is still present in the list and being selected");
            VerifyEqual(string.Format("19. Verify Energy supplier '{0}' is still present and being selected", newEnergySupplier), newEnergySupplier, equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetSelectedEnergySupplier());

            Step("20. Click Remove button of the selected energy supplier again");
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.ClickRemoveSelectedEnergySupplierIcon();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("21. Verify A confirmation dialog with title 'Confirmation' and message 'Would you like to delete {{selected energy supplier's name}} energy supplier ?'");
            VerifyEqual("21. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("21. Verify dialog title is 'Confirmation'", "Confirmation", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual(string.Format("21. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("22. Click Yes");
            equipmentInventoryPage.Dialog.ClickYesButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("23. Verify The dialog disappears (SC-242)");
            VerifyEqual("[SC-242] 23. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());
            if (equipmentInventoryPage.IsPopupDialogDisplayed())
            {
                equipmentInventoryPage.Dialog.ClickOkButton();
                equipmentInventoryPage.WaitForPopupDialogDisappeared();
            }

            Step("24. Verify The selected one is no longer present in the list");
            var listEnergySuppliers = equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.GetListOfEnergySuppliers();
            VerifyEqual(string.Format("24. Verify Energy supplier '{0}' is no longer present in the list", newEnergySupplier), false, listEnergySuppliers.Contains(newEnergySupplier));

            Step("25. Close Energy Supplier editor panel");
            equipmentInventoryPage.StreetlightEditorPanel.EnergySupplierPanel.ClickBackButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForEnergySupplierPanelDisappeared();

            Step("26. Verify Energy Supplier editor panel disappears");
            VerifyEqual("26. Verify Energy Supplier Editor panel disappears", false, equipmentInventoryPage.StreetlightEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("27. Verify Streetlight Editor panel appears back");
            VerifyEqual("27. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("28. Verify Value of energy supplier is empty");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");
            VerifyEqual("[SC-619] 28. Verify Value of energy supplier is empty", "Select a value", equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            Step("29. Leave everything intact and click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForEnergySupplierPanelDisappeared();

            Step("30. Verify Streetlight Editor disappears");
            VerifyEqual("30. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("31. Refresh browser");
            Step("32. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("33. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("34. Verify Streetlight Editor panel appears");
            VerifyEqual("34. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("35. Select Electricity network tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");

            Step("36. Verify Value of energy supplier is empty");
            VerifyEqual("[SC-619] 36. Verify Value of energy supplier is empty", "Select a value", equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            try
            {
                DeleteGeozone(geozone);
                DeleteEnergySupplier(newEnergySupplier);
            }
            catch { }
        }        

        [Test, DynamicRetry]
        [Description("EI_26 Streetlight - Editor - Equipment Type - All")]
        public void EI_26()
        {
            var testData = GetTestDataOfEI_26();
            var xmlEquipmentTypes = testData["EquipmentTypes"] as List<string>;
            var geozone = SLVHelper.GenerateUniqueName("GZNEI26");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);
            var expectedTabs = new List<string> { "Identity", "Inventory", "Electricity network" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI26*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);

            Step("4. Verify Streetlight Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());
            
            foreach (var type in xmlEquipmentTypes)
            {
                Step("5. Select any type of equipment in Identity tab");
                Step(string.Format("--> Select type of equipment '{0}'", type));
                equipmentInventoryPage.StreetlightEditorPanel.SelectTypeOfEquipmentDropDown(type);

                Step("6. Click Save");
                equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("7. Verify Streetlight Editor panel disappears");
                VerifyEqual("7. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("8. Select streetlight A again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);

                Step("9. Verify Streetlight Editor panel appears back");
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
                VerifyEqual("9. Verify Streetlight Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("10. Verify Value of Name is correct");
                VerifyEqual(string.Format("Verify Name is '{0}'", streetlight), streetlight, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());

                Step("11. Verify Value of Geozone is correct");
                VerifyEqual(string.Format("11. Verify Geozone is '{0}'", geozone), geozone, equipmentInventoryPage.StreetlightEditorPanel.GetGeozoneValue());

                Step("12. Verify Values of Longitude, Latitude are not empty");
                VerifyEqual("12. Verify Longitude is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue()));
                VerifyEqual("12. Verify Latitude is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue()));

                Step("13. Verify The tabs Identity, Inventory and Electricity network are displayed");
                var actualTabs = equipmentInventoryPage.StreetlightEditorPanel.GetListOfTabsName();
                VerifyContain("13. Verify The tabs Identity, Inventory and Electricity network are displayed", actualTabs, expectedTabs);

                Step("14. Verify In the Identity tab, the following attributes are displayed: 'Controller ID', 'Identifier', 'Type of Equipment', 'Dimming Group', 'Unique Address', 'Install Status', 'Configuration Status', 'Config Status Message', 'Communication Status");
                Step("15. Verify Identifier is read only");
                var isIdentityTabExisting = equipmentInventoryPage.StreetlightEditorPanel.IsTabExisting("Identity");
                if (isIdentityTabExisting)
                {
                    equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identity");
                    equipmentInventoryPage.StreetlightEditorPanel.ExpandGroup("Control System");
                    var actualIControlerId = equipmentInventoryPage.StreetlightEditorPanel.GetControllerIdText();
                    VerifyTrue("15. Verify Controller ID label is 'Controller ID'", actualIControlerId == "Controller ID" || actualIControlerId == "Controller ID *", "Controller ID/Controller ID *", actualIControlerId);
                    VerifyEqual("15. Verify Controller ID dropdown is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsControllerIdDropDownDisplayed());
                    var actualIdentifier = equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierText();
                    VerifyTrue("15. Verify Identifier label is 'Identifier'", actualIdentifier == "Identifier" || actualIdentifier == "Identifier *", "Identifier/Identifier *", actualIdentifier);
                    VerifyEqual("15. Verify Identifier input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsIdentifierInputDisplayed());
                    VerifyEqual(string.Format("[SC-734] 15. Verify Identifier input is read only ({0})", type), true, equipmentInventoryPage.StreetlightEditorPanel.IsIdentifierReadOnly());
                    var actualTypeOfEquipmentText = equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentText();
                    VerifyTrue("15. Verify Type of Equipment label is 'Type of equipment'", actualTypeOfEquipmentText == "Type of equipment" || actualTypeOfEquipmentText == "Type of equipment *", "Type of equipment/Type of equipment *", actualTypeOfEquipmentText);
                    VerifyEqual("15. Verify Type of Equipment dropdown is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsTypeOfEquipmentDropDownDisplayed());
                    VerifyEqual("15. Verify Dimming Group label is 'Dimming group'", "Dimming group", equipmentInventoryPage.StreetlightEditorPanel.GetDimmingGroupText());
                    VerifyEqual("15. Verify Dimming Group dropdown is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsDimmingGroupDropDownDisplayed());
                    VerifyEqual("15. Verify Unique Address label is 'Unique address'", "Unique address", equipmentInventoryPage.StreetlightEditorPanel.GetUniqueAddressText());
                    VerifyEqual("15. Verify Unique Address input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsUniqueAddressInputDisplayed());
                    VerifyEqual("15. Verify Install status label is 'Install status'", "Install status", equipmentInventoryPage.StreetlightEditorPanel.GetInstallStatusText());
                    VerifyEqual("15. Verify Install status dropdown is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsInstallStatusDropDownDisplayed());
                    VerifyEqual("15. Verify Configuration status label is 'Configuration status'", "Configuration status", equipmentInventoryPage.StreetlightEditorPanel.GetConfigStatusText());
                    VerifyEqual("15. Verify Configuration status input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsConfigurationStatusInputDisplayed());
                    VerifyEqual("15. Verify Config status msg label is 'Config status msg'", "Config status msg", equipmentInventoryPage.StreetlightEditorPanel.GetConfigStatusMessageText());
                    VerifyEqual("15. Verify Config status msg input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsConfigStatusMsgInputDisplayed());
                    VerifyEqual("15. Verify Communication status label is 'Communication status'", "Communication status", equipmentInventoryPage.StreetlightEditorPanel.GetCommunicationStatusText());
                    VerifyEqual("15. Verify Communication status input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsCommunicationStatusInputDisplayed());
                }
                else
                {
                    Warning(string.Format("{0} - Identity tab does not exist", type));
                }

                Step("16. Verify In the Inventory tab, the following attributes are displayed: 'Lamp Type', 'Lamp wattage', 'Fixed saved power'");
                var isInventoryTabExisting = equipmentInventoryPage.StreetlightEditorPanel.IsTabExisting("Inventory");
                if (isInventoryTabExisting)
                {
                    equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");
                    equipmentInventoryPage.StreetlightEditorPanel.ExpandGroup("Lamp");
                    VerifyEqual("16. Verify Lamp Type label is 'Lamp Type'", "Lamp Type", equipmentInventoryPage.StreetlightEditorPanel.GetLampTypeText());
                    VerifyEqual("16. Verify Lamp Type dropdown is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsLampTypeDropDownDisplayed());
                    VerifyEqual("16. Verify Lamp wattage label is 'Lamp wattage (W)'", "Lamp wattage (W)", equipmentInventoryPage.StreetlightEditorPanel.GetLampWattageText());
                    VerifyEqual("16. Verify Lamp wattage input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsLampWattageInputDisplayed());
                    VerifyEqual("16. Verify Fixed saved power label is 'Fixed saved power'", "Fixed saved power", equipmentInventoryPage.StreetlightEditorPanel.GetFixedSavedPowerText());
                    VerifyEqual("16. Verify Fixed saved power input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsFixedSavedPowerInputDisplayed());
                }
                else
                {
                    Warning(string.Format("{0} - Inventory tab does not exist", type));                    
                }

                Step("17. Verify The buttons 'Commission', 'Replace lamp', 'Replace node', 'Duplicate', 'Save' and 'Delete' are displayed");
                VerifyEqual("17. Verify Commission button is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsCommissionButtonDisplayed());
                VerifyEqual("17. Verify Replace lammp button is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsReplaceLampButtonDisplayed());
                VerifyEqual(string.Format("17. Verify Replace node button is displayed ({0})", type), true, equipmentInventoryPage.StreetlightEditorPanel.IsReplaceNodeButtonDisplayed());
                VerifyEqual("17. Verify Duplicate button is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsDuplicateButtonDisplayed());
                VerifyEqual("17. Verify Save button is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsSaveButtonDisplayed());
                VerifyEqual("17. Verify Delete button is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsDeleteButtonDisplayed());

                Step("18. Repeat from step #5 to end for the rest of equipment types");
                equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identity");
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_26_01 Streetlight - Editor - Equipment Type - Telematics LCU")]
        public void EI_26_01()
        {            
            var geozone = SLVHelper.GenerateUniqueName("GZNEI2601");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);
            var typeofEquipment = "Telematics LCU[Lamp]";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI2601*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");           
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);

            Step("4. Verify Streetlight Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select type of equipment = 'Telematics LCU' in Identity tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTypeOfEquipmentDropDown(typeofEquipment);

            Step("6. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

            Step("7. Verify Streetlight Editor panel disappears");
            VerifyEqual("7. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("8. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);

            Step("9. Verify Streetlight Editor panel appears back");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("9. Verify Streetlight Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("10. Verify The following attributes are displayed in the Identity tab: 'Reference', 'Elexon Charge Code', 'Default Light Level'");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroup("Control System");
            VerifyEqual("10. Verify Reference label is 'Reference'", "Reference", equipmentInventoryPage.StreetlightEditorPanel.GetReferenceText());
            VerifyEqual("10. Verify Reference input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsReferenceInputDisplayed());
            VerifyEqual("10. Verify Elexon Charge Code label is 'Elexon charge code'", "Elexon charge code", equipmentInventoryPage.StreetlightEditorPanel.GetElexonChargeCodeText());
            VerifyEqual("10. Verify Elexon Charge Code input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsElexonChargeCodeInputDisplayed());
            VerifyEqual("10. Verify Default Light Level label is 'Default light level'", "Default light level", equipmentInventoryPage.StreetlightEditorPanel.GetDefaultLightLevelText());
            VerifyEqual("10. Verify Default Light Level input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsDefaultLightLevelInputDisplayed());

            Step("11. Verify The section 'Dynamic Lighting' is present in the Identity tab");
            VerifyEqual("11. Verify The section 'Dynamic Lighting' is present in the Identity tab", true, equipmentInventoryPage.StreetlightEditorPanel.IsGroupExistingActiveTab("Dynamic Lighting"));

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_26_02 Streetlight - Editor - Equipment Type - SSN Cimcon Dim Photocell")]
        public void EI_26_02()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI2602");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}", geozone, streetlight);
            var typeofEquipment = "SSN Cimcon Dim Photocell";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI2602*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select streetlight A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);

            Step("4. Verify Streetlight Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Streetlight Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select type of equipment = 'SSN Cimcon Dim Photocell' in Identity tab");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTypeOfEquipmentDropDown(typeofEquipment);

            Step("6. Click Save");
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

            Step("7. Verify Streetlight Editor panel disappears");
            VerifyEqual("7. Verify Streetlight Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("8. Select streetlight A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);

            Step("9. The following attributes are displayed in the Identity tab: 'Timeout', 'Retries', 'Last event log sequence', 'Last event request time', 'Last meter log sequence', 'Last meter request time', 'Last IMU log sequence', 'Last IMU request time', 'Is CPD'");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroup("Control System");
            VerifyEqual("9. Verify Timeout label", "Timeout", equipmentInventoryPage.StreetlightEditorPanel.GetTimeoutText());
            VerifyEqual("9. Verify Timeout input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsTimeoutNumericInputDisplayed());
            VerifyEqual("9. Verify Retries label", "Retries", equipmentInventoryPage.StreetlightEditorPanel.GetRetriesText());
            VerifyEqual("9. Verify Retries input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsRetriesNumericInputDisplayed());
            VerifyEqual("9. Verify Last event log sequence label", "Last event log sequence", equipmentInventoryPage.StreetlightEditorPanel.GetLastEventLogSequenceText());
            VerifyEqual("9. Verify Last event log sequence input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsLastEventLogSequenceInputDisplayed());
            VerifyEqual("9. Verify Last event request time value", "Last event request time", equipmentInventoryPage.StreetlightEditorPanel.GetLastEventRequestTimeText());
            VerifyEqual("9. Verify Last event request time input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsLastEventRequestTimeInputDisplayed());
            VerifyEqual("9. Verify Last meter log sequence label", "Last meter log sequence", equipmentInventoryPage.StreetlightEditorPanel.GetLastMeterLogSequenceText());
            VerifyEqual("9. Verify Last meter log sequence input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsLastMeterLogSequenceInputDisplayed());
            VerifyEqual("9. Verify Last meter request time label", "Last meter request time", equipmentInventoryPage.StreetlightEditorPanel.GetLastMeterRequestTimeText());
            VerifyEqual("9. Verify Last meter request time input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsLastMeterRequestTimeInputDisplayed());
            VerifyEqual("9. Verify Last IMU log sequence label", "Last IMU log sequence", equipmentInventoryPage.StreetlightEditorPanel.GetLastImuLogSequenceText());
            VerifyEqual("9. Verify Last IMU log sequence input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsLastImuLogSequenceInputDisplayed());
            VerifyEqual("9. Verify Last IMU request time label", "Last IMU request time", equipmentInventoryPage.StreetlightEditorPanel.GetLastImuRequestTimeText());
            VerifyEqual("9. Verify Last IMU request time input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsLastImuRequestTimeInputDisplayed());
            VerifyEqual("9. Verify Is CPD label", "Is CPD", equipmentInventoryPage.StreetlightEditorPanel.GetIsCpdText());
            VerifyEqual("9. Verify Is CPD checkbox is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsIsCpdCheckboxDisplayed());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_27 Switch - Create")]
        public void EI_27()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI27");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchDevice = SLVHelper.GenerateUniqueName("SWH");
            var typeOfEquipment = "ABEL-Vigilon A[Switch]";
            var expecteAddMenuItems = new List<string> { "Add GeoZone", "Add Device" };
            var expecteMoreMenuItems = new List<string> { "Import", "Export", "Replace Nodes" };
            var expectedTabList = new List<string> { "Identity", "Inventory", "Electricity network" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI27*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Dropdown Add menu then click Add Device menu item");
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddDeviceMenuItem();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisplayed();

            Step("6. Verify New Device panel appears");
            VerifyEqual("6. Verify New Device panel appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("7. Verify New Device panel lists following device types: 'BUILDING', 'CAMERA IP', 'CITY OBJECT', 'CONTROLLER DEVICE', 'ELECTRICAL COUNTER', 'ENVIRONMENTAL SENSOR', 'INPUTS', 'NATURE', 'NETWORK COMPONENT', 'OCCUPANCY SENSOR', 'OUTPUTS', 'PARKING PLACE', 'STREETLIGHT', 'SWITCH DEVICE', 'TANK', 'TRANSPORT SIGNAGE', 'VEHICLE', 'VEHICLE CHARGING STATION', 'WASTE CONTAINER', 'WEATHER STATION', 'CABINET CONTROLLER'");
            var expectedDeviceTypeList = DeviceType.GetList();
            var actualDeviceTypeList = equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetListOfDeviceTypes();
            VerifyEqual("7. Verify New Device panel lists following device types as expected", expectedDeviceTypeList, actualDeviceTypeList, false);

            Step("8. Select 'SWITCH DEVICE'");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectDevice(DeviceType.Switch);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.WaitForNewDevicePropertiesSectionDisplayed();

            Step("9. Verify New Device panel switches to controller property content");
            VerifyEqual("9. Verify New Device panel switches to controller property content", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsNewDevicePropertiesSectionDisplayed());

            Step("10. Verify Switch property content:");
            Step("  o The first line is controller icon and text 'SWITCH DEVICE'");
            VerifyEqual("10. Verify The first line is controller icon", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.CheckIfDeviceIcon(DeviceType.Switch));
            VerifyEqual("10. Verify text is 'SWITCH DEVICE'", "SWITCH DEVICE", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNewDeviceText());
            Step("  o Controller id property has a label whose text is 'Controller ID *' and a dropdown list is selectable");
            VerifyEqual("10. Verify Controller id property has a label whose text is 'Controller ID *'", "Controller ID *", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetControllerIdText());            
            VerifyEqual("10. Verify An dropdown is selectable", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsControllerIdDropDownSelectable());
            Step("  o Identifier property has a label whose text is 'Identifier *' and an input whose value is empty and is editable");
            VerifyEqual("10. Verify Identifier property has a label whose text is 'Identifier *'", "Identifier *", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetIdentifierText());
            VerifyEqual("10. Verify An input whose value is empty", string.Empty, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetIdentifierValue());
            VerifyEqual("[#1398297] 10. Verify An input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsIdentifierInputReadOnly());
            Step("  o Equipment type property has a label whose text is 'Type of equipment *' and a dropdown list whose value is empty and is selectable");
            VerifyEqual("10. Verify Equipment type property has a label whose text is 'Type of equipment *'", "Type of equipment *", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetTypeEquipmentText());
            VerifyEqual("10. Verify A dropdown list whose value is empty", "Select a value", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNewDeviceTypeOfEquipmentValue());
            VerifyEqual("10. Verify An dropdown is selectable", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsTypeOfEquipmentDropDownSelectable());

            Step("11. Enter an unexisting name");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(switchDevice);

            Step("12. Select a controller");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectControllerIdDropDown(controller);

            Step("13. Enter an inexisting identifier");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterIdentifierInput(switchDevice);

            Step("14. Select an equipment type");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectTypeOfEquipmentDropDown(typeOfEquipment);

            Step("15. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();

            Step("16. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel.'");
            VerifyEqual("16. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel.'", "Position the new device on the map. Click here to cancel.", equipmentInventoryPage.Map.GetRecorderText());

            Step("17. Verify New Device panel disappears");
            VerifyEqual("17. Verify New Device panel disappears", false, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("18. Verify Geozone Editor panel disappears");
            VerifyEqual("18. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("19. Specify boundary of the new device by steps: zoom in the map using mouse scroll button; zoom in once more time using zooming bar of the map; drag the map");
            equipmentInventoryPage.Map.DragMapToRandomLocation();
            equipmentInventoryPage.Map.ZoomInToGLLevel(ZoomGLLevel.m50);

            Step("20. Place the switch on the map");
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.WaitForTitleHasText();

            Step("21. Verify Map recorder panel disappears");
            VerifyEqual("21. Verify Map recorder panel disappears", false, equipmentInventoryPage.Map.IsRecorderDisplayed());

            Step("22. Verify The Switch is get selected on map and geozone tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("Verify The Switch '{0}' is selected geozone tree", switchDevice), switchDevice, selectedNodeName);
            VerifyTrue("22. Verify The Switch is selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL(), "Selected", "No device selected");

            Step("23. Verify Switch Editor panel appears");
            VerifyEqual("23. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("24. Verify Value of geozone is the name of geozone A");
            VerifyEqual(string.Format("24. Verify Value of GeoZone is '{0}'", geozone), geozone, equipmentInventoryPage.SwitchEditorPanel.GetGeozoneValue());

            Step("25. Verify Values of latitude and longitude are filled");
            VerifyEqual("25. Verify Value of Latitude is filled", true, !string.IsNullOrEmpty(equipmentInventoryPage.SwitchEditorPanel.GetLatitudeValue()));
            VerifyEqual("25. Verify Value of Longitude is filled", true, !string.IsNullOrEmpty(equipmentInventoryPage.SwitchEditorPanel.GetLongitudeValue()));

            Step("26. Verify There are 3 tabs in Switch Editor panel: 'Identity', 'Inventory', 'Electricity network'");
            var actualTabList = equipmentInventoryPage.SwitchEditorPanel.GetListOfTabsName();
            VerifyEqual("26. Verify There are 3 tabs in Switch Editor panel as expected", expectedTabList, actualTabList);

            Step("27. Verify In 'Identity' tab, values of name, controller id, identifier, equipment are the values input when creating it");
            VerifyEqual(string.Format("27. Verify Controller ID field is '{0}'", controller), controller, equipmentInventoryPage.SwitchEditorPanel.GetControllerIdValue());
            VerifyEqual(string.Format("27. Verify Identifer field is '{0}'", switchDevice), switchDevice, equipmentInventoryPage.SwitchEditorPanel.GetIdentifierValue());
            VerifyEqual(string.Format("27. Verify Type Of Equipment field is '{0}'", typeOfEquipment), typeOfEquipment, equipmentInventoryPage.SwitchEditorPanel.GetTypeOfEquipmentValue());

            var notedName = equipmentInventoryPage.SwitchEditorPanel.GetNameValue();
            var notedGeozoneName = equipmentInventoryPage.SwitchEditorPanel.GetGeozoneValue();
            var notedLatitude = equipmentInventoryPage.SwitchEditorPanel.GetLatitudeValue();
            var notedLongtitude = equipmentInventoryPage.SwitchEditorPanel.GetLongitudeValue();
            var notedControllerId = equipmentInventoryPage.SwitchEditorPanel.GetControllerIdValue();
            var notedIdentifier = equipmentInventoryPage.SwitchEditorPanel.GetIdentifierValue();
            var notedTypeOfEquipment = equipmentInventoryPage.SwitchEditorPanel.GetTypeOfEquipmentValue();

            Step("28. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("29. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("30. Browse to geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("31. Verify The newly-created switch is present in geozone A");
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Switch);
            VerifyEqual(string.Format("31. Verify The newly-created switch '{0}' is present in geozone '{1}'", switchDevice, geozone), true, subNodesList.Exists(p => p.Equals(switchDevice)));

            Step("32. Select the created switch");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchDevice);

            Step("33. Verify Switch Editor panel appears");
            VerifyEqual("33. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("34. Verify Switch Editor panel displays the same values of Name, GeoZone, Latitude, Longitude, Controller ID, Identifier, Equipment Type as before refreshing browser");
            VerifyDeviceBasicInfo(equipmentInventoryPage, notedName, notedGeozoneName);
            VerifyDeviceLatitudeLongitude(equipmentInventoryPage, notedLatitude, notedLongtitude);
            VerifyDeviceIdentity(equipmentInventoryPage, notedControllerId, notedIdentifier, notedTypeOfEquipment);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_27_01 Switch - Create - Validation")]
        public void EI_27_01()
        {
            var testData = GetTestDataOfEI_27_01();
            var controllerId = testData["ControllerId"];
            var controllerName = testData["ControllerName"];
            var geozone = SLVHelper.GenerateUniqueName("GZNEI2701");
            var newSwitch = SLVHelper.GenerateUniqueName("SWH");
            var existingSwitch = SLVHelper.GenerateUniqueName("SWHEx");
            var typeOfEquipment = "ABEL-Vigilon A[Switch]";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI2701*");
            CreateNewGeozone(geozone);
            CreateNewDevice(DeviceType.Switch, existingSwitch, controllerId, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Dropdown Add menu then click Add Device menu item");
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddDeviceMenuItem();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisplayed();

            Step("6. Verify New Device panel appears");
            VerifyEqual("6. Verify New Device panel appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("7. Select 'SWITCH DEVICE'");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectDevice(DeviceType.Switch);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.WaitForNewDevicePropertiesSectionDisplayed();

            Step("8. Verify New Device panel switches to controller property content");
            VerifyEqual("8. Verify New Device panel switches to controller property content", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsNewDevicePropertiesSectionDisplayed());
            VerifyEqual("[#1398297] 8. Verify Identifier input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsIdentifierInputReadOnly());

            Step("9. Leave all fields empty");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(string.Empty);

            Step("10. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("11. Verify A dialog with title 'Warning' and message 'Please enter a device name.' appears");
            VerifyEqual("11. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("11. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("11. Verify dialog message is 'Please enter a device name.'", "Please enter a device name.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("12. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("13. Verify The dialog disappears");
            VerifyEqual("13. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("14. Verify New Device panel still displays");
            VerifyEqual("14. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("15. Enter any value into Name field; Leave other fields empty");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(newSwitch);

            Step("16. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("17. Verify A dialog with title 'Warning' and message 'Please enter 'Controller ID' property.' appears");
            VerifyEqual("17. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("17. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("17. Verify dialog message is 'Please enter 'Controller ID' property.'", "Please enter 'Controller ID' property.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("18. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("19. Verify The dialog disappears");
            VerifyEqual("19. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("20. Verify New Device panel still displays");
            VerifyEqual("20. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("21. Select a value for Controller id field; Leave other fields intact");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectControllerIdDropDown(controllerName);

            Step("22. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("23. Verify A dialog with title 'Warning' and message 'Please enter 'Identifier' property.' appears");
            VerifyEqual("23. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("23. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("23. Verify dialog message is 'Please enter 'Identifier' property.'", "Please enter 'Identifier' property.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("24. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("25. Verify The dialog disappears");
            VerifyEqual("25. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("26. Verify New Device panel still displays");
            VerifyEqual("26. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("27. Enter any but not existing device name value into Identifier field; Leave other fields intact");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterIdentifierInput(newSwitch);

            Step("28. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("29. Verify A dialog with title 'Warning' and message 'Please enter 'Type of equipment' property.' appears");
            VerifyEqual("29. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("29. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("29. Verify dialog message is 'Please enter 'Type of equipment' property.'", "Please enter 'Type of equipment' property.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("30. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("31. Verify The dialog disappears");
            VerifyEqual("31. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("32. Verify New Device panel still displays");
            VerifyEqual("32. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("33. Enter an existing device name into Name field; Leave other fields intact");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(existingSwitch);

            Step("34. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("35. Verify A dialog with title 'Warning' and message 'This device name already exists!' appears");
            VerifyEqual("35. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("35. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("35. Verify dialog message is 'This device name already exists!'", "This device name already exists!", equipmentInventoryPage.Dialog.GetMessageText());

            Step("36. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("37. Verify The dialog disappears");
            VerifyEqual("37. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("38. Verify New Device panel still displays");
            VerifyEqual("38. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("39. Enter an unexisting name; Enter an existing identifier value; Other fields are left intact");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(newSwitch);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterIdentifierInput(existingSwitch);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectTypeOfEquipmentDropDown(typeOfEquipment);

            Step("40. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();

            Step("41. Verify New Device panel disappears");
            VerifyEqual("41. Verify New Device panel disappears", false, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("42. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel'");
            VerifyEqual("42. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel.'", "Position the new device on the map. Click here to cancel.", equipmentInventoryPage.Map.GetRecorderText());

            Step("43. Click on the map");
            equipmentInventoryPage.Map.DragMapToRandomLocation();
            equipmentInventoryPage.Map.ZoomInToGLLevel(ZoomGLLevel.m50);
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("44. Verify A dialog with title 'Error' and message 'Id '{switch id}@{controller id of step #21} used for item 'Device'! appears");            
            var expectedMessage = string.Format("Id '{0}@{1} already used for item 'Device'!", existingSwitch, controllerId);
            VerifyEqual("44. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("44. Verify dialog title is 'Error'", "Error", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual(string.Format("44. Verify dialog message is '{0}", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("45. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("46. Verify The dialog disappears");
            VerifyEqual("46. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("47. Verify Geozone Editor panel appears back");
            VerifyEqual("47. Verify Geozone Editor panel appears back", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("48. Verify There is no device with name previously entered in New Device panel present in geozone A");
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Switch);
            VerifyEqual(string.Format("48. Verify Switch '{0}' is not present in geozone '{1}'", newSwitch, geozone), false, subNodesList.Exists(p => p.Equals(newSwitch)));

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_28 Switch - Update")]
        public void EI_28()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI28");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);       

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI28*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select a switch A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);

            Step("4. Verify Switch Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Note tabs, expandable sections and all values in the editor of the switch, both editable and readonly ones");
            var tabsList = equipmentInventoryPage.SwitchEditorPanel.GetListOfTabsName();
            var groupsList = equipmentInventoryPage.SwitchEditorPanel.GetListOfGroupsName();
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.SwitchEditorPanel.ExpandGroupsActiveTab();
            //Identity of the light point
            var controllerId = equipmentInventoryPage.SwitchEditorPanel.GetControllerIdValue();
            var readonlyIdentifier = equipmentInventoryPage.SwitchEditorPanel.GetIdentifierValue();
            //Control system
            var typeOfEquipment = equipmentInventoryPage.SwitchEditorPanel.GetTypeOfEquipmentValue();
            var dimmingGroup = equipmentInventoryPage.SwitchEditorPanel.GetDimmingGroupValue();
            var uniqueAddress = equipmentInventoryPage.SwitchEditorPanel.GetUniqueAddressValue();
            var controllerInstallDate = equipmentInventoryPage.SwitchEditorPanel.GetControllerInstallDateValue();
            var installStatus = equipmentInventoryPage.SwitchEditorPanel.GetInstallStatusValue();

            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.SwitchEditorPanel.ExpandGroupsActiveTab();
            //Location
            var address1 = equipmentInventoryPage.SwitchEditorPanel.GetAddress1Value();
            //Lamp
            var lampType = equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue();
            var lampWattage = equipmentInventoryPage.SwitchEditorPanel.GetLampWattageValue();
            var fixedSavedPower = equipmentInventoryPage.SwitchEditorPanel.GetFixedSavedPowerValue();
            //Comment
            var comment = equipmentInventoryPage.SwitchEditorPanel.GetCommentValue();

            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");
            equipmentInventoryPage.SwitchEditorPanel.ExpandGroupsActiveTab();
            var energySupplier = equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue();
            var networkType = equipmentInventoryPage.SwitchEditorPanel.GetNetworkTypeValue();
            var segment = equipmentInventoryPage.SwitchEditorPanel.GetSegmentValue();
            var section = equipmentInventoryPage.SwitchEditorPanel.GetSectionValue();

            Step("6. Change values of all editable fields except equipment type");
            EnterSwitchEditableValues(equipmentInventoryPage);

            Step("7. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("8. Verify Switch Editor panel disappears");
            VerifyEqual("8. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("9. Verify There is no any node in geozone being selected");
            VerifyEqual("9. Verify There is no any node in geozone being selected", false, equipmentInventoryPage.GeozoneTreeMainPanel.HasSelectedNode());

            Step("10. Select the switch again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchName);

            Step("11. Verify Switch Editor panel appears");
            VerifyEqual("11. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("12. Verify Tabs, sections and readonly values are remained unchanged against step #5");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.SwitchEditorPanel.ExpandGroupsActiveTab();
            var actualTabsList = equipmentInventoryPage.SwitchEditorPanel.GetListOfTabsName();
            var acutalGroupsList = equipmentInventoryPage.SwitchEditorPanel.GetListOfGroupsName();
            var actualReadonlyIdentifier = equipmentInventoryPage.SwitchEditorPanel.GetIdentifierValue();
            VerifyEqual("12. Verify Tabs are unchanged", tabsList, actualTabsList);
            VerifyEqual("12. Verify Group sections are unchanged", groupsList, acutalGroupsList);
            var actualIdentifier = equipmentInventoryPage.SwitchEditorPanel.GetIdentifierValue();
            VerifyEqual(string.Format("12. Verify Identifier is '{0}'", readonlyIdentifier), readonlyIdentifier, actualIdentifier);

            Step("13. Verify Editable values are the new values (values after step #6)");
            VerifySwitchEditableValuesAreChanged(equipmentInventoryPage, controllerId, dimmingGroup, uniqueAddress, controllerInstallDate, installStatus
            , address1, lampType, lampWattage, fixedSavedPower, comment, energySupplier, networkType, segment, section);

            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.SwitchEditorPanel.ExpandGroupsActiveTab();
            //Identity of the light point
            controllerId = equipmentInventoryPage.SwitchEditorPanel.GetControllerIdValue();
            readonlyIdentifier = equipmentInventoryPage.SwitchEditorPanel.GetIdentifierValue();
            //Control system
            typeOfEquipment = equipmentInventoryPage.SwitchEditorPanel.GetTypeOfEquipmentValue();
            dimmingGroup = equipmentInventoryPage.SwitchEditorPanel.GetDimmingGroupValue();
            uniqueAddress = equipmentInventoryPage.SwitchEditorPanel.GetUniqueAddressValue();
            controllerInstallDate = equipmentInventoryPage.SwitchEditorPanel.GetControllerInstallDateValue();
            installStatus = equipmentInventoryPage.SwitchEditorPanel.GetInstallStatusValue();

            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.SwitchEditorPanel.ExpandGroupsActiveTab();
            //Location
            address1 = equipmentInventoryPage.SwitchEditorPanel.GetAddress1Value();
            //Lamp
            lampType = equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue();
            lampWattage = equipmentInventoryPage.SwitchEditorPanel.GetLampWattageValue();
            fixedSavedPower = equipmentInventoryPage.SwitchEditorPanel.GetFixedSavedPowerValue();
            //Comment
            comment = equipmentInventoryPage.SwitchEditorPanel.GetCommentValue();

            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");
            equipmentInventoryPage.SwitchEditorPanel.ExpandGroupsActiveTab();
            energySupplier = equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue();
            networkType = equipmentInventoryPage.SwitchEditorPanel.GetNetworkTypeValue();
            segment = equipmentInventoryPage.SwitchEditorPanel.GetSegmentValue();
            section = equipmentInventoryPage.SwitchEditorPanel.GetSectionValue();

            Step("14. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("15. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("16. Browse to the switch again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);

            Step("17. Verify Switch Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("17. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("18. Verify Tabs, sections and readonly values are remained unchanged against step #5");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.SwitchEditorPanel.ExpandGroupsActiveTab();
            actualTabsList = equipmentInventoryPage.SwitchEditorPanel.GetListOfTabsName();
            acutalGroupsList = equipmentInventoryPage.SwitchEditorPanel.GetListOfGroupsName();
            actualReadonlyIdentifier = equipmentInventoryPage.SwitchEditorPanel.GetIdentifierValue();
            VerifyEqual("18. Verify Tabs are unchanged", tabsList, actualTabsList);
            VerifyEqual("18. Verify Group sections are unchanged", groupsList, acutalGroupsList);
            actualIdentifier = equipmentInventoryPage.SwitchEditorPanel.GetIdentifierValue();
            VerifyEqual(string.Format("18. Verify Identifier is '{0}'", readonlyIdentifier), readonlyIdentifier, actualIdentifier);

            Step("19. Verify Editable values are remained to be the new values (values after step #6)");
            VerifySwitchEditableValues(equipmentInventoryPage, controllerId, dimmingGroup, uniqueAddress, controllerInstallDate, installStatus
            , address1, lampType, lampWattage, fixedSavedPower, comment, energySupplier, networkType, segment, section);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_28_01 Switch - Update - Validation")]
        public void EI_28_01()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI2801");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var newSwitchName = SLVHelper.GenerateUniqueName("SWHNew");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - 'Enable device location' option for Equipment Inventory app in Back Office must be checked");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI2801*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);

            var loginPage = Browser.OpenBackOfficeApp();
            var backOfficePage = loginPage.LoginAsValidUserToBackOffice(Settings.Users["admin"].Username, Settings.Users["admin"].Password);
            backOfficePage.BackOfficeOptionsPanel.SelectConfiguration(App.EquipmentInventory);
            var firstDeviceLocationValue = backOfficePage.BackOfficeDetailsPanel.GetEquipmentDeviceLocationValue();
            backOfficePage.BackOfficeDetailsPanel.TickEquipmentDeviceLocationCheckbox(true);
            backOfficePage.BackOfficeDetailsPanel.ClickSaveButton();
            backOfficePage.WaitForPreviousActionComplete();

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var desktopPage = Browser.NavigateToLoggedInCMS();
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select a switch");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);

            Step("4. Verify Switch Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Clear Name field");
            equipmentInventoryPage.SwitchEditorPanel.EnterNameInput(string.Empty);

            Step("6. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("7. Verify A dialog with title 'Warning' and message 'Please enter a device name.' appears");
            VerifyEqual("7. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("7. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("7. Verify dialog message is 'Please enter a device name.'", "Please enter a device name.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("8. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("9. Verify The dialog disappears");
            VerifyEqual("9.Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("10. Verify Switch Editor panel is still displayed");
            VerifyEqual("10. Verify Switch Editor panel still displayed", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("11. Verify Switch A is still selected in geozone tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("11. Verify The Switch '{0}' is selected geozone tree", switchName), switchName, selectedNodeName);

            Step("12. Verify Switch A is still selected on map");
            VerifyTrue("12. Verify Switch A is selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL(), "Selected", "No device selected");

            Step("13. Enter any value into Name field");
            equipmentInventoryPage.SwitchEditorPanel.EnterNameInput(newSwitchName);

            Step("14. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("15. Verify Switch Editor disappears");
            VerifyEqual("15. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("16. Verify There is not any dialog appearing");
            VerifyEqual("16. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("17. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newSwitchName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("18. Verify Switch Editor panel appears");
            VerifyEqual("18. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("19. Verify Value of Name field are the new value");
            VerifyEqual("19. Verify Value of Name field are the new value", newSwitchName, equipmentInventoryPage.SwitchEditorPanel.GetNameValue());

            Step("20. Note current latitude and longitude values");
            var latitude = equipmentInventoryPage.SwitchEditorPanel.GetLatitudeValue();
            var longitude = equipmentInventoryPage.SwitchEditorPanel.GetLongitudeValue();

            Step("21. Clear Latitude field");
            equipmentInventoryPage.SwitchEditorPanel.EnterLatitudeInput(string.Empty);

            Step("22. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("23. Verify Switch Editor panel disappears");
            VerifyEqual("23. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("24. Verify Switch A is no longer selected in geozone tree");
            selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyTrue(string.Format("24. Verify The Switch '{0}' is no longer selected geozone tree", switchName), switchName != selectedNodeName, switchName, selectedNodeName);

            Step("25. Verify Switch A is no longer selected on map");
            VerifyTrue("25. Verify Switch A is no longer selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL() == false, "No device selected", "Selected");

            Step("26. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newSwitchName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("27. Verify Switch Editor panel appears");
            VerifyEqual("27. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("28. Verify Value of latitude field is restored and equals the value noted at step #20");
            VerifyEqual(string.Format("28. Verify Value of latitude field is restored and equals '{0}'", latitude), latitude, equipmentInventoryPage.SwitchEditorPanel.GetLatitudeValue());

            Step("29. Verify Value of longitude field is remained the same with the value noted at step #20");
            VerifyEqual(string.Format("29. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.SwitchEditorPanel.GetLongitudeValue());

            Step("30. Clear Longitude field");
            equipmentInventoryPage.SwitchEditorPanel.EnterLongitudeInput(string.Empty);

            Step("31. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("32. Verify Switch Editor panel disappears");
            VerifyEqual("32. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("33. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newSwitchName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("34. Verify Switch Editor panel appears");
            VerifyEqual("34. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("35. Verify Value of latitude field is remained the same with the value noted at step #20");
            VerifyEqual(string.Format("35. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.SwitchEditorPanel.GetLatitudeValue());

            Step("36. Verify Value of longitude field is restored and equals the value noted at step #20");
            VerifyEqual(string.Format("36. Verify Value of longitude field is restored and equals the value '{0}'", longitude), longitude, equipmentInventoryPage.SwitchEditorPanel.GetLongitudeValue());

            Step("37. Clear both Latitude and Longitude fields");
            equipmentInventoryPage.SwitchEditorPanel.EnterLatitudeInput(string.Empty);
            equipmentInventoryPage.SwitchEditorPanel.EnterLongitudeInput(string.Empty);

            Step("38. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("39. Verify Switch Editor panel disappears");
            VerifyEqual("39. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("40. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newSwitchName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("41. Verify Switch Editor panel appears");
            VerifyEqual("41. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("42. Verify Values of latitude and longitude fields are remained the same with the values noted at step #20");
            VerifyEqual(string.Format("42. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.SwitchEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("42. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.SwitchEditorPanel.GetLongitudeValue());

            Step("43. Enter values of alphanumeric/non-alphanumeric into Latitude and Longitude fields");
            equipmentInventoryPage.SwitchEditorPanel.EnterLatitudeInput(SLVHelper.GenerateString());
            equipmentInventoryPage.SwitchEditorPanel.EnterLongitudeInput(SLVHelper.GenerateString());

            Step("44. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("45. Verify Switch Editor panel disappears");
            VerifyEqual("45. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("46. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newSwitchName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("47. Verify Switch Editor panel appears");
            VerifyEqual("Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("48. Verify Values of latitude and longitude fields are remained the same with the values noted at step #20");
            VerifyEqual(string.Format("47. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.SwitchEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("47. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.SwitchEditorPanel.GetLongitudeValue());

            Step("49. Increase 1 the last number of Latitude and Longitude fields");
            var newLatitude = IncreaseLatLong(latitude);
            var newLongitude = IncreaseLatLong(longitude);
            equipmentInventoryPage.SwitchEditorPanel.EnterLatitudeInput(newLatitude);
            equipmentInventoryPage.SwitchEditorPanel.EnterLongitudeInput(newLongitude);
            equipmentInventoryPage.SwitchEditorPanel.EnterLongitudeInput(newLongitude); //Re-enter 2nd time for auto-filled input issue.

            Step("50. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("51. Verify Switch Editor panel disappears");
            VerifyEqual("51. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("52. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newSwitchName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("53. Verify Switch Editor panel appears");
            VerifyEqual("53. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("54. Verify Values of latitude and longitude fields are the new values");
            var actualLatitude = equipmentInventoryPage.SwitchEditorPanel.GetLatitudeValue();
            var actualLongitude = equipmentInventoryPage.SwitchEditorPanel.GetLongitudeValue();
            VerifyTrue(string.Format("54. Verify Value of latitude field is changed '{0}' to '{1}'", latitude, newLatitude), latitude != actualLatitude, actualLatitude, latitude);
            VerifyTrue(string.Format("54. Verify Value of longitude field is changed {0}' to '{1}'", longitude, newLongitude), longitude != actualLongitude, actualLongitude, longitude);

            Step("55. Refresh browser without saving");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("56. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("57. Browse to and select switch A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(string.Format(@"{0}\{1}", geozone, newSwitchName));

            Step("58. Verify Switch Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("58. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("59. Verify Value of name, latitude, longitude are its last updated values");
            VerifyEqual(string.Format("59. Verify Value of latitude field is '{0}'", actualLatitude), actualLatitude, equipmentInventoryPage.SwitchEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("59. Verify Value of longitude field is {0}'", actualLongitude), actualLongitude, equipmentInventoryPage.SwitchEditorPanel.GetLongitudeValue());

            try
            {
                DeleteGeozone(geozone);

                backOfficePage = Browser.NavigateToLoggedInBackOfficeApp();
                backOfficePage.BackOfficeOptionsPanel.SelectConfiguration(App.EquipmentInventory);
                backOfficePage.BackOfficeDetailsPanel.TickEquipmentDeviceLocationCheckbox(false);
                backOfficePage.BackOfficeDetailsPanel.ClickSaveButton();
                backOfficePage.WaitForPreviousActionComplete();
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_28_02 Switch - Update - Per Control Technology")]
        public void EI_28_02()
        {
            var testData = GetTestDataOfEI_28_02();
            var xmlEquipmentTypes = testData["EquipmentTypes"] as List<string>;
            var geozone = SLVHelper.GenerateUniqueName("GZNEI2802");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI2802*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select switch A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);

            Step("4. Verify Switch Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Get list of control techlonogy and for each techlonogy, do following steps");
            foreach (var equipmentType in xmlEquipmentTypes)
            {
                Step("5. Select another equipment type from Equipment Type dropdown");
                Info(string.Format("Select equipment type '{0}'", equipmentType));
                equipmentInventoryPage.SwitchEditorPanel.SelectTypeOfEquipmentDropDown(equipmentType);

                Step("7. Click Save");
                equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("8. Verify Control Editor panel disappears");
                VerifyEqual("8. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("9. Select switch A again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchName);
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

                Step("10. Verify Switch Editor panel appears back");
                VerifyEqual("10. Verify Switch Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("11. Note tabs, expandable sections and all values in the editor of the switch, both editable and readonly ones");
                var notedTabs = equipmentInventoryPage.SwitchEditorPanel.GetListOfTabsName();
                var notedGroups = equipmentInventoryPage.SwitchEditorPanel.GetListOfGroupsName();

                Step("12. Change values of all editable fields except equipment type");
                equipmentInventoryPage.SwitchEditorPanel.EnterEditablePropertiesValue("Controller ID *", "Type of equipment *", "Picture file path");
                var dicNotedReadOnlyProperties = equipmentInventoryPage.SwitchEditorPanel.GetReadOnlyPropertiesValue();
                var dicNotedEditableProperties = equipmentInventoryPage.SwitchEditorPanel.GetEditablePropertiesValue();

                Step("13. Click Save");
                equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("14. Verify Control Editor panel disappears");
                VerifyEqual("14. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("15. Verify There is no any node in geozone being selected");
                VerifyEqual("15. Verify There is no any node in geozone being selected", false, equipmentInventoryPage.GeozoneTreeMainPanel.HasSelectedNode());

                Step("16. Select the switch again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchName);

                Step("17. Verify Switch Editor panel appears");
                VerifyEqual("17. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("18. Verify Tabs, sections and readonly values are remained unchanged against step #10");
                var tabs = equipmentInventoryPage.SwitchEditorPanel.GetListOfTabsName();
                var groups = equipmentInventoryPage.SwitchEditorPanel.GetListOfGroupsName();
                var dicReadOnlyProperties = equipmentInventoryPage.SwitchEditorPanel.GetReadOnlyPropertiesValue();
                var dicEditableProperties = equipmentInventoryPage.SwitchEditorPanel.GetEditablePropertiesValue();
                VerifyEqual("18. Verify Tabs is remained", notedTabs, tabs);
                VerifyEqual("18. Verify Sections is remained", notedGroups, groups);
                VerifyEqual("18. Verify Readonly values are remained", dicNotedReadOnlyProperties, dicReadOnlyProperties);

                Step("19. Verify Editable values are the new values (values after step #12)");
                VerifyEqual(string.Format("[{0}] 19. Verify Editable values are the new values", equipmentType), dicNotedEditableProperties, dicEditableProperties);

                Step("20. Refresh browser");
                Step("21. Go to Equipment Inventory again");
                desktopPage = Browser.RefreshLoggedInCMS();
                equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

                Step("22. Browse to the switch again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

                Step("23. Verify Switch Editor panel appears");
                VerifyEqual("23. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("24. Verify Tabs, sections and readonly values are remained unchanged against step #10");
                tabs = equipmentInventoryPage.SwitchEditorPanel.GetListOfTabsName();
                groups = equipmentInventoryPage.SwitchEditorPanel.GetListOfGroupsName();
                var dicReadOnlyPropertiesAfterRefreshed = equipmentInventoryPage.SwitchEditorPanel.GetReadOnlyPropertiesValue();
                VerifyEqual("24. Verify Tabs is remained", notedTabs, tabs);
                VerifyEqual("24. Verify Sections is remained", notedGroups, groups);
                VerifyEqual("24. Verify Readonly values are remained", dicNotedReadOnlyProperties, dicReadOnlyPropertiesAfterRefreshed);

                Step("25. Verify Editable values are remained to be the new values (values after step #12)");
                var dicEditablePropertiesAfterRefreshed = equipmentInventoryPage.SwitchEditorPanel.GetEditablePropertiesValue();
                VerifyEqual(string.Format("[{0}] 25. Verify Editable values are the new values", equipmentType), dicNotedEditableProperties, dicEditablePropertiesAfterRefreshed);

                equipmentInventoryPage.SwitchEditorPanel.SelectTab("Identity");
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_29 Switch - Delete")]
        public void EI_29()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI29");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI29*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select a switch A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);

            Step("4. Verify Switch Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Click Remove icon button");
            equipmentInventoryPage.SwitchEditorPanel.ClickDeleteButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("6. Verify A dialog with message 'Would you like to delete {{switch A's name}} equipment ?' appears");
            var expectedMessage = string.Format("Would you like to delete {0} equipment ?", switchName);
            VerifyEqual("6. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual(string.Format("6. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("7. Click No");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("8. Verify The dialog disappears");
            VerifyEqual("8. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("9. Verify Switch Editor panel remains displaying");
            VerifyEqual("Verify Switch Editor panel remains displaying", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("10. Verify Switch A is still remained selected in Geozone Tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("10. Verify Switch '{0}' is still remained selected in Geozone Tree", switchName), switchName, selectedNodeName);

            Step("11. Click Remove icon button again");
            equipmentInventoryPage.SwitchEditorPanel.ClickDeleteButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("12. Verify A dialog with message 'Would you like to delete {{switch A's name}} equipment ?' appears again");
            VerifyEqual("12. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual(string.Format("12. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("13. Click Yes");
            equipmentInventoryPage.Dialog.ClickYesButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForHeaderMessageDisappeared();

            Step("14. Verify The dialog disappears");
            VerifyEqual("14. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("15. Verify Switch Editor panel disappears");
            VerifyEqual("15. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("16. Verify Switch A is no longer present in its parent geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Switch);
            VerifyEqual(string.Format("16. Verify Switch '{0}' is no longer present in its parent geozone '{1}'", switchName, geozone), false, subNodesList.Exists(p => p.Equals(switchName)));

            Step("17. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("18. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("19. Browse to the switch A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("20. Verify Switch A is not present in its parent geozone");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Switch);
            VerifyEqual(string.Format("20. Verify Switch '{0}' is not present in its parent geozone '{1}'", switchName, geozone), false, subNodesList.Exists(p => p.Equals(switchName)));

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_30 Switch - Duplicate")]
        public void EI_30()
        {
            var testData = GetTestDataOfEI_30();
            var geozone = SLVHelper.GenerateUniqueName("GZNE30");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = string.Format("SWH{0}DUP", DateTime.Now.Timestamp());
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNE30*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select a switch A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);

            Step("4. Verify Switch Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Note tabs, expandable sections and all values in the editor of the switch, both editable and readonly ones");
            var expectedTabsList = equipmentInventoryPage.SwitchEditorPanel.GetListOfTabsName();
            var expectedGroupsList = equipmentInventoryPage.SwitchEditorPanel.GetListOfGroupsName();
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.SwitchEditorPanel.ExpandGroupsActiveTab();
            //Identity of the light point
            var controllerId = equipmentInventoryPage.SwitchEditorPanel.GetControllerIdValue();
            //Control system
            var typeOfEquipment = equipmentInventoryPage.SwitchEditorPanel.GetTypeOfEquipmentValue();
            var dimmingGroup = equipmentInventoryPage.SwitchEditorPanel.GetDimmingGroupValue();
            var uniqueAddress = equipmentInventoryPage.SwitchEditorPanel.GetUniqueAddressValue();
            var controllerInstallDate = equipmentInventoryPage.SwitchEditorPanel.GetControllerInstallDateValue();
            var installStatus = equipmentInventoryPage.SwitchEditorPanel.GetInstallStatusValue();

            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.SwitchEditorPanel.ExpandGroupsActiveTab();
            //Location
            var address1 = equipmentInventoryPage.SwitchEditorPanel.GetAddress1Value();
            //Lamp
            var lampType = equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue();
            var lampWattage = equipmentInventoryPage.SwitchEditorPanel.GetLampWattageValue();
            var fixedSavedPower = equipmentInventoryPage.SwitchEditorPanel.GetFixedSavedPowerValue();
            //Comment
            var comment = equipmentInventoryPage.SwitchEditorPanel.GetCommentValue();

            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");
            equipmentInventoryPage.SwitchEditorPanel.ExpandGroupsActiveTab();
            var energySupplier = equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue();
            var networkType = equipmentInventoryPage.SwitchEditorPanel.GetNetworkTypeValue();
            var segment = equipmentInventoryPage.SwitchEditorPanel.GetSegmentValue();
            var section = equipmentInventoryPage.SwitchEditorPanel.GetSectionValue();

            Step("6. Click Duplicate button");
            equipmentInventoryPage.SwitchEditorPanel.ClickDuplicateButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForDuplicateEquipmentPanelDisplayed();

            Step("7. Verify Duplicate equipment panel appears");
            VerifyEqual("7. Verify Duplicate equipment panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsDuplicateEquipmentPanelDisplayed());

            Step("8. Verify The first line in the panel is switch icon and text 'SWITCH DEVICE'");
            VerifyEqual("8. Verify The first line in the panel is switch icon", true, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.CheckIfDeviceIcon(DeviceType.Switch));
            VerifyEqual("8. Verify text is 'SWITCH DEVICE'", "SWITCH DEVICE", equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetDeviceCaptionText());

            Step("9. Verify Switch name property has a label whose text is 'Name' and an input whose value is the name of switch A");
            VerifyEqual("9. Verify Switch name property has a label whose text is 'Name'", "Name", equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetNameText());
            VerifyEqual(string.Format("9. Verify an input whose value is '{0}'", switchName), switchName, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetNameValue());

            Step("10. Verify Next to Name field is a numeric up down input with value filled (so called Counter input)");
            VerifyEqual("10. Verify Next to Name field is a numeric up down input", true, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.IsCounterNumericUpDownInput());
            VerifyEqual("10. Verify input with value filled", true, !string.IsNullOrEmpty(equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetCountValue()));

            Step("11. Verify There is no entry in device list and barcode section is not displayed");
            VerifyEqual("11. Verify There is no entry in device list", true, !equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetListOfDuplicatedDevicesName().Any());
            VerifyEqual("11. Verify barcode section is not displayed", false, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.IsBarcodeSectionDisplayed());

            Step("12. Verify Map recorder panel appears with text 'Click on the map to position a new device. Click here to stop.'");
            VerifyEqual("12. Verify Map recorder panel appears", true, equipmentInventoryPage.Map.IsRecorderDisplayed());
            VerifyEqual("12. Verify Map recorder text is 'Click on the map to position a new device. Click here to stop.'", "Click on the map to position a new device. Click here to stop.", equipmentInventoryPage.Map.GetRecorderText());

            Step("13. Click Cancel section on map recorder panel");
            equipmentInventoryPage.Map.ClickRecorderCancelButton();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.SwitchEditorPanel.WaitForDuplicateEquipmentPanelDisappeared();

            Step("14. Verify Map recorder panel disappears");
            VerifyEqual("14. Verify Map recorder panel disappears", false, equipmentInventoryPage.Map.IsRecorderDisplayed());

            Step("15. Verify Duplicate equipment panel disappears");
            VerifyEqual("15. Verify Duplicate equipment panel appears", false, equipmentInventoryPage.SwitchEditorPanel.IsDuplicateEquipmentPanelDisplayed());

            Step("16. Verify Switch editor panel appears back");
            VerifyEqual("Verify Switch Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("17. Verify Switch A is still being selected in geozone and map");
            VerifyEqual("17. Verify The Switch is being selected in geozone tree", switchName, equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName());
            equipmentInventoryPage.Map.MoveToSelectedDeviceGL();
            VerifyEqual("17. Verify The Switch is being selected in map", switchName, equipmentInventoryPage.Map.GetDeviceNameGL());

            Step("18. Repeat steps from #6 to #12");
            equipmentInventoryPage.SwitchEditorPanel.ClickDuplicateButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForDuplicateEquipmentPanelDisplayed();

            Step("--> Verify Duplicate equipment panel appears");
            VerifyEqual("18. Verify Duplicate equipment panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsDuplicateEquipmentPanelDisplayed());

            Step("--> Verify The first line in the panel is switch icon and text 'SWITCH DEVICE'");
            VerifyEqual("18. Verify The first line in the panel is switch icon", true, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.CheckIfDeviceIcon(DeviceType.Switch));
            VerifyEqual("18. Verify text is 'SWITCH DEVICE'", "SWITCH DEVICE", equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetDeviceCaptionText());

            Step("--> Verify Switch name property has a label whose text is 'Name' and an input whose value is the name of switch A");
            VerifyEqual("18. Verify Switch name property has a label whose text is 'Name'", "Name", equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetNameText());
            VerifyEqual(string.Format("18. Verify an input whose value is '{0}'", switchName), switchName, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetNameValue());

            Step("--> Verify Next to Name field is a numeric up down input with value filled (so called Counter input)");
            VerifyEqual("18. Verify Next to Name field is a numeric up down input", true, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.IsCounterNumericUpDownInput());
            VerifyEqual("18. Verify input with value filled", true, !string.IsNullOrEmpty(equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetCountValue()));

            Step("--> Verify There is no entry in device list and barcode section is not displayed");
            VerifyEqual("18. Verify There is no entry in device list", true, !equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetListOfDuplicatedDevicesName().Any());
            VerifyEqual("18. Verify barcode section is not displayed", false, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.IsBarcodeSectionDisplayed());

            Step("--> Verify Map recorder panel appears with text 'Click on the map to position a new device. Click here to stop.'");
            VerifyEqual("18. Verify Map recorder panel appears", true, equipmentInventoryPage.Map.IsRecorderDisplayed());
            VerifyEqual("18. Verify Map recorder text is 'Click on the map to position a new device. Click here to stop.'", "Click on the map to position a new device. Click here to stop.", equipmentInventoryPage.Map.GetRecorderText());

            Step("19. Note the value of Counter");
            var listDuplicatedionSL = new List<string>();
            var counter = int.Parse(equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetCountValue());
            var duplicatedName = string.Format("{0}{1}", switchName, counter);

            Step("20. Click on the map to place the new device");
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("21. Verify Duplicate equipment panel appears");
            VerifyEqual("21. Verify Duplicate equipment panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsDuplicateEquipmentPanelDisplayed());

            Step("22. Verify Name and Counter input fields are disabled. Counter's value increases 1");
            VerifyEqual("22. Verify Name input field is disabled", true, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.IsNameInputReadOnly());
            VerifyEqual("22. Verify Counter input field is disabled", true, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.IsCounterInputReadOnly());
            VerifyEqual("22. Verify Counter's value increases 1", counter + 1, int.Parse(equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetCountValue()));

            Step(string.Format("23. Verify There is one (more) entry added in device list with name '{0}'", duplicatedName));
            var deviceList = equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetListOfDuplicatedDevicesName();
            VerifyEqual(string.Format("23. Verify device list has '{0}'", duplicatedName), true, deviceList.Any(p => p.Equals(duplicatedName)));
            listDuplicatedionSL.Add(duplicatedName);

            Step("24. Verify Barcode section is displayed. Barcode section displays an input field and OK button");
            VerifyEqual("24. Verify Barcode section is displayed", true, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.IsBarcodeSectionDisplayed());
            VerifyEqual("24. Verify Barcode section displays an input field", true, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.IsBarcodeInputDisplayed());
            VerifyEqual("24. Verify Barcode section displays OK button", true, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.IsBarcodeOkButtonDisplayed());

            Step("25. Repeat steps from #19 to the end a couple of times to have more duplicates");
            Step("26. Verify The same expectation of repeated steps");
            for (int i = 0; i < 3; i++)
            {
                counter = int.Parse(equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetCountValue());
                duplicatedName = string.Format("{0}{1}", switchName, counter);

                Step("--> Click on the map to place the new device");
                equipmentInventoryPage.Map.ClickRandomPoint();
                equipmentInventoryPage.WaitForPreviousActionComplete();

                Step("--> Verify Duplicate equipment panel appears");
                VerifyEqual("26. Verify Duplicate equipment panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsDuplicateEquipmentPanelDisplayed());

                Step("--> Verify Name and Counter input fields are disabled. Counter's value increases 1");
                VerifyEqual("26. Verify Name input field is disabled", true, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.IsNameInputReadOnly());
                VerifyEqual("26. Verify Counter input field is disabled", true, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.IsCounterInputReadOnly());
                VerifyEqual("26. Verify Counter's value increases 1", counter + 1, int.Parse(equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetCountValue()));

                Step(string.Format("--> Verify There is one (more) entry added in device list with name '{0}'", duplicatedName));
                deviceList = equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.GetListOfDuplicatedDevicesName();
                VerifyEqual(string.Format("26. Verify device list has '{0}'", duplicatedName), true, deviceList.Any(p => p.Equals(duplicatedName)));
                listDuplicatedionSL.Add(duplicatedName);

                Step("--> Verify Barcode section is displayed. Barcode section displays an input field and OK button");
                VerifyEqual("26. Verify Barcode section is displayed", true, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.IsBarcodeSectionDisplayed());
                VerifyEqual("26. Verify Barcode section displays an input field", true, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.IsBarcodeInputDisplayed());
                VerifyEqual("26. Verify Barcode section displays OK button", true, equipmentInventoryPage.SwitchEditorPanel.DuplicateEquipmentPanel.IsBarcodeOkButtonDisplayed());
            }

            Step("27. Select each duplicate switch");
            Step("28. Verify Tabs, expandable sections and all values(except unique address) of each are the same as noted at step #5");
            Step("29. Unique address of duplicates should be empty");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            var allSwitchesInSelectedGeozone = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Switch);
            foreach (var switchDevice in listDuplicatedionSL)
            {
                if (allSwitchesInSelectedGeozone.Exists(p => p.Equals(switchDevice)))
                { 
                    Step(string.Format("--> Verify values of '{0}'", switchDevice));
                    equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchDevice);
                    equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

                    var tabsList = equipmentInventoryPage.SwitchEditorPanel.GetListOfTabsName();
                    var groupsList = equipmentInventoryPage.SwitchEditorPanel.GetListOfGroupsName();
                    VerifyEqual("29. Verify Tabs as expected", expectedTabsList, tabsList);
                    VerifyEqual("29. Verify Groups as expected", expectedGroupsList, groupsList);
                    VerifySwitchEditableValues(equipmentInventoryPage, controllerId, dimmingGroup, string.Empty, controllerInstallDate, installStatus
                    , address1, lampType, lampWattage, fixedSavedPower, comment, energySupplier, networkType, segment, section);

                    equipmentInventoryPage.DeleteCurrentDevice();
                }
                else
                    Warning(string.Format("[SC-1378] 29. Equipment Inventory - Duplicated device '{0}' is not immediately visible in the geozone tree", switchDevice));
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_31 Switch - Commission")]
        public void EI_31()
        {
            var testData = GetTestDataOfEI_31();
            var controllerId = testData["ControllerId"];
            var controllerName = testData["ControllerName"];
            var geozone = SLVHelper.GenerateUniqueName("GZNEI31");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);
            var expectedSections = new List<string> { "Check database configuration", "Commissioning" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create switch using Smartsims/Smartsims commission");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI31*");
            CreateNewGeozone(geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controllerId, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3.  Select new switch");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Switch Editor panel appears");            
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Click Commission button");
            equipmentInventoryPage.SwitchEditorPanel.ClickCommissionButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForCommissionPanelDisplayed();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("6. Verify Commission panel appears");
            VerifyEqual("Verify Commission panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsCommissionPanelDisplayed());

            Step("7. Verify Commissioning results are displayed: there are 2 sections 'Check database configuration' and 'Commissioning'");
            var actualSections = equipmentInventoryPage.SwitchEditorPanel.CommissionPanel.GetListOfSections();
            VerifyEqual("8. Verify Commissioning results are displayed: there are 2 sections 'Check database configuration' and 'Commissioning'", expectedSections, actualSections, false);

            Step("8. Verify Under each section is a list of details which contains at least 1 line. Each line has an icon Passed and text");
            VerifyEqual("8. Verify Each line has an icon Passed and text", true, equipmentInventoryPage.SwitchEditorPanel.CommissionPanel.AreMessagesContainingIconPassedAndText());

            Step("9. Click Back");
            equipmentInventoryPage.SwitchEditorPanel.CommissionPanel.ClickBackButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForCommissionPanelDisappeared();

            Step("10. Verify Commission panel disappears");
            VerifyEqual("10. Verify Commission panel disappears", false, equipmentInventoryPage.SwitchEditorPanel.IsCommissionPanelDisplayed());

            Step("11. Verify Controller Editor panel appears back");
            VerifyEqual("11. Verify Controller Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_32 Switch - Replace Lamp")]
        public void EI_32()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI32");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a new switch.");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI32*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("2. Select new switch");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("3. Press Replace Lamp button");
            equipmentInventoryPage.SwitchEditorPanel.ClickReplaceLampButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("4. Verify the message pop-up displayed");
            Step(" o Would you like to replace the lamp of 'name of switch' ?");
            var expectedMessage = string.Format("Would you like to replace the lamp of '{0}' ?", switchName);
            VerifyEqual("4. Verify the message pop-up displayed as expected", expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("5. Press No button on the message pop-up");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("6. Verify The message is closed");
            VerifyEqual("6. Verify The message is closed", true, !equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("7. Press Replace Lamp button again");
            equipmentInventoryPage.SwitchEditorPanel.ClickReplaceLampButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("8. Press Yes button on the message pop-up");
            equipmentInventoryPage.Dialog.ClickYesButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("9. Verify The message pop-up displayed");
            Step(" o The lamp 'name of switch' is successfully replaced.");
            expectedMessage = string.Format("The lamp '{0}' is successfully replaced.", switchName);
            VerifyEqual("9. Verify the message pop-up displayed as expected", expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("10. Press OK button");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("11. Verify The message pop-up is closed");
            VerifyEqual("11. Verify The message is closed", true, !equipmentInventoryPage.IsPopupDialogDisplayed());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_33 Switch - Replace Node")]
        public void EI_33()
        {
            var testData = GetTestDataOfEI_33();
            var controllerId = testData["ControllerId"];
            var controllerName = testData["ControllerName"];
            var geozone = SLVHelper.GenerateUniqueName("GZNEI33");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);
            var validMacAddress1 = SLVHelper.GenerateMACAddress();
            var validMacAddress2 = SLVHelper.GenerateMACAddress();

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a new switch with Type of equipment: Sidhe Boann LORA Device using Smartsims/Smartsims commission");
            Step("**** Precondition ****\n");
            
            Step("-> Create data for testing");
            DeleteGeozones("GZNEI33*");
            CreateNewGeozone(geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controllerId, geozone, "Sidhe Boann LORA Device[switch]");

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("2. Select new switch");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("3. Press Replace Node button");
            equipmentInventoryPage.SwitchEditorPanel.ClickReplaceNodeButton();
            if (Browser.Name.Equals("IE"))
            {
                Wait.ForSeconds(5); //wait for replace node panel displayed
                if (!equipmentInventoryPage.StreetlightEditorPanel.IsReplaceNodePanelDisplayed())
                {
                    Warning("Bug #1281995: Equipment Inventory - Replace Node does not work on IE11");
                    DeleteDevice(controllerId, switchName);
                    return;
                }
            }
            else
                equipmentInventoryPage.StreetlightEditorPanel.WaitForReplaceNodePanelDisplayed();

            Step("4. Verify the new UI panel displays with");
            Step(" o Unique address textbox is empty");
            Step(" o Save icon");
            VerifyEqual("4. Verify Unique address textbox is empty", "", equipmentInventoryPage.SwitchEditorPanel.ReplaceNodePanel.GetUniqueAddressValue());
            VerifyEqual("4. Verify Unique Save icon is displayed", true, equipmentInventoryPage.SwitchEditorPanel.ReplaceNodePanel.IsSaveIconDisplayed());

            Step("5. Press Close button");
            equipmentInventoryPage.SwitchEditorPanel.ReplaceNodePanel.ClickBackButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForReplaceNodePanelDisappeared();

            Step("6. Verify Replace Node panel is closed and Switch Editor panel displays");
            equipmentInventoryPage.SwitchEditorPanel.IsReplaceNodePanelDisplayed();
            VerifyEqual("6. Verify Replace Node panel is closed", true, !equipmentInventoryPage.SwitchEditorPanel.IsReplaceNodePanelDisplayed());
            VerifyEqual("6. Verify Switch Editor panel displays", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("7. Press Replace Node button again");
            equipmentInventoryPage.SwitchEditorPanel.ClickReplaceNodeButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForReplaceNodePanelDisplayed();

            Step("8. Input a valid Unique Address into Unique address textbox");
            equipmentInventoryPage.SwitchEditorPanel.ReplaceNodePanel.EnterUniqueAddressInput(validMacAddress1);

            Step("9. Press Save icon");
            equipmentInventoryPage.SwitchEditorPanel.ReplaceNodePanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.SwitchEditorPanel.WaitForReplaceNodePanelDisappeared();
            if (equipmentInventoryPage.HasPopupDialogDisplayed())
            {
                Warning("Bug #1332468: Replace Node is done multiple times at once");
                equipmentInventoryPage.Dialog.ClickOkButton();
                equipmentInventoryPage.WaitForPopupDialogDisappeared();
            }

            Step("10. Verify Replace Node process is completed.");
            Step(" o Replace Node panel is close");
            Step(" o Unique Address in Switch Editor panel is updated with new value and READ-ONLY");
            VerifyEqual("10. Verify Replace Node panel is closed", true, !equipmentInventoryPage.SwitchEditorPanel.IsReplaceNodePanelDisplayed());
            VerifyEqual("10. Verify Unique Address in Switch Editor panel is updated", validMacAddress1, equipmentInventoryPage.SwitchEditorPanel.GetUniqueAddressValue());
            VerifyEqual("10. Verify Unique Address in Switch Editor panel is READ-ONLY", true, equipmentInventoryPage.SwitchEditorPanel.IsUniqueAddressReadOnly());

            Step("11. Press Replace Node button again");
            equipmentInventoryPage.SwitchEditorPanel.ClickReplaceNodeButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForReplaceNodePanelDisplayed();

            Step("12. Verify Replace Node panel appears with");
            Step(" o Unique address textbox is set the new value.");
            VerifyEqual("12. Verify Unique address textbox is set the new value", validMacAddress1, equipmentInventoryPage.SwitchEditorPanel.ReplaceNodePanel.GetUniqueAddressValue());

            Step("13. Update Unique Address to the new value, and press Save");
            equipmentInventoryPage.SwitchEditorPanel.ReplaceNodePanel.EnterUniqueAddressInput(validMacAddress2);
            equipmentInventoryPage.SwitchEditorPanel.ReplaceNodePanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.SwitchEditorPanel.WaitForReplaceNodePanelDisappeared();

            Step("14. Verify Replace Node process is completed.");
            Step(" o Replace Node panel is close");
            Step(" o Unique Address in Switch Editor panel is updated with new value and READ-ONLY");
            VerifyEqual("14. Verify Replace Node panel is closed", true, !equipmentInventoryPage.SwitchEditorPanel.IsReplaceNodePanelDisplayed());
            VerifyEqual("14. Verify Unique Address in Switch Editor panel is updated with new value", validMacAddress2, equipmentInventoryPage.SwitchEditorPanel.GetUniqueAddressValue());
            VerifyEqual("14. Verify Unique Address in Switch Editor panel is READ-ONLY", true, equipmentInventoryPage.SwitchEditorPanel.IsUniqueAddressReadOnly());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_34 Switch - Lamp Type Editor - View")]
        public void EI_34()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI34");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI34*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select switch A (switch A should be created during this test to make sure its lamp type is empty)");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Switch Editor panel appears");
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Inventory tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");

            Step("6. Verify Value of lamp type is empty");
            VerifyEqual("6. Verify Value of lamp type is empty", "Select a value", equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue());

            Step("7. Note list of lamp types");
            var lampTypeList = equipmentInventoryPage.SwitchEditorPanel.GetListOfLampTypes();

            Step("8. Click Edit icon next to Lamp Type dropdown");
            equipmentInventoryPage.SwitchEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.WaitForPropertiesSectionDisappeared();

            Step("9. Verify Lamp Type Editor panel appears");
            VerifyEqual("9. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsLampTypePanelDisplayed());

            Step("10. Verify Lamp Type Editor panel has title 'Lamp Types', Import and Add buttons");
            VerifyEqual("10. Verify Lamp Type Editor panel has title 'Lamp Types'", "Lamp Types", equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetPanelTitleText());
            VerifyEqual("10. Verify Import and Add buttons are displayed", true, equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.IsImportButtonDisplayed() && equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.IsAddButtonDisplayed());

            Step("11. Verify List of lamp types in the editor = list of ones noted at step #7");
            var actualLampTypesList = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetListOfLampTypes();
            VerifyEqual("11. Verify List of lamp types in the editor = list of ones noted at step #7", lampTypeList, actualLampTypesList, false);

            Step("12. Verify There is no lamp type in the list being selected");
            VerifyEqual("12. Verify There is no lamp type in the list being selected", false, equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.HasSelectedLampType());

            Step("13. Verify Save button and editing layout of Properties section of a selected lamp type are not visible");
            VerifyEqual("13. Verify Save button is not displayed", false, equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.IsSaveButtonDisplayed());
            VerifyEqual("13. Verify Properties section of a selected lamp type are not visible", false, equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.IsPropertiesSectionDisplayed());

            Step("14. Click Close button");
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.ClickBackButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForLampTypePanelDisappeared();

            Step("15. Verify Lamp Type Editor panel disappears");
            VerifyEqual("15. Verify Lamp Type Editor panel disappears", false, equipmentInventoryPage.SwitchEditorPanel.IsLampTypePanelDisplayed());

            Step("16. Verify Switch Editor panel appears back");
            VerifyEqual("16. Verify Switch Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("17. Verify Value of lamp type is still empty");
            VerifyEqual("17. Verify Value of lamp type is still empty", "Select a value", equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue());

            Step("18. Select a value for lamp type");
            var lampType = lampTypeList.PickRandom();
            equipmentInventoryPage.SwitchEditorPanel.SelectLampTypeDropDown(lampType);

            Step("19. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("20. Verify Switch Editor panel disappears");
            VerifyEqual("20. Verify Switch Editor panel appears back", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("21. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("22. Verify Switch Editor panel appears back");
            VerifyEqual("22. Verify Switch Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("23. Select Inventory tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");

            Step("24. Verify Value of lamp type is remained to be the selected value");
            VerifyEqual(string.Format("24. Verify Value of lamp type is '{0}'", lampType), lampType, equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue());

            Step("25. Click Edit icon next to Lamp Type dropdown");
            equipmentInventoryPage.SwitchEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.WaitForPropertiesSectionDisplayed();

            Step("26. Verify Lamp Type Editor panel appears");
            VerifyEqual("26. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsLampTypePanelDisplayed());

            Step("27. Verify The selected lamp type in switch editor panel is being selected in Lamp Type Editor panel");
            VerifyEqual(string.Format("27. Verify The selected lamp type in Lamp Type Editor panel is '{0}'", lampType), lampType, equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetSelectedLampType());

            Step("28. Verify Remove button for the selected lamp type is visible");
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.ScrollToSelectedLampType();
            VerifyEqual("28. Verify Remove button for the selected lamp type is visible", true, equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.IsSelectedLampTypeRemoveButtonDisplayed());

            Step("29. Verify Save button and editing layouts are visible in Properties section");
            VerifyEqual("29. Verify Save button is displayed", true, equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.IsSaveButtonDisplayed());
            VerifyEqual("29. Verify editing layouts are visible in Properties section", true, equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.IsPropertiesSectionDisplayed());

            Step("30. Verify Editing layout contains fields:");
            Step(" o Name: label is 'Name', value is name of the selected lamp type");
            Step(" o Identifier: label is 'Identifier', value is not empty");
            Step(" o Default lamp wattage: label is 'Default lamp Wattage', value is a number");
            Step(" o Default warmup time: label is 'Default warmup time', value is a number");
            Step(" o Default I Level 1 min: label is 'Default I Level 1 min', value is a number");
            Step(" o Default I Level 1 max: label is 'Default I Level 1 max', value is a number");
            Step(" o Default I Level 2 min: label is 'Default I Level 2 min', value is a number");
            Step(" o Default I Level 2 max: label is 'Default I Level 2 max', value is a number");
            Step(" o Default I no: label is 'Default I no', value is a number");
            Step(" o Default I PF min: label is 'Default I PF min', value is a number");
            Step(" o Default V no: label is 'Default V no', value is a number");
            Step(" o Default V min: label is 'Default V min', value is a number");
            Step(" o Default V max: label is 'Default V max', value is a number");
            Step(" o Default min output: label is 'Default min output', value is a number");
            Step(" o Default control V max: label is 'Default control V max', value is a number");
            Step(" o Default BH max: label is 'Default BH max', value is a number");
            Step(" o Default power max: label is 'Default power max', value is a number");
            Step(" o Default CLO hours 1% increment: label is 'Default CLO hours 1% increment', value is a number");
            Step(" o Default CLO initial value: label is 'Default CLO initial value', value is a number");
            Step(" o Default interface: label is 'Default interface', value is one of items of a dropdown");
            VerifyLampTypePropetiesSection(equipmentInventoryPage, lampType);

            Step("31. Verify Identifier field is disabled and other fields are editable");
            VerifyEqual("31. Verify Identifier field is disabled", true, equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.IsIdentifierInputReadOnly());
            VerifyEqual("31. Verify Other fields are editable", true, equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.AreInputsEditable());
            VerifyEqual("31. Verify Interface field is editable", true, !equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.IsInterfaceDropDownReadOnly());

            Step("32. Select another lamp type");
            lampType = lampTypeList.PickRandom();
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.SelectLampType(lampType);

            Step("33. Close Lamp Type Editor panel");
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.ClickBackButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForLampTypePanelDisappeared();

            Step("34. Verify Lamp Type Editor panel appears");
            VerifyEqual("34. Verify Lamp Type Editor panel appears", false, equipmentInventoryPage.SwitchEditorPanel.IsLampTypePanelDisplayed());

            Step("35. Verify Switch Editor panel appears back");
            VerifyEqual("35. Verify Switch Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("36. Verify Value of lamp type is now the one selected later");
            VerifyEqual(string.Format("36. Verify Value of lamp type is '{0}'", lampType), lampType, equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue());

            Step("37. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("38. Verify Switch Editor panel disappears");
            VerifyEqual("38. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("39. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("40. Verify Switch Editor panel appears");
            VerifyEqual("40. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("41. Select Inventory tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");

            Step("42. Verify Value of lamp type is now the one selected later");
            VerifyEqual(string.Format("42. Verify Value of lamp type is '{0}'", lampType), lampType, equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue());

            Step("43. Refresh browser");
            Step("44. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("45. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("46. Verify Switch Editor panel appears");
            VerifyEqual("46. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("47. Select Inventory tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");

            Step("48. Verify Value of lamp type is now the one selected later");
            VerifyEqual(string.Format("48. Verify Value of lamp type is '{0}'", lampType), lampType, equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_34_01 Switch - Lamp Type Editor - Create")]
        public void EI_34_01()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI3401");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI3401*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select switch A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Switch Editor panel appears");
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Inventory tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");

            Step("6. Click Edit icon next to Lamp Type dropdown");
            equipmentInventoryPage.SwitchEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.WaitForPropertiesSectionDisappeared();

            Step("7. Verify Lamp Type Editor panel appears");
            VerifyEqual("7. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsLampTypePanelDisplayed());

            Step("8. Click Add button");
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.ClickAddButton();
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.WaitForPropertiesSectionDisplayed();

            Step("9. Verify Fields in Properties section are reset:");
            Step(" o Name is filled with value starting with 'New Lamp Type'");
            Step(" o Identifier is editable and is filled with value 'Manufacturer/LampTechno/Power/BallastType'");
            Step(" o Default interface is is empty or filled with one of items in the dropdown");
            Step(" o Other values are filled with numbers");
            VerifyLampTypePropetiesSectionAddNew(equipmentInventoryPage);

            Step("10. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("11. Verify A dialog with title 'Error' and message 'Brand 'Manufacturer/LampTechno/Power/BallastType' already exists!' appears");
            VerifyEqual("11. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("11. Verify dialog title is 'Error'", "Error", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("11. Verify dialog message is ''Brand 'Manufacturer/LampTechno/Power/BallastType' already exists!'", "Brand 'Manufacturer/LampTechno/Power/BallastType' already exists!", equipmentInventoryPage.Dialog.GetMessageText());

            Step("12. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("13. Verify The dialog disappears");
            VerifyEqual("13. Verify A dialog appears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("14. Change values of all editable fields");
            EnterLampTypesPropertiesSectionValues(equipmentInventoryPage);

            var name = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetNameValue();
            var identifier = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetIdentifierValue();
            var lampWattage = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetLampWattageValue();
            var warmupTime = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetWarmupTimeValue();
            var iLevel1Min = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetILevel1MinValue();
            var iLevel1Max = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetILevel1MaxValue();
            var iLevel2Min = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetILevel2MinValue();
            var iLevel2Max = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetILevel2MaxValue();
            var iNo = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetINoValue();
            var pfMin = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetPfMinValue();
            var vNo = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetVNoValue();
            var vMin = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetVMinValue();
            var vMax = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetVMaxValue();
            var minOutputValue = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetMinOutputValueValue();
            var controlVoltMax = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetControlVoltMaxValue();
            var bhMax = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetBhMaxValue();
            var powerMax = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetPowerMaxValue();
            var cloHoursIncrement = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetCloHoursIncrementValue();
            var cloInitialValue = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetCloInitialValueValue();
            var interfaceValue = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetInterfaceValue();

            Step("15. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("16. Verify New values are applied");
            VerifyLampTypePropetiesSectionValues(equipmentInventoryPage, name, identifier, lampWattage, warmupTime, iLevel1Min, iLevel1Max, iLevel2Min, iLevel2Max
            , pfMin, iNo, vNo, vMin, vMax, minOutputValue, controlVoltMax, bhMax, powerMax, cloHoursIncrement, cloInitialValue, interfaceValue);

            Step("17. Verify A new entry with new name is appended into lamp type list");
            var listLampTypes = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetListOfLampTypes();
            VerifyEqual(string.Format("17. Verify Lamp type '{0}' is appended into lamp type list", name), true, listLampTypes.Contains(name));

            Step("18. Verify Select another lamp type then select the previous one");
            listLampTypes.Remove(name);
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.SelectLampType(listLampTypes.PickRandom());
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.SelectLampType(name);

            Step("19. Verify New values are remained applied");
            VerifyLampTypePropetiesSectionValues(equipmentInventoryPage, name, identifier, lampWattage, warmupTime, iLevel1Min, iLevel1Max, iLevel2Min, iLevel2Max
           , pfMin, iNo, vNo, vMin, vMax, minOutputValue, controlVoltMax, bhMax, powerMax, cloHoursIncrement, cloInitialValue, interfaceValue);

            Step("20. Close Lamp Type Editor panel");
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.ClickBackButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForLampTypePanelDisappeared();

            Step("21. Verify Lamp Type Editor panel disappears");
            VerifyEqual("21. Verify Lamp Type Editor panel disappears", false, equipmentInventoryPage.SwitchEditorPanel.IsLampTypePanelDisplayed());

            Step("22. Verify Switch Editor panel appears back");
            VerifyEqual("22. Verify Switch Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("23. Verify Value of lamp type is the newly-created one");
            VerifyEqual(string.Format("23. Verify Value of lamp type is '{0}'", name), name, equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue());

            Step("24. Verify The newly created lamp type is present in the lamp type dropdown list");
            var lampTypes = equipmentInventoryPage.SwitchEditorPanel.GetListOfLampTypes();
            VerifyEqual(string.Format("24. Verify Lamp type '{0}' is present in the lamp type dropdown list", name), true, lampTypes.Contains(name));

            Step("25. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("26. Verify Switch Editor panel disappears");
            VerifyEqual("26. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("27. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("28. Verify Switch Editor panel appears");
            VerifyEqual("28. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("29. Select Inventory tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");

            Step("30. Verify Value of lamp type is remained to be the new one");
            VerifyEqual(string.Format("30. Verify Value of lamp type is '{0}'", name), name, equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue());

            Step("31. Refresh browser");
            Step("32. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("33. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("34. Verify Switch Editor panel appears");
            VerifyEqual("34. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("35. Select Inventory tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");

            Step("36. Verify Value of lamp type is remained to be the new one");
            VerifyEqual(string.Format("36. Verify Value of lamp type is '{0}'", name), name, equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue());

            Step("37. Click Edit icon next to Lamp Type dropdown");
            equipmentInventoryPage.SwitchEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.WaitForPropertiesSectionDisplayed();

            Step("38. Verify Lamp Type Editor panel appears");
            VerifyEqual("38. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsLampTypePanelDisplayed());

            Step("39. Verify The newly created lamp type is still present in lamp type list");
            listLampTypes = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetListOfLampTypes();
            VerifyEqual(string.Format("39. Verify Lamp type '{0}' is still present in lamp type list", name), true, listLampTypes.Contains(name));
            
            try
            {
                DeleteGeozone(geozone);
                DeleteLampType(name);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_34_02 Switch - Lamp Type Editor - Update")]
        public void EI_34_02()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI3402");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI3402*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select switch A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Switch Editor panel appears");
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Inventory tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");

            Step("6. Click Edit icon next to Lamp Type dropdown");
            equipmentInventoryPage.SwitchEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.WaitForPropertiesSectionDisappeared();

            Step("7. Verify Lamp Type Editor panel appears");
            VerifyEqual("7. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsLampTypePanelDisplayed());

            Step("8. Select a lamp type in the list");
            var listLampTypes = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetListOfLampTypes();
            var lampType = listLampTypes.PickRandom();
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.SelectLampType(lampType);
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.WaitForPropertiesSectionDisplayed();

            Step("9. Verify Fields in Properties section are populated:");
            Step(" o Name is filled with name of the selected one");
            Step(" o Identifier is disabled and is filled with identifier of the selected one");
            Step(" o Default interface is filled with one of items in the dropdown");
            Step(" o Other values are filled with numbers");
            VerifyLampTypePropetiesSectionUpdate(equipmentInventoryPage, lampType);
            var notedName = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetNameValue();
            var notedLampWattage = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetLampWattageValue();
            var notedIdentifier = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetIdentifierValue();
            var notedWarmupTime = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetWarmupTimeValue();
            var notedILevel1Min = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetILevel1MinValue();
            var notedILevel1Max = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetILevel1MaxValue();
            var notedILevel2Min = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetILevel2MinValue();
            var notedILevel2Max = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetILevel2MaxValue();
            var notedINo = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetINoValue();
            var notedPfMin = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetPfMinValue();
            var notedVNo = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetVNoValue();
            var notedVMin = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetVMinValue();
            var notedVMax = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetVMaxValue();
            var notedMinOutputValue = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetMinOutputValueValue();
            var notedControlVoltMax = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetControlVoltMaxValue();
            var notedBhMax = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetBhMaxValue();
            var notedPowerMax = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetPowerMaxValue();
            var notedCloHoursIncrement = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetCloHoursIncrementValue();
            var notedCloInitialValue = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetCloInitialValueValue();
            var notedInterfaceValue = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetInterfaceValue();

            Step("10. Change values of all editable fields");
            EnterLampTypesPropertiesSectionValues(equipmentInventoryPage, false);
            var name = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetNameValue();
            var identifier = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetIdentifierValue();
            var lampWattage = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetLampWattageValue();
            var warmupTime = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetWarmupTimeValue();
            var iLevel1Min = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetILevel1MinValue();
            var iLevel1Max = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetILevel1MaxValue();
            var iLevel2Min = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetILevel2MinValue();
            var iLevel2Max = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetILevel2MaxValue();
            var iNo = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetINoValue();
            var pfMin = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetPfMinValue();
            var vNo = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetVNoValue();
            var vMin = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetVMinValue();
            var vMax = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetVMaxValue();
            var minOutputValue = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetMinOutputValueValue();
            var controlVoltMax = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetControlVoltMaxValue();
            var bhMax = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetBhMaxValue();
            var powerMax = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetPowerMaxValue();
            var cloHoursIncrement = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetCloHoursIncrementValue();
            var cloInitialValue = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetCloInitialValueValue();
            var interfaceValue = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetInterfaceValue();

            Step("11. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("12. Verify New values are applied");
            VerifyLampTypePropetiesSectionValues(equipmentInventoryPage, name, identifier, lampWattage, warmupTime, iLevel1Min, iLevel1Max, iLevel2Min, iLevel2Max
            , pfMin, iNo, vNo, vMin, vMax, minOutputValue, controlVoltMax, bhMax, powerMax, cloHoursIncrement, cloInitialValue, interfaceValue);

            Step("13. Verify Select another lamp type then select the previous one");
            listLampTypes.Remove(name);
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.SelectLampType(listLampTypes.PickRandom());
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.SelectLampType(notedName);

            Step("14. Verify New values are remained applied");
            VerifyLampTypePropetiesSectionValues(equipmentInventoryPage, name, identifier, lampWattage, warmupTime, iLevel1Min, iLevel1Max, iLevel2Min, iLevel2Max
            , pfMin, iNo, vNo, vMin, vMax, minOutputValue, controlVoltMax, bhMax, powerMax, cloHoursIncrement, cloInitialValue, interfaceValue);

            Step("15. Close Lamp Type Editor panel");
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.ClickBackButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForLampTypePanelDisappeared();

            Step("16. Verify Lamp Type Editor panel disappears");
            VerifyEqual("16. Verify Lamp Type Editor panel disappears", false, equipmentInventoryPage.SwitchEditorPanel.IsLampTypePanelDisplayed());

            Step("17. Verify Switch Editor panel appears back");
            VerifyEqual("17. Verify Switch Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("18. Value of lamp type is the updated one");
            VerifyEqual(string.Format("18. Verify Value of lamp type is '{0}'", name), name, equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue());

            Step("19. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("20. Verify Switch Editor panel disappears");
            VerifyEqual("20. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("21. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("22. Verify Switch Editor panel appears");
            VerifyEqual("22. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("23. Select Inventory tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");

            Step("24. Verify Value of lamp type is remained to be the updated one");
            VerifyEqual(string.Format("24. Verify Value of lamp type is '{0}'", name), name, equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue());

            Step("25. Refresh browser");
            Step("26. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("27. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("28. Verify Switch Editor panel appears");
            VerifyEqual("28. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("29. Select Inventory tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");

            Step("30. Verify Value of lamp type is remained to be the updated one");
            VerifyEqual(string.Format("30. Verify Value of lamp type is '{0}'", name), name, equipmentInventoryPage.SwitchEditorPanel.GetLampTypeValue());

            Step("31. Click Edit icon next to Lamp Type dropdown");
            equipmentInventoryPage.SwitchEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.WaitForPropertiesSectionDisplayed();

            Step("32. Verify Lamp Type Editor panel appears");
            VerifyEqual("32. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsLampTypePanelDisplayed());

            Step("33. Verify The updated one is being selected");
            var selectedLampType = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetSelectedLampType();
            VerifyEqual(string.Format("33. Verify Lamp type '{0}' is being selected", name), name, selectedLampType);

            Step("34. Verify New values of the updated one are still remained");
            VerifyLampTypePropetiesSectionValues(equipmentInventoryPage, name, identifier, lampWattage, warmupTime, iLevel1Min, iLevel1Max, iLevel2Min, iLevel2Max
            , pfMin, iNo, vNo, vMin, vMax, minOutputValue, controlVoltMax, bhMax, powerMax, cloHoursIncrement, cloInitialValue, interfaceValue);

            try
            {
                //Update lamp type and switch
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterNameInput(notedName);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterLampWattageNumericInput(notedLampWattage);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterWarmupTimeNumericInput(notedWarmupTime);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterILevel1MinNumericInput(notedILevel1Min);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterILevel1MaxNumericInput(notedILevel1Max);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterILevel2MinNumericInput(notedILevel2Min);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterILevel2MaxNumericInput(notedILevel2Max);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterINoNumericInput(notedINo);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterPfMinNumericInput(notedPfMin);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterVNoNumericInput(notedVNo);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterVMinNumericInput(notedVMin);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterVMaxNumericInput(notedVMax);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterMinOutputValueNumericInput(notedMinOutputValue);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterControlVoltMaxNumericInput(notedControlVoltMax);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterBhMaxNumericInput(notedBhMax);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterPowerMaxNumericInput(notedPowerMax);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterCloHoursIncrementNumericInput(notedCloHoursIncrement);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.EnterCloInitialValueNumericInput(notedCloInitialValue);
                if (!notedInterfaceValue.Equals("Select a value")) equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.SelectInterfaceDropDown(notedInterfaceValue);
                equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();

                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_34_03 Switch - Lamp Type Editor - Delete")]
        public void EI_34_03()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI3403");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);
            var newLampType = SLVHelper.GenerateUniqueName("LT");

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - A new switch and a new lamp type is prepared in advance");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI3403*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);
            CreateNewLampType(newLampType);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select switch A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Switch Editor panel appears");
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Inventory tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");

            Step("6. Click Edit icon next to Lamp Type input");
            equipmentInventoryPage.SwitchEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.WaitForPropertiesSectionDisappeared();

            Step("7. Verify Lamp Type Editor panel appears");
            VerifyEqual("7. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsLampTypePanelDisplayed());

            Step("8. Select a lamp type in the list");
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.SelectLampType(newLampType);
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.WaitForPropertiesSectionDisplayed();

            Step("9. Verify Remove button for the selected lamp type is displayed");
            VerifyEqual("9. Verify Remove button for the selected lamp type is displayed", true, equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.IsSelectedLampTypeRemoveButtonDisplayed());

            Step("10. Click Remove button of the selected one");
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.ClickRemoveSelectedLampTypeIcon();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("11. Verify A confirmation dialog with title 'Confirmation' and message 'Would you like to delete {{selected lamp type's name}} lamp type ?'");
            var expectedMessage = string.Format("Would you like to delete {0} lamp type ?", newLampType);
            VerifyEqual("11. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("11. Verify dialog title is 'Confirmation'", "Confirmation", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual(string.Format("11. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("12. Click No");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("13. Verify The dialog disappears");
            VerifyEqual("13. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("14. Verify The selected one is still present in the list and being selected");
            VerifyEqual(string.Format("14. Verify Lamp type '{0}' is still present and being selected", newLampType), newLampType, equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetSelectedLampType());

            Step("15. Click Remove button of the selected lamp type again");
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.ClickRemoveSelectedLampTypeIcon();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("16. Verify A confirmation dialog with title 'Confirmation' and message 'Would you like to delete {{selected lamp type's name}} lamp type ?'");
            VerifyEqual("16. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("16. Verify dialog title is 'Confirmation'", "Confirmation", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual(string.Format("16. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("17. Click Yes");
            equipmentInventoryPage.Dialog.ClickYesButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("18. Verify The dialog disappears");
            VerifyEqual("18. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("19. Verify The selected one is no longer present in the list");
            var listLampTypes = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetListOfLampTypes();
            VerifyEqual(string.Format("19. Verify Lamp type '{0}' is no longer present in the list", newLampType), false, listLampTypes.Contains(newLampType));

            Step("20. Refresh browser");
            Step("21. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("22. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("23. Verify Switch Editor panel appears");
            VerifyEqual("23. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("24. Select Inventory tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");

            Step("25. Click Edit icon next to Lamp Type dropdown");
            equipmentInventoryPage.SwitchEditorPanel.ClickLampTypeEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForLampTypePanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.WaitForPropertiesSectionDisappeared();

            Step("26. Verify Lamp Type Editor panel appears");
            VerifyEqual("26. Verify Lamp Type Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsLampTypePanelDisplayed());

            Step("27. Verify The deleted lamp type is no longer present in lamp type list");
            listLampTypes = equipmentInventoryPage.SwitchEditorPanel.LampTypePanel.GetListOfLampTypes();
            VerifyEqual(string.Format("27. Verify Lamp type '{0}' is no longer present in lamp type list", newLampType), false, listLampTypes.Contains(newLampType));
                        
            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_35 Switch - Energy Supplier Editor - View")]
        public void EI_35()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI35");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI35*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select switch A (switch A should be created during this test to make sure its energy supplier is empty)");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Switch Editor panel appears");
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Electricity network tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");

            Step("6. Verify Value of energy supplier is empty");
            VerifyEqual("6. Verify Value of energy supplier is empty", "Select a value", equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue());

            Step("7. Note list of energy suppliers");
            var energySupplierList = equipmentInventoryPage.SwitchEditorPanel.GetListOfEnergySuppliers();

            Step("8. Click Edit icon next to Energy Supplier dropdown");
            equipmentInventoryPage.SwitchEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisappeared();

            Step("9. Verify Energy Supplier Editor panel appears");
            VerifyEqual("9. Verify Energy Supplier Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("10. Verify Energy Supplier Editor panel has title 'Energy supplier', Add buttons");
            VerifyEqual("10. Verify Energy Supplier Editor panel has title 'Energy supplier'", "Energy supplier", equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetPanelTitleText());
            VerifyEqual("10. Verify Add buttons are displayed", true, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.IsAddButtonDisplayed());

            Step("11. Verify List of lamp types in the editor = list of ones noted at step #7");
            var actualEnergySupplierList = equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetListOfEnergySuppliers();
            VerifyEqual("11. Verify List of lamp types in the editor = list of ones noted at step #7", energySupplierList, actualEnergySupplierList, false);

            Step("12. Verify There is no energy supplier in the list being selected");
            VerifyEqual("12. Verify There is no energy supplier in the list being selected", false, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.HasSelectedEnergySupplier());

            Step("13. Verify Save button and editing layout of Properties section of a selected energy supplier are not visible");
            VerifyEqual("13. Verify Save button is not displayed", false, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.IsSaveButtonDisplayed());
            VerifyEqual("13. Verify Properties section of a selected energy supplier are not visible", false, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.IsPropertiesSectionDisplayed());

            Step("14. Click Close button");
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.ClickBackButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisappeared();

            Step("15. Verify Energy Supplier Editor panel disappears");
            VerifyEqual("15. Verify Energy Supplier Editor panel disappears", false, equipmentInventoryPage.SwitchEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("16. Verify Switch Editor panel appears back");
            VerifyEqual("16. Verify Switch Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("17. Verify Value of energy supplier is still empty");
            VerifyEqual("17. Verify Value of energy supplier is still empty", "Select a value", equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue());

            Step("18. Select a value for energy supplier");
            var energySupplier = energySupplierList.PickRandom();
            equipmentInventoryPage.SwitchEditorPanel.SelectEnergySupplierDropDown(energySupplier);

            Step("19. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("20. Verify Switch Editor panel disappears");
            VerifyEqual("20. Verify Switch Editor panel appears back", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("21. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("22. Verify Switch Editor panel appears back");
            VerifyEqual("22. Verify Switch Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("23. Select Electricity network tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");

            Step("24. Verify Value of energy supplier is remained to be the selected value");
            VerifyEqual(string.Format("24. Verify Value of energy supplier is '{0}'", energySupplier), energySupplier, equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue());

            Step("25. Click Edit icon next to Energy Supplier dropdown");
            equipmentInventoryPage.SwitchEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisplayed();

            Step("26. Verify Energy Supplier Editor panel appears");
            VerifyEqual("26. Verify Energy Supplier Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("27. Verify The selected energy supplier in switch editor panel is being selected in Energy Supplier Editor panel");
            VerifyEqual(string.Format("27. Verify The selected energy supplier in Energy Supplier Editor panel is '{0}'", energySupplier), energySupplier, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetSelectedEnergySupplier());

            Step("28. Verify Remove button for the selected energy supplier is visible");
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.ScrollToSelectedEnergySupplier();
            VerifyEqual("28. Verify Remove button for the selected energy supplier is visible", true, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.IsSelectedEnergySupplierRemoveButtonDisplayed());

            Step("29. Verify Save button and editing layouts are visible in Properties section");
            VerifyEqual("29. Verify Save button is displayed", true, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.IsSaveButtonDisplayed());
            VerifyEqual("29. Verify editing layouts are visible in Properties section", true, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.IsPropertiesSectionDisplayed());

            Step("30. Verify Editing layout contains fields:");
            Step(" o Name: label is 'Name', value is name of the selected energy supplier");
            Step(" o KgCo2byKwH: label is 'KgCo2byKwH', value is a number");
            double value;
            VerifyEqual("30. Verify Name - label is 'Name'", "Name", equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetNameText());
            VerifyEqual(string.Format("30. Verify Name - value is '{0}'", energySupplier), energySupplier, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetNameValue());
            VerifyEqual("30. Verify KgCo2byKwH - label is 'KgCo2byKwH'", "KgCo2byKwH", equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetKgCo2byKwhText());
            VerifyEqual("30. Verify KgCo2byKwH - value is a number", true, double.TryParse(equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue(), out value));

            Step("31. Verify Name field is disabled and KgCo2byKwH is editable");
            VerifyEqual("31. Verify Identifier field is disabled", false, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.IsNameInputEditable());
            VerifyEqual("31. Verify KgCo2byKwH is editable", true, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.IsKgCo2byKwhNumericInputEditable());

            Step("32. Select another energy supplier");
            energySupplier = energySupplierList.PickRandom();
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.SelectEnergySupplier(energySupplier);

            Step("33. Close Energy Supplier Editor panel");
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.ClickBackButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisappeared();

            Step("34. Verify Energy Supplier Editor panel appears");
            VerifyEqual("34. Verify Energy Supplier Editor panel appears", false, equipmentInventoryPage.SwitchEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("35. Verify Switch Editor panel appears back");
            VerifyEqual("35. Verify Switch Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("36. Verify Value of energy supplier is now the one selected later");
            VerifyEqual(string.Format("36. Verify Value of energy supplier is '{0}'", energySupplier), energySupplier, equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue());

            Step("37. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("38. Verify Switch Editor panel disappears");
            VerifyEqual("38. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("39. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("40. Verify Switch Editor panel appears");
            VerifyEqual("40. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("41. Select Electricity network tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");

            Step("42. Verify Value of energy supplier is now the one selected later");
            VerifyEqual(string.Format("42. Verify Value of energy supplier is '{0}'", energySupplier), energySupplier, equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue());

            Step("43. Refresh browser");
            Step("44. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("45. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("46. Verify Switch Editor panel appears");
            VerifyEqual("46. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("47. Select Electricity network tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");

            Step("48. Verify Value of energy supplier is now the one selected later");
            VerifyEqual(string.Format("48. Verify Value of energy supplier is '{0}'", energySupplier), energySupplier, equipmentInventoryPage.StreetlightEditorPanel.GetEnergySupplierValue());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_35_01 Switch - Energy Supplier Editor - Create")]
        public void EI_35_01()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI3501");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI3501*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select switch A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Switch Editor panel appears");
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Electricity network tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");

            Step("6. Click Edit icon next to Energy Supplier dropdown");
            equipmentInventoryPage.SwitchEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisappeared();

            Step("7. Verify Energy Supplier Editor panel appears");
            VerifyEqual("7. Verify Energy Supplier Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("8. Click Add button");
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.ClickAddButton();
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisplayed();

            Step("9. Verify Fields in Properties section are reset:");
            Step(" o Name is filled with value starting with 'New Provider'");
            Step(" o KgCo2byKwH is editable and is filled with a number");
            double value;
            var nameField = equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetNameValue();
            VerifyTrue("9. Verify Name is filled with value starting with 'New Provider'", nameField.Contains("New Provider"), "Contains 'New Provider'", nameField);
            VerifyEqual("9. Verify KgCo2byKwH is editable", true, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.IsNameInputEditable());
            VerifyEqual("9. Verify KgCo2byKwH is filled with a number", true, double.TryParse(equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue(), out value));

            Step("10. Change values of all editable fields");
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.EnterNameInput(SLVHelper.GenerateUniqueName("NewES"));
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.EnterKgCo2byKwhNumericInput(SLVHelper.GenerateStringInteger(99999));
            var name = equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetNameValue();
            var kgCo2byKwh = equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue();

            Step("11. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("12. Verify New values are applied");
            VerifyEqual(string.Format("12. Verify Name is '{0}'", name), name, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetNameValue());
            VerifyEqual(string.Format("12. Verify KgCo2byKwH is '{0}'", kgCo2byKwh), kgCo2byKwh, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue());

            Step("13. Verify A new entry with new name is appended into energy supplier list");
            var listEnergySuppliers = equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetListOfEnergySuppliers();
            VerifyEqual(string.Format("13. Verify Lamp type '{0}' is appended into energy supplier list", name), true, listEnergySuppliers.Contains(name));

            Step("14. Verify Select another energy supplier then select the previous one");
            listEnergySuppliers.Remove(name);
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.SelectEnergySupplier(listEnergySuppliers.PickRandom());
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.SelectEnergySupplier(name);

            Step("15. Verify New values are remained applied");
            VerifyEqual(string.Format("15. Verify Name is '{0}'", name), name, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetNameValue());
            VerifyEqual(string.Format("15. Verify KgCo2byKwH is '{0}'", kgCo2byKwh), kgCo2byKwh, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue());

            Step("16. Close Energy Supplier Editor panel");
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.ClickBackButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisappeared();

            Step("17. Verify Energy Supplier Editor panel disappears");
            VerifyEqual("17. Verify Energy Supplier Editor panel disappears", false, equipmentInventoryPage.SwitchEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("18. Verify Switch Editor panel appears back");
            VerifyEqual("18. Verify Switch Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("19. Verify Value of energy supplier is the newly-created one");
            VerifyEqual(string.Format("19. Verify Value of energy supplier is '{0}'", name), name, equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue());

            Step("20. Verify The newly created energy supplier is present in the energy supplier dropdown list");
            var energySuppliers = equipmentInventoryPage.SwitchEditorPanel.GetListOfEnergySuppliers();
            VerifyEqual(string.Format("20. Verify Energy supplier '{0}' is present in the energy supplier dropdown list", name), true, energySuppliers.Contains(name));

            Step("21. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("22. Verify Switch Editor panel disappears");
            VerifyEqual("22. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("23. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("24. Verify Switch Editor panel appears");
            VerifyEqual("24. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("25. Select Electricity network tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");

            Step("26. Verify Value of energy supplier is remained to be the new one");
            VerifyEqual(string.Format("26. Verify Value of energy supplier is '{0}'", name), name, equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue());

            Step("27. Refresh browser");
            Step("28. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("29. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("30. Verify Switch Editor panel appears");
            VerifyEqual("30. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("31. Select Electricity network tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");

            Step("32. Verify Value of energy supplier is remained to be the new one");
            VerifyEqual(string.Format("32. Verify Value of energy supplier is '{0}'", name), name, equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue());

            Step("33. Click Edit icon next to Energy Supplier dropdown");
            equipmentInventoryPage.SwitchEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisplayed();

            Step("34. Verify Energy Supplier Editor panel appears");
            VerifyEqual("34. Verify Energy Supplier Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("35. Verify The newly created energy supplier is still present in energy supplier list");
            listEnergySuppliers = equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetListOfEnergySuppliers();
            VerifyEqual(string.Format("35. Verify Energy supplier '{0}' is still present in energy supplier list", name), true, listEnergySuppliers.Contains(name));

            try
            {
                DeleteGeozone(geozone);
                DeleteEnergySupplier(name);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_35_02 Switch - Energy Supplier Editor - Update")]
        public void EI_35_02()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI3502");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI3502*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select switch A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Switch Editor panel appears");
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Electricity network tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");

            Step("6. Click Edit icon next to Energy Supplier dropdown");
            equipmentInventoryPage.SwitchEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisappeared();

            Step("7. Verify Energy Supplier Editor panel appears");
            VerifyEqual("7. Verify Energy Supplier Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("8. Select a energy supplier in the list");
            var listEnergySuppliers = equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetListOfEnergySuppliers();
            var energySupplier = listEnergySuppliers.PickRandom();
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.SelectEnergySupplier(energySupplier);
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisplayed();

            Step("9. Verify Fields in Properties section are populated:");
            Step(" o Name is readonly and is filled with name of the selected one");
            Step(" o KgCo2byKwH is filled with a number");
            var notedName = equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetNameValue();
            var notedKgCo2byKwh = equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue();
            double value;
            VerifyEqual("9. Verify Name is readonly", false, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.IsNameInputEditable());
            VerifyEqual("9. Verify Name is filled with name of the selected one", energySupplier, notedName);
            VerifyEqual("9. Verify KgCo2byKwH is filled with a number", true, double.TryParse(notedKgCo2byKwh, out value));

            Step("10. Change values of all editable fields");
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.EnterKgCo2byKwhNumericInput(SLVHelper.GenerateStringInteger(99999));
            var name = equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetNameValue();
            var kgCo2byKwh = equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue();

            Step("11. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("12. Verify New values are applied");
            VerifyEqual(string.Format("12. Verify KgCo2byKwH is '{0}'", kgCo2byKwh), kgCo2byKwh, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue());

            Step("13. Verify Select another energy supplier then select the previous one");
            listEnergySuppliers.Remove(name);
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.SelectEnergySupplier(listEnergySuppliers.PickRandom());
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.SelectEnergySupplier(notedName);

            Step("14. Verify New values are remained applied");
            VerifyEqual(string.Format("14. Verify KgCo2byKwH is '{0}'", kgCo2byKwh), kgCo2byKwh, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue());

            Step("15. Close Energy Supplier Editor panel");
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.ClickBackButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisappeared();

            Step("16. Verify Energy Supplier Editor panel disappears");
            VerifyEqual("16. Verify Energy Supplier Editor panel disappears", false, equipmentInventoryPage.SwitchEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("17. Verify Switch Editor panel appears back");
            VerifyEqual("17. Verify Switch Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("18. Value of energy supplier is the updated one");
            VerifyEqual(string.Format("18. Verify Value of energy supplier is '{0}'", name), name, equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue());

            Step("19. Click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("20. Verify Switch Editor panel disappears");
            VerifyEqual("20. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("21. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("22. Verify Switch Editor panel appears");
            VerifyEqual("22. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("23. Select Electricity network tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");

            Step("24. Verify Value of energy supplier is remained to be the updated one");
            VerifyEqual(string.Format("24. Verify Value of energy supplier is '{0}'", name), name, equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue());

            Step("25. Refresh browser");
            Step("26. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("27. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("28. Verify Switch Editor panel appears");
            VerifyEqual("28. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("29. Select Electricity network tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");

            Step("30. Verify Value of energy supplier is remained to be the updated one");
            VerifyEqual(string.Format("30. Verify Value of energy supplier is '{0}'", name), name, equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue());

            Step("31. Click Edit icon next to Energy Supplier dropdown");
            equipmentInventoryPage.SwitchEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisplayed();

            Step("32. Verify Energy Supplier Editor panel appears");
            VerifyEqual("32. Verify Energy Supplier Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("33. Verify The updated one is being selected");
            var selectedEnergySupplier = equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetSelectedEnergySupplier();
            VerifyEqual(string.Format("33. Verify Energy supplier '{0}' is being selected", name), name, selectedEnergySupplier);

            Step("34. Verify New values of the updated one are still remained");
            VerifyEqual(string.Format("34. Verify KgCo2byKwH is '{0}'", kgCo2byKwh), kgCo2byKwh, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetKgCo2byKwhValue());
            
            try
            {
                //Update energy supplier and switch
                equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.EnterKgCo2byKwhNumericInput(notedKgCo2byKwh);
                equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.ClickBackButton();
                equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisappeared();

                 DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_35_03 Switch - Energy Supplier Editor - Delete")]
        public void EI_35_03()
        { 
            var geozone = SLVHelper.GenerateUniqueName("GZNEI3503");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var newEnergySupplier = SLVHelper.GenerateUniqueName("NES");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI3503*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select switch A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify Switch Editor panel appears");
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select Electricity network tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");

            Step("6. Create a new energy supplier from Energy Supplier Editor panel and select for the currently selected switch (switch A)");
            equipmentInventoryPage.SwitchEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisappeared();
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.CreateNewEnergySupplier(newEnergySupplier);

            Step("7. Save the switch");
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.ClickBackButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisappeared();
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("8. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchName);

            Step("9. Verify Switch Editor panel appears");
            VerifyEqual("9. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("10. Select Electricity network tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");

            Step("11. Verify Value of energy supplier is the one created at step #6");
            VerifyEqual(string.Format("11. Verify Value of energy supplier is '{0}'", newEnergySupplier), newEnergySupplier, equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue());

            Step("12. Click Edit icon next to Energy Supplier input");
            equipmentInventoryPage.SwitchEditorPanel.ClickEnergySupplierEditButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisplayed();
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.WaitForPropertiesSectionDisplayed();

            Step("13. Verify Energy Supplier Editor panel appears");
            VerifyEqual("13. Verify Energy Supplier Editor panel appears", true, equipmentInventoryPage.SwitchEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("14. Verify The one created at step #6 is being selected");
            var selectedEnergySupplier = equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetSelectedEnergySupplier();
            VerifyEqual(string.Format("14. Verify Energy supplier '{0}' is being selected", newEnergySupplier), newEnergySupplier, selectedEnergySupplier);

            Step("15. Click Remove button of the selected one");
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.ClickRemoveSelectedEnergySupplierIcon();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("16. Verify A confirmation dialog with title 'Confirmation' and message 'Would you like to delete {{selected energy supplier's name}} provider ?'");
            var expectedMessage = string.Format("Would you like to delete {0} provider ?", newEnergySupplier);
            VerifyEqual("16. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("16. Verify dialog title is 'Confirmation'", "Confirmation", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual(string.Format("16. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("17. Click No");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("18. Verify The dialog disappears");
            VerifyEqual("18. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("19. Verify The selected one is still present in the list and being selected");
            VerifyEqual(string.Format("19. Verify Energy supplier '{0}' is still present and being selected", newEnergySupplier), newEnergySupplier, equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetSelectedEnergySupplier());

            Step("20. Click Remove button of the selected energy supplier again");
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.ClickRemoveSelectedEnergySupplierIcon();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("21. Verify A confirmation dialog with title 'Confirmation' and message 'Would you like to delete {{selected energy supplier's name}} energy supplier ?'");
            VerifyEqual("21. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("21. Verify dialog title is 'Confirmation'", "Confirmation", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual(string.Format("21. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("22. Click Yes");
            equipmentInventoryPage.Dialog.ClickYesButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("23. Verify The dialog disappears (SC-242)");
            VerifyEqual("[SC-242] 23. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());
            if (equipmentInventoryPage.IsPopupDialogDisplayed())
            {
                equipmentInventoryPage.Dialog.ClickOkButton();
                equipmentInventoryPage.WaitForPopupDialogDisappeared();
            }

            Step("24. Verify The selected one is no longer present in the list");
            var listEnergySuppliers = equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.GetListOfEnergySuppliers();
            VerifyEqual(string.Format("24. Verify Energy supplier '{0}' is no longer present in the list", newEnergySupplier), false, listEnergySuppliers.Contains(newEnergySupplier));

            Step("25. Close Energy Supplier editor panel");
            equipmentInventoryPage.SwitchEditorPanel.EnergySupplierPanel.ClickBackButton();
            equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisappeared();

            Step("26. Verify Energy Supplier editor panel disappears");
            VerifyEqual("26. Verify Energy Supplier Editor panel disappears", false, equipmentInventoryPage.SwitchEditorPanel.IsEnergySupplierPanelDisplayed());

            Step("27. Verify Switch Editor panel appears back");
            VerifyEqual("27. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("28. Verify Value of energy supplier is empty");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");
            VerifyEqual("[SC-619] 28. Verify Value of energy supplier is empty", "Select a value", equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue());

            Step("29. Leave everything intact and click Save");
            equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.SwitchEditorPanel.WaitForEnergySupplierPanelDisappeared();

            Step("30. Verify Switch Editor disappears");
            VerifyEqual("30. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("31. Refresh browser");
            Step("32. Go to Equipment Inventory page again");
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("33. Select switch A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("34. Verify Switch Editor panel appears");
            VerifyEqual("34. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("35. Select Electricity network tab");
            equipmentInventoryPage.SwitchEditorPanel.SelectTab("Electricity network");

            Step("36. Verify Value of energy supplier is empty");
            VerifyEqual("[SC-619] 36. Verify Value of energy supplier is empty", "Select a value", equipmentInventoryPage.SwitchEditorPanel.GetEnergySupplierValue());

            try
            {
                DeleteGeozone(geozone);
                DeleteEnergySupplier(newEnergySupplier);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_37 Switch - Editor - Equipment Type - All")]
        public void EI_37()
        {
            var testData = GetTestDataOfEI_37();
            var xmlEquipmentTypes = testData["EquipmentTypes"] as List<string>;
            var geozone = SLVHelper.GenerateUniqueName("GZNEI37");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var switchName = SLVHelper.GenerateUniqueName("SWH");
            var switchPath = string.Format(@"{0}\{1}", geozone, switchName);
            var expectedTabs = new List<string> { "Identity", "Inventory", "Electricity network" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - The type of equipments to be tested can be limited to:");
            Step("   + Sidhe Boann LORA Device");
            Step("   + SLA Photocell");
            Step("   + Citylone SL31-1T");
            Step("   + Lumnex Axess PL v2");
            Step("   + PHILIPS LLC7030/DALI With One Output");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI37*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Switch, switchName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select switch A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchPath);

            Step("4. Verify Switch Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Switch Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            foreach (var type in xmlEquipmentTypes)
            {
                Step("5. Select any type of equipment in Identity tab");
                Step(string.Format("--> Select type of equipment '{0}'", type));
                equipmentInventoryPage.SwitchEditorPanel.SelectTypeOfEquipmentDropDown(type);

                Step("6. Click Save");
                equipmentInventoryPage.SwitchEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("7. Verify Switch Editor panel disappears");
                VerifyEqual("7. Verify Switch Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("8. Select switch A again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(switchName);

                Step("9. Verify Switch Editor panel appears back");
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
                VerifyEqual("9. Verify Switch Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("10. Verify Value of Name is correct");
                VerifyEqual(string.Format("10. Verify Name is '{0}'", switchName), switchName, equipmentInventoryPage.SwitchEditorPanel.GetNameValue());

                Step("11. Verify Value of Geozone is correct");
                VerifyEqual(string.Format("11. Verify Geozone is '{0}'", geozone), geozone, equipmentInventoryPage.SwitchEditorPanel.GetGeozoneValue());

                Step("12. Verify Values of Longitude, Latitude are not empty");
                VerifyEqual("12. Verify Longitude is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.SwitchEditorPanel.GetLongitudeValue()));
                VerifyEqual("12. Verify Latitude is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.SwitchEditorPanel.GetLatitudeValue()));

                Step("13. Verify The tabs Identity, Inventory and Electricity network are displayed");
                var actualTabs = equipmentInventoryPage.SwitchEditorPanel.GetListOfTabsName();
                VerifyContain("13. Verify The tabs Identity, Inventory and Electricity network are displayed", actualTabs, expectedTabs);

                Step("14. Verify In the Identity tab, the following attributes are displayed: 'Controller ID', 'Identifier', 'Type of Equipment', 'Dimming Group', 'Unique Address', 'Controller install date', 'Install Status'");
                Step("15. Verify Identifier is read only");
                var isIdentityTabExisting = equipmentInventoryPage.SwitchEditorPanel.IsTabExisting("Identity");
                if (isIdentityTabExisting)
                {
                    equipmentInventoryPage.SwitchEditorPanel.SelectTab("Identity");
                    equipmentInventoryPage.SwitchEditorPanel.ExpandGroup("Control System");
                    var actualIControlerId = equipmentInventoryPage.SwitchEditorPanel.GetControllerIdText();
                    VerifyTrue("15. Verify Controller ID label is 'Controller ID'", actualIControlerId == "Controller ID" || actualIControlerId == "Controller ID *", "Controller ID/Controller ID *", actualIControlerId);
                    VerifyEqual("15. Verify Controller ID dropdown is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsControllerIdDropDownDisplayed());
                    var actualIdentifier = equipmentInventoryPage.SwitchEditorPanel.GetIdentifierText();
                    VerifyTrue("15. Verify Identifier label is 'Identifier'", actualIdentifier == "Identifier" || actualIdentifier == "Identifier *", "Identifier/Identifier *", actualIdentifier);
                    VerifyEqual("15. Verify Identifier input is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsIdentifierInputDisplayed());
                    var actualTypeOfEquipmentText = equipmentInventoryPage.SwitchEditorPanel.GetTypeOfEquipmentText();
                    VerifyTrue("15. Verify Type of Equipment label is 'Type of equipment'", actualTypeOfEquipmentText == "Type of equipment" || actualTypeOfEquipmentText == "Type of equipment *", "Type of equipment/Type of equipment *", actualTypeOfEquipmentText);
                    VerifyEqual("15. Verify Type of Equipment dropdown is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsControllerInstallDateInputDisplayed());
                    VerifyEqual("15. Verify Dimming Group label is 'Dimming group'", "Dimming group", equipmentInventoryPage.SwitchEditorPanel.GetDimmingGroupText());
                    VerifyEqual("15. Verify Dimming Group dropdown is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsDimmingGroupDropDownDisplayed());
                    VerifyEqual("15. Verify Unique Address label is 'Unique address'", "Unique address", equipmentInventoryPage.SwitchEditorPanel.GetUniqueAddressText());
                    VerifyEqual("15. Verify Unique Address input is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsUniqueAddressInputDisplayed());
                    VerifyEqual("15. Verify Controller install date label is 'Controller install date'", "Controller install date", equipmentInventoryPage.SwitchEditorPanel.GetControllerInstallDateText());
                    VerifyEqual("15. Verify Controller install date input is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsControllerInstallDateInputDisplayed());
                    VerifyEqual("15. Verify Install status label is 'Install status'", "Install status", equipmentInventoryPage.SwitchEditorPanel.GetInstallStatusText());
                    VerifyEqual("15. Verify Install status dropdown is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsInstallStatusDropDownDisplayed());
                }
                else
                {
                    Warning(string.Format("{0} - Identity tab does not exist", type));
                }

                Step("16. Verify In the Inventory tab, the following attributes are displayed: 'Lamp Type', 'Lamp wattage', 'Fixed saved power'");
                var isInventoryTabExisting = equipmentInventoryPage.SwitchEditorPanel.IsTabExisting("Inventory");
                if (isInventoryTabExisting)
                {
                    equipmentInventoryPage.SwitchEditorPanel.SelectTab("Inventory");
                    equipmentInventoryPage.SwitchEditorPanel.ExpandGroup("Lamp");
                    VerifyEqual("16. Verify Lamp Type label is 'Lamp Type'", "Lamp Type", equipmentInventoryPage.SwitchEditorPanel.GetLampTypeText());
                    VerifyEqual("16. Verify Lamp Type dropdown is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsLampTypeDropDownDisplayed());
                    VerifyEqual("16. Verify Lamp wattage label is 'Lamp wattage (W)'", "Lamp wattage (W)", equipmentInventoryPage.SwitchEditorPanel.GetLampWattageText());
                    VerifyEqual("16. Verify Lamp wattage input is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsLampWattageInputDisplayed());
                    VerifyEqual("16. Verify Fixed saved power label is 'Fixed saved power'", "Fixed saved power", equipmentInventoryPage.SwitchEditorPanel.GetFixedSavedPowerText());
                    VerifyEqual("16. Verify Fixed saved power input is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsFixedSavedPowerInputDisplayed());
                }
                else
                {
                    Warning(string.Format("{0} - Inventory tab does not exist", type));
                }

                Step("17. Verify The buttons 'Commission', 'Replace lamp', 'Replace node', 'Duplicate', 'Save' and 'Delete' are displayed");
                VerifyEqual("17. Verify Commission button is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsCommissionButtonDisplayed());
                VerifyEqual("17. Verify Replace lammp button is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsReplaceLampButtonDisplayed());
                VerifyEqual(string.Format("17. Verify Replace node button is displayed ({0})", type), true, equipmentInventoryPage.SwitchEditorPanel.IsReplaceNodeButtonDisplayed());
                VerifyEqual("17. Verify Duplicate button is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsDuplicateButtonDisplayed());
                VerifyEqual("17. Verify Save button is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsSaveButtonDisplayed());
                VerifyEqual("17. Verify Delete button is displayed", true, equipmentInventoryPage.SwitchEditorPanel.IsDeleteButtonDisplayed());

                Step("18. Repeat from step #5 to end for the rest of equipment types");
                equipmentInventoryPage.SwitchEditorPanel.SelectTab("Identity");
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_38 Electrical Counter - Create")]
        public void EI_38()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI38");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var counterName = SLVHelper.GenerateUniqueName("MTR");
            var counterPath = string.Format(@"{0}\{1}", geozone, counterName);
            var typeOfEquipment = "CIRWATT MINI[Counter]";
            var expecteAddMenuItems = new List<string> { "Add GeoZone", "Add Device" };
            var expecteMoreMenuItems = new List<string> { "Import", "Export", "Replace Nodes" };
            var expectedTabList = new List<string> { "Identity", "Inventory" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI38*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Dropdown Add menu then click Add Device menu item");
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddDeviceMenuItem();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisplayed();

            Step("6. Verify New Device panel appears");
            VerifyEqual("6. Verify New Device panel appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("7. Verify New Device panel lists following device types: 'BUILDING', 'CAMERA IP', 'CITY OBJECT', 'CONTROLLER DEVICE', 'ELECTRICAL COUNTER', 'ENVIRONMENTAL SENSOR', 'INPUTS', 'NATURE', 'NETWORK COMPONENT', 'OCCUPANCY SENSOR', 'OUTPUTS', 'PARKING PLACE', 'STREETLIGHT', 'SWITCH DEVICE', 'TANK', 'TRANSPORT SIGNAGE', 'VEHICLE', 'VEHICLE CHARGING STATION', 'WASTE CONTAINER', 'WEATHER STATION', 'CABINET CONTROLLER'");
            var expectedDeviceTypeList = DeviceType.GetList();
            var actualDeviceTypeList = equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetListOfDeviceTypes();
            VerifyEqual("7. Verify New Device panel lists following device types as expected", expectedDeviceTypeList, actualDeviceTypeList, false);

            Step("8. Select 'ELECTRICAL COUNTER'");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectDevice(DeviceType.ElectricalCounter);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.WaitForNewDevicePropertiesSectionDisplayed();

            Step("9. Verify New Device panel switches to controller property content");
            VerifyEqual("9. Verify New Device panel switches to controller property content", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsNewDevicePropertiesSectionDisplayed());

            Step("10. Verify Electrical Counter property content:");
            Step("  o The first line is controller icon and text 'ELECTRICAL COUNTER'");
            VerifyEqual("10. Verify The first line is controller icon", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.CheckIfDeviceIcon(DeviceType.ElectricalCounter));
            VerifyEqual("10. Verify text is 'ELECTRICAL COUNTER'", "ELECTRICAL COUNTER", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNewDeviceText());
            Step("  o Controller id property has a label whose text is 'Controller ID *' and a dropdown list is selectable");
            VerifyEqual("10. Verify Controller id property has a label whose text is 'Controller ID *'", "Controller ID *", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetControllerIdText());            
            VerifyEqual("10. Verify An dropdown is selectable", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsControllerIdDropDownSelectable());
            Step("  o Identifier property has a label whose text is 'Identifier *' and an input whose value is empty and is editable");
            VerifyEqual("10. Verify Identifier property has a label whose text is 'Identifier *'", "Identifier *", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetIdentifierText());
            VerifyEqual("10. Verify An input whose value is empty", string.Empty, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetIdentifierValue());
            VerifyEqual("[#1398297] 10. Verify An input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsIdentifierInputReadOnly());
            Step("  o Equipment type property has a label whose text is 'Type of equipment *' and a dropdown list whose value is empty and is selectable");
            VerifyEqual("10. Verify Equipment type property has a label whose text is 'Type of equipment *'", "Type of equipment *", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetTypeEquipmentText());
            VerifyEqual("10. Verify A dropdown list whose value is empty", "Select a value", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNewDeviceTypeOfEquipmentValue());
            VerifyEqual("10. Verify An dropdown is selectable", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsTypeOfEquipmentDropDownSelectable());

            Step("11. Enter an unexisting name");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(counterName);

            Step("12. Select a controller");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectControllerIdDropDown(controller);

            Step("13. Enter an inexisting identifier");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterIdentifierInput(counterName);

            Step("14. Select an equipment type");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectTypeOfEquipmentDropDown(typeOfEquipment);

            Step("15. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();

            Step("16. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel.'");
            VerifyEqual("16. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel.'", "Position the new device on the map. Click here to cancel.", equipmentInventoryPage.Map.GetRecorderText());

            Step("17. Verify New Device panel disappears");
            VerifyEqual("17. Verify New Device panel disappears", false, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("18. Verify Geozone Editor panel disappears");
            VerifyEqual("18. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("19. Specify boundary of the new device by steps: zoom in the map using mouse scroll button; zoom in once more time using zooming bar of the map; drag the map");
            equipmentInventoryPage.Map.DragMapToRandomLocation();
            equipmentInventoryPage.Map.ZoomInToGLLevel(ZoomGLLevel.m50);

            Step("20. Place the counter on the map");
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            equipmentInventoryPage.ElectricalCounterEditorPanel.WaitForTitleHasText();

            Step("21. Verify Map recorder panel disappears");
            VerifyEqual("21. Verify Map recorder panel disappears", false, equipmentInventoryPage.Map.IsRecorderDisplayed());

            Step("22. Verify The Electrical Counter is get selected on map and geozone tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("22. Verify The ElectricalCounter '{0}' is selected geozone tree", counterName), counterName, selectedNodeName);
            VerifyTrue("22. Verify The Electrical Counter is selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL(), "Selected", "No device selected");

            Step("23. Verify Electrical Counter Editor panel appears");
            VerifyEqual("23. Verify Electrical Counter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("24. Verify Value of geozone is the name of geozone A");
            VerifyEqual(string.Format("24. Verify Value of GeoZone is '{0}'", geozone), geozone, equipmentInventoryPage.ElectricalCounterEditorPanel.GetGeozoneValue());

            Step("25. Verify Values of latitude and longitude are filled");
            VerifyEqual("25. Verify Value of Latitude is filled", true, !string.IsNullOrEmpty(equipmentInventoryPage.ElectricalCounterEditorPanel.GetLatitudeValue()));
            VerifyEqual("25. Verify Value of Longitude is filled", true, !string.IsNullOrEmpty(equipmentInventoryPage.ElectricalCounterEditorPanel.GetLongitudeValue()));

            Step("26. Verify There are 2 tabs in ElectricalCounter Editor panel: 'Identity', 'Inventory'");
            var actualTabList = equipmentInventoryPage.ElectricalCounterEditorPanel.GetListOfTabsName();
            VerifyEqual("26. Verify There are 2 tabs in ElectricalCounter Editor panel as expected", expectedTabList, actualTabList);

            Step("27. Verify In 'Identity' tab, values of name, controller id, identifier, equipment are the values input when creating it");
            VerifyEqual(string.Format("27. Verify Controller ID field is '{0}'", controller), controller, equipmentInventoryPage.ElectricalCounterEditorPanel.GetControllerIdValue());
            VerifyEqual(string.Format("27. Verify Identifer field is '{0}'", counterName), counterName, equipmentInventoryPage.ElectricalCounterEditorPanel.GetIdentifierValue());
            VerifyEqual(string.Format("27. Verify Type Of Equipment field is '{0}'", typeOfEquipment), typeOfEquipment, equipmentInventoryPage.ElectricalCounterEditorPanel.GetTypeOfEquipmentValue());

            var notedName = equipmentInventoryPage.ElectricalCounterEditorPanel.GetNameValue();
            var notedGeozoneName = equipmentInventoryPage.ElectricalCounterEditorPanel.GetGeozoneValue();
            var notedLatitude = equipmentInventoryPage.ElectricalCounterEditorPanel.GetLatitudeValue();
            var notedLongtitude = equipmentInventoryPage.ElectricalCounterEditorPanel.GetLongitudeValue();
            var notedControllerId = equipmentInventoryPage.ElectricalCounterEditorPanel.GetControllerIdValue();
            var notedIdentifier = equipmentInventoryPage.ElectricalCounterEditorPanel.GetIdentifierValue();
            var notedTypeOfEquipment = equipmentInventoryPage.ElectricalCounterEditorPanel.GetTypeOfEquipmentValue();

            Step("28. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("29. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("30. Browse to geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("31. Verify The newly-created counter is present in geozone A");
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.ElectricalCounter);
            VerifyEqual(string.Format("31. Verify The newly-created counter '{0}' is present in geozone '{1}'", counterName, geozone), true, subNodesList.Exists(p => p.Equals(counterName)));

            Step("32. Select the created counter");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(counterName);

            Step("33. Verify Electrical Counter Editor panel appears");
            VerifyEqual("33. Verify Electrical Counter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("34. Verify Electrical Counter Editor panel displays the same values of Name, GeoZone, Latitude, Longitude, Controller ID, Identifier, Equipment Type as before refreshing browser");
            VerifyDeviceBasicInfo(equipmentInventoryPage, notedName, notedGeozoneName);
            VerifyDeviceLatitudeLongitude(equipmentInventoryPage, notedLatitude, notedLongtitude);
            VerifyDeviceIdentity(equipmentInventoryPage, notedControllerId, notedIdentifier, notedTypeOfEquipment);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_38_01 Electrical Counter - Create - Validation")]
        public void EI_38_01()
        {
            var testData = GetTestDataOfEI_38_01();
            var controllerId = testData["ControllerId"];
            var controllerName = testData["ControllerName"];
            var geozone = SLVHelper.GenerateUniqueName("GZNEI3801");
            var counterName = SLVHelper.GenerateUniqueName("MTR");
            var existingCounter = SLVHelper.GenerateUniqueName("MTREx");
            var counterPath = string.Format(@"{0}\{1}", geozone, counterName);
            var typeOfEquipment = "CIRWATT MINI[Counter]";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI3801*");
            CreateNewGeozone(geozone);
            CreateNewDevice(DeviceType.ElectricalCounter, existingCounter, controllerId, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select geozone A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Dropdown Add menu then click Add Device menu item");
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddDeviceMenuItem();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisplayed();

            Step("6. Verify New Device panel appears");
            VerifyEqual("6. Verify New Device panel appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("7. Select 'ELECTRICAL COUNTER'");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectDevice(DeviceType.ElectricalCounter);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.WaitForNewDevicePropertiesSectionDisplayed();

            Step("8. Verify New Device panel switches to controller property content");
            VerifyEqual("8. Verify New Device panel switches to controller property content", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsNewDevicePropertiesSectionDisplayed());
            VerifyEqual("[#1398297] 8. Verify An input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsIdentifierInputReadOnly());

            Step("9. Leave all fields empty");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(string.Empty);

            Step("10. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("11. Verify A dialog with title 'Warning' and message 'Please enter a device name.' appears");
            VerifyEqual("11. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("11. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("11. Verify dialog message is 'Please enter a device name.'", "Please enter a device name.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("12. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("13. Verify The dialog disappears");
            VerifyEqual("13. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("14. Verify New Device panel still displays");
            VerifyEqual("14. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("15. Enter any value into Name field; Leave other fields empty");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(counterName);

            Step("16. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("17. Verify A dialog with title 'Warning' and message 'Please enter 'Controller ID' property.' appears");
            VerifyEqual("17. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("17. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("17. Verify dialog message is 'Please enter 'Controller ID' property.'", "Please enter 'Controller ID' property.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("18. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("19. Verify The dialog disappears");
            VerifyEqual("19. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("20. Verify New Device panel still displays");
            VerifyEqual("20. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("21. Select a value for Controller id field; Leave other fields intact");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectControllerIdDropDown(controllerName);

            Step("22. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("23. Verify A dialog with title 'Warning' and message 'Please enter 'Identifier' property.' appears");
            VerifyEqual("23. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("23. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("23. Verify dialog message is 'Please enter 'Identifier' property.'", "Please enter 'Identifier' property.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("24. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("25. Verify The dialog disappears");
            VerifyEqual("25. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("26. Verify New Device panel still displays");
            VerifyEqual("26. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("27. Enter any but not existing device name value into Identifier field; Leave other fields intact");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterIdentifierInput(counterName);

            Step("28. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("29. Verify A dialog with title 'Warning' and message 'Please enter 'Type of equipment' property.' appears");
            VerifyEqual("29. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("29. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("29. Verify dialog message is 'Please enter 'Type of equipment' property.'", "Please enter 'Type of equipment' property.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("30. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("31. Verify The dialog disappears");
            VerifyEqual("31. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("32. Verify New Device panel still displays");
            VerifyEqual("32. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("33. Enter an existing device name into Name field; Leave other fields intact");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(existingCounter);

            Step("34. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("35. Verify A dialog with title 'Warning' and message 'This device name already exists!' appears");
            VerifyEqual("35. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("35. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("35. Verify dialog message is 'This device name already exists!'", "This device name already exists!", equipmentInventoryPage.Dialog.GetMessageText());

            Step("36. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("37. Verify The dialog disappears");
            VerifyEqual("37. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("38. Verify New Device panel still displays");
            VerifyEqual("38. Verify New Device panel still appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("39. Enter an unexisting name; Enter an existing identifier value; Other fields are left intact");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(counterName);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterIdentifierInput(existingCounter);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectTypeOfEquipmentDropDown(typeOfEquipment);

            Step("40. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();

            Step("41. Verify New Device panel disappears");
            VerifyEqual("41. Verify New Device panel disappears", false, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("42. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel'");
            VerifyEqual("42. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel.'", "Position the new device on the map. Click here to cancel.", equipmentInventoryPage.Map.GetRecorderText());

            Step("43. Click on the map");
            equipmentInventoryPage.Map.DragMapToRandomLocation();
            equipmentInventoryPage.Map.ZoomInToGLLevel(ZoomGLLevel.m50);
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("44. Verify A dialog with title 'Error' and message Id '{counter id}@{controller id of step #21} already used for item 'Device'! appears");            
            var expectedMessage = string.Format("Id '{0}@{1} already used for item 'Device'!", existingCounter, controllerId);
            VerifyEqual("44. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("44. Verify dialog title is 'Error'", "Error", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual(string.Format("44. Verify dialog message is '{0}", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("45. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("46. Verify The dialog disappears");
            VerifyEqual("46. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("47. Verify Geozone Editor panel appears back");
            VerifyEqual("47. Verify Geozone Editor panel appears back", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("48. Verify There is no device with name previously entered in New Device panel present in geozone A");
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.ElectricalCounter);
            VerifyEqual(string.Format("48. Verify Electrical Counter '{0}' is not present in geozone '{1}'", counterName, geozone), false, subNodesList.Exists(p => p.Equals(counterName)));

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_39 Electrical Counter - Update")]
        public void EI_39()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI39");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var counterName = SLVHelper.GenerateUniqueName("MTR");
            var counterPath = string.Format(@"{0}\{1}", geozone, counterName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI39*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.ElectricalCounter, counterName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select a counter A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(counterPath);

            Step("4. Verify Counter Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Counter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Note tabs, expandable sections and all values in the editor of the counter, both editable and readonly ones");
            var tabsList = equipmentInventoryPage.ElectricalCounterEditorPanel.GetListOfTabsName();
            var groupsList = equipmentInventoryPage.ElectricalCounterEditorPanel.GetListOfGroupsName();
            equipmentInventoryPage.ElectricalCounterEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ExpandGroupsActiveTab();
            //Identity of the energy meter
            var controllerId = equipmentInventoryPage.ElectricalCounterEditorPanel.GetControllerIdValue();
            var readonlyIdentifier = equipmentInventoryPage.ElectricalCounterEditorPanel.GetIdentifierValue();
            var typeOfEquipment = equipmentInventoryPage.ElectricalCounterEditorPanel.GetTypeOfEquipmentValue();
            var uniqueAddress = equipmentInventoryPage.ElectricalCounterEditorPanel.GetUniqueAddressValue();

            equipmentInventoryPage.ElectricalCounterEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ExpandGroupsActiveTab();
            //Location
            var address1 = equipmentInventoryPage.ElectricalCounterEditorPanel.GetAddress1Value();

            //About the energy meter
            var typeOfMeter = equipmentInventoryPage.ElectricalCounterEditorPanel.GetTypeOfMeterValue();
            var controllerInstallDate = equipmentInventoryPage.ElectricalCounterEditorPanel.GetControllerInstallDateValue();
            var comment = equipmentInventoryPage.ElectricalCounterEditorPanel.GetCommentValue();

            Step("6. Change values of all editable fields except equipment type");
            EnterElectricalCounterEditableValues(equipmentInventoryPage);

            Step("7. Click Save");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("8. Verify ElectricalCounter Editor panel disappears");
            VerifyEqual("8. Verify ElectricalCounter Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("9. Verify There is no any node in geozone being selected");
            VerifyEqual("9. Verify There is no any node in geozone being selected", false, equipmentInventoryPage.GeozoneTreeMainPanel.HasSelectedNode());

            Step("10. Select the counter again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(counterName);

            Step("11. Verify ElectricalCounter Editor panel appears");
            VerifyEqual("11. Verify ElectricalCounter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("12. Verify Tabs, sections and readonly values are remained unchanged against step #5");
            equipmentInventoryPage.ElectricalCounterEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ExpandGroupsActiveTab();
            var actualTabsList = equipmentInventoryPage.ElectricalCounterEditorPanel.GetListOfTabsName();
            var acutalGroupsList = equipmentInventoryPage.ElectricalCounterEditorPanel.GetListOfGroupsName();
            var actualReadonlyIdentifier = equipmentInventoryPage.ElectricalCounterEditorPanel.GetIdentifierValue();
            VerifyEqual("12. Verify Tabs are unchanged", tabsList, actualTabsList);
            VerifyEqual("12. Verify Group sections are unchanged", groupsList, acutalGroupsList);
            var actualIdentifier = equipmentInventoryPage.ElectricalCounterEditorPanel.GetIdentifierValue();
            VerifyEqual(string.Format("12. Verify Identifier is '{0}'", readonlyIdentifier), readonlyIdentifier, actualIdentifier);

            Step("13. Verify Editable values are the new values (values after step #6)");
            VerifyElectricalCounterEditableValuesAreChanged(equipmentInventoryPage, controllerId, uniqueAddress, address1, typeOfMeter, controllerInstallDate, comment);

            equipmentInventoryPage.ElectricalCounterEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ExpandGroupsActiveTab();
            //Identity of the energy meter
            controllerId = equipmentInventoryPage.ElectricalCounterEditorPanel.GetControllerIdValue();
            typeOfEquipment = equipmentInventoryPage.ElectricalCounterEditorPanel.GetTypeOfEquipmentValue();
            uniqueAddress = equipmentInventoryPage.ElectricalCounterEditorPanel.GetUniqueAddressValue();

            equipmentInventoryPage.ElectricalCounterEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ExpandGroupsActiveTab();
            //Location
            address1 = equipmentInventoryPage.ElectricalCounterEditorPanel.GetAddress1Value();

            //About the energy meter
            typeOfMeter = equipmentInventoryPage.ElectricalCounterEditorPanel.GetTypeOfMeterValue();
            controllerInstallDate = equipmentInventoryPage.ElectricalCounterEditorPanel.GetControllerInstallDateValue();
            comment = equipmentInventoryPage.ElectricalCounterEditorPanel.GetCommentValue();

            Step("14. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("15. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("16. Browse to the controller again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(counterPath);

            Step("17. Verify Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("17. Verify Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("18. Verify Tabs, sections and readonly values are remained unchanged against step #5");
            equipmentInventoryPage.ElectricalCounterEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ExpandGroupsActiveTab();
            actualTabsList = equipmentInventoryPage.ElectricalCounterEditorPanel.GetListOfTabsName();
            acutalGroupsList = equipmentInventoryPage.ElectricalCounterEditorPanel.GetListOfGroupsName();
            actualReadonlyIdentifier = equipmentInventoryPage.ElectricalCounterEditorPanel.GetIdentifierValue();
            VerifyEqual("18. Verify Tabs are unchanged", tabsList, actualTabsList);
            VerifyEqual("18. Verify Group sections are unchanged", groupsList, acutalGroupsList);
            actualIdentifier = equipmentInventoryPage.ElectricalCounterEditorPanel.GetIdentifierValue();
            VerifyEqual(string.Format("18. Verify Identifier is '{0}'", readonlyIdentifier), readonlyIdentifier, actualIdentifier);

            Step("19. Verify Editable values are remained to be the new values (values after step #6)");
            VerifyElectricalCounterEditableValues(equipmentInventoryPage, controllerId, uniqueAddress, address1, typeOfMeter, controllerInstallDate, comment);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_39_01 Electrical Counter - Update - Validation")]
        public void EI_39_01()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI3901");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var counterName = SLVHelper.GenerateUniqueName("MTR");
            var newCounterName = SLVHelper.GenerateUniqueName("MTRNew");
            var counterPath = string.Format(@"{0}\{1}", geozone, counterName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - 'Enable device location' option for Equipment Inventory app in Back Office must be checked");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI3901*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.ElectricalCounter, counterName, controller, geozone);

            var loginPage = Browser.OpenBackOfficeApp();
            var backOfficePage = loginPage.LoginAsValidUserToBackOffice(Settings.Users["admin"].Username, Settings.Users["admin"].Password);
            backOfficePage.BackOfficeOptionsPanel.SelectConfiguration(App.EquipmentInventory);
            var firstDeviceLocationValue = backOfficePage.BackOfficeDetailsPanel.GetEquipmentDeviceLocationValue();
            backOfficePage.BackOfficeDetailsPanel.TickEquipmentDeviceLocationCheckbox(true);
            backOfficePage.BackOfficeDetailsPanel.ClickSaveButton();
            backOfficePage.WaitForPreviousActionComplete();

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var desktopPage = Browser.NavigateToLoggedInCMS();
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select a counter");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(counterPath);

            Step("4. Verify Electrical Counter Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Electrical Counter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Clear Name field");
            equipmentInventoryPage.ElectricalCounterEditorPanel.EnterNameInput(string.Empty);

            Step("6. Click Save");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("7. Verify A dialog with title 'Warning' and message 'Please enter a device name.' appears");
            VerifyEqual("7. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("7. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("7. Verify dialog message is 'Please enter a device name.'", "Please enter a device name.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("8. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("9. Verify The dialog disappears");
            VerifyEqual("9. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("10. Verify Electrical Counter Editor panel is still displayed");
            VerifyEqual("10. Verify Electrical Counter Editor panel still displayed", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("11. Verify Electrical Counter A is still selected in geozone tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("11. Verify The Electrical Counter '{0}' is selected geozone tree", counterName), counterName, selectedNodeName);

            Step("12. Verify ElectricalCounter A is still selected on map");
            VerifyTrue("12. Verify ElectricalCounter A is selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL(), "Selected", "No device selected");

            Step("13. Enter any value into Name field");
            equipmentInventoryPage.ElectricalCounterEditorPanel.EnterNameInput(newCounterName);

            Step("14. Click Save");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("15. Verify ElectricalCounter Editor disappears");
            VerifyEqual("15. Verify ElectricalCounter Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("16. Verify There is not any dialog appearing");
            VerifyEqual("16. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("17. Select counter A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newCounterName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("18. Verify ElectricalCounter Editor panel appears");
            VerifyEqual("18. Verify ElectricalCounter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("19. Verify Value of Name field are the new value");
            VerifyEqual("19. Verify Value of Name field are the new value", newCounterName, equipmentInventoryPage.ElectricalCounterEditorPanel.GetNameValue());

            Step("20. Note current latitude and longitude values");
            var latitude = equipmentInventoryPage.ElectricalCounterEditorPanel.GetLatitudeValue();
            var longitude = equipmentInventoryPage.ElectricalCounterEditorPanel.GetLongitudeValue();

            Step("21. Clear Latitude field");
            equipmentInventoryPage.ElectricalCounterEditorPanel.EnterLatitudeInput(string.Empty);

            Step("22. Click Save");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("23. Verify Electrical Counter Editor panel disappears");
            VerifyEqual("23. Verify ElectricalCounter Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("24. Verify Electrical Counter A is no longer selected in geozone tree");
            selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyTrue(string.Format("24. Verify The Electrical Counter '{0}' is no longer selected geozone tree", counterName), counterName != selectedNodeName, counterName, selectedNodeName);

            Step("25. Verify Electrical Counter A is no longer selected on map");
            VerifyTrue("25. Verify Electrical Counter A is no longer selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL() == false, "No device selected", "Selected");

            Step("26. Select counter A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newCounterName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("27. Verify Electrical Counter Editor panel appears");
            VerifyEqual("27. Verify Electrical Counter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("28. Verify Value of latitude field is restored and equals the value noted at step #20");
            VerifyEqual(string.Format("28. Verify Value of latitude field is restored and equals '{0}'", latitude), latitude, equipmentInventoryPage.ElectricalCounterEditorPanel.GetLatitudeValue());

            Step("29. Verify Value of longitude field is remained the same with the value noted at step #20");
            VerifyEqual(string.Format("29. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.ElectricalCounterEditorPanel.GetLongitudeValue());

            Step("30. Clear Longitude field");
            equipmentInventoryPage.ElectricalCounterEditorPanel.EnterLongitudeInput(string.Empty);

            Step("31. Click Save");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("32. Verify Electrical Counter Editor panel disappears");
            VerifyEqual("32. Verify Electrical Counter Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("33. Select counter A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newCounterName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("34. Verify Electrical Counter Editor panel appears");
            VerifyEqual("34. Verify Electrical Counter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("35. Verify Value of latitude field is remained the same with the value noted at step #20");
            VerifyEqual(string.Format("35. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.ElectricalCounterEditorPanel.GetLatitudeValue());

            Step("36. Verify Value of longitude field is restored and equals the value noted at step #20");
            VerifyEqual(string.Format("36. Verify Value of longitude field is restored and equals the value '{0}'", longitude), longitude, equipmentInventoryPage.ElectricalCounterEditorPanel.GetLongitudeValue());

            Step("37. Clear both Latitude and Longitude fields");
            equipmentInventoryPage.ElectricalCounterEditorPanel.EnterLatitudeInput(string.Empty);
            equipmentInventoryPage.ElectricalCounterEditorPanel.EnterLongitudeInput(string.Empty);

            Step("38. Click Save");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("39. Verify Electrical Counter Editor panel disappears");
            VerifyEqual("39. Verify Electrical Counter Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("40. Select counter A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newCounterName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("41. Verify Electrical Counter Editor panel appears");
            VerifyEqual("41. Verify Electrical Counter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("42. Verify Values of latitude and longitude fields are remained the same with the values noted at step #20");
            VerifyEqual(string.Format("42. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.ElectricalCounterEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("42. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.ElectricalCounterEditorPanel.GetLongitudeValue());

            Step("43. Enter values of alphanumeric/non-alphanumeric into Latitude and Longitude fields");
            equipmentInventoryPage.ElectricalCounterEditorPanel.EnterLatitudeInput(SLVHelper.GenerateString());
            equipmentInventoryPage.ElectricalCounterEditorPanel.EnterLongitudeInput(SLVHelper.GenerateString());

            Step("44. Click Save");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("45. Verify Electrical Counter Editor panel disappears");
            VerifyEqual("45. Verify Electrical Counter Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("46. Select counter A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newCounterName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("47. Verify Electrical Counter Editor panel appears");
            VerifyEqual("47. Verify Electrical Counter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("48. Verify Values of latitude and longitude fields are remained the same with the values noted at step #20");
            VerifyEqual(string.Format("48. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.ElectricalCounterEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("48. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.ElectricalCounterEditorPanel.GetLongitudeValue());

            Step("49. Increase 1 the last number of Latitude and Longitude fields");
            var newLatitude = IncreaseLatLong(latitude);
            var newLongitude = IncreaseLatLong(longitude);
            equipmentInventoryPage.ElectricalCounterEditorPanel.EnterLatitudeInput(newLatitude);
            equipmentInventoryPage.ElectricalCounterEditorPanel.EnterLongitudeInput(newLongitude);
            equipmentInventoryPage.ElectricalCounterEditorPanel.EnterLongitudeInput(newLongitude); //Re-enter 2nd time for auto-filled input issue.

            Step("50. Click Save");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("51. Verify Electrical Counter Editor panel disappears");
            VerifyEqual("51. Verify Electrical Counter Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("52. Select counter A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newCounterName);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("53. Verify Electrical Counter Editor panel appears");
            VerifyEqual("53. Verify Electrical Counter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("54. Verify Values of latitude and longitude fields are the new values");
            var actualLatitude = equipmentInventoryPage.ElectricalCounterEditorPanel.GetLatitudeValue();
            var actualLongitude = equipmentInventoryPage.ElectricalCounterEditorPanel.GetLongitudeValue();
            VerifyTrue(string.Format("54. Verify Value of latitude field is changed '{0}' to '{1}'", latitude, newLatitude), latitude != actualLatitude, actualLatitude, latitude);
            VerifyTrue(string.Format("54. Verify Value of longitude field is changed {0}' to '{1}'", longitude, newLongitude), longitude != actualLongitude, actualLongitude, longitude);

            Step("55. Refresh browser without saving");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("56. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("57. Browse to and select counter A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(string.Format(@"{0}\{1}", geozone, newCounterName));

            Step("58. Verify ElectricalCounter Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("58. Verify ElectricalCounter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("59. Verify Value of name, latitude, longitude are its last updated values");
            VerifyEqual(string.Format("59. Verify Value of latitude field is '{0}'", actualLatitude), actualLatitude, equipmentInventoryPage.ElectricalCounterEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("59. Verify Value of longitude field is {0}'", actualLongitude), actualLongitude, equipmentInventoryPage.ElectricalCounterEditorPanel.GetLongitudeValue());

            try
            {
                DeleteGeozone(geozone);

                backOfficePage = Browser.NavigateToLoggedInBackOfficeApp();
                backOfficePage.BackOfficeOptionsPanel.SelectConfiguration(App.EquipmentInventory);
                backOfficePage.BackOfficeDetailsPanel.TickEquipmentDeviceLocationCheckbox(false);
                backOfficePage.BackOfficeDetailsPanel.ClickSaveButton();
                backOfficePage.WaitForPreviousActionComplete();
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_40 Electrical Counter - Delete")]
        public void EI_40()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI40");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var counterName = SLVHelper.GenerateUniqueName("MTR");
            var counterPath = string.Format(@"{0}\{1}", geozone, counterName);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI40*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.ElectricalCounter, counterName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select a counter A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(counterPath);

            Step("4. Verify Counter Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Counter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Click Remove icon button");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ClickDeleteButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("6. Verify A dialog with message 'Would you like to delete {{counter A's name}} equipment ?' appears");
            var expectedMessage = string.Format("Would you like to delete {0} equipment ?", counterName);
            VerifyEqual("6. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual(string.Format("6. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("7. Click No");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("8. Verify The dialog disappears");
            VerifyEqual("8. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("9. Verify Counter Editor panel remains displaying");
            VerifyEqual("9. Verify Counter Editor panel remains displaying", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("10. Verify Counter A is still remained selected in Geozone Tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("10. Verify Counter '{0}' is still remained selected in Geozone Tree", counterName), counterName, selectedNodeName);

            Step("11. Click Remove icon button again");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ClickDeleteButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("12. Verify A dialog with message 'Would you like to delete {{counter A's name}} equipment ?' appears again");
            VerifyEqual("12. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual(string.Format("12. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("13. Click Yes");
            equipmentInventoryPage.Dialog.ClickYesButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForHeaderMessageDisappeared();

            Step("14. Verify The dialog disappears");
            VerifyEqual("14. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("15. Verify Counter Editor panel disappears");
            VerifyEqual("14. Verify Counter Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("16. Verify Counter A is no longer present in its parent geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.ElectricalCounter);
            VerifyEqual(string.Format("16. Verify Counter '{0}' is no longer present in its parent geozone '{1}'", counterName, geozone), false, subNodesList.Exists(p => p.Equals(counterName)));

            Step("17. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("18. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("19. Browse to the counter A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("20. Verify Counter A is not present in its parent geozone");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.ElectricalCounter);
            VerifyEqual(string.Format("20. Verify Counter '{0}' is not present in its parent geozone '{1}'", counterName, geozone), false, subNodesList.Exists(p => p.Equals(counterName)));

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_45 Electrical Counter - Editor - Equipment Type - All")]
        public void EI_45()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI45");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var counterName = SLVHelper.GenerateUniqueName("MTR");
            var counterPath = string.Format(@"{0}\{1}", geozone, counterName);
            var expectedTabs = new List<string> { "Identity", "Inventory" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI45*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.ElectricalCounter, counterName, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select counter A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(counterPath);

            Step("4. Verify Counter Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Counter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            var typeOfEquipments = equipmentInventoryPage.ElectricalCounterEditorPanel.GetListOfEquipmentTypes();
            foreach (var type in typeOfEquipments)
            {
                Step("5. Select any type of equipment in Identity tab");
                Step(string.Format("--> Select type of equipment '{0}'", type));
                equipmentInventoryPage.ElectricalCounterEditorPanel.SelectTypeOfEquipmentDropDown(type);

                Step("6. Click Save");
                equipmentInventoryPage.ElectricalCounterEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("7. Verify ElectricalCounter Editor panel disappears");
                VerifyEqual("7. Verify ElectricalCounter Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("8. Select counter A again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(counterName);

                Step("9. Verify Counter Editor panel appears back");
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
                VerifyEqual("9. Verify Counter Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("10. Verify Value of Name is correct");
                VerifyEqual(string.Format("10. Verify Name is '{0}'", counterName), counterName, equipmentInventoryPage.ElectricalCounterEditorPanel.GetNameValue());

                Step("11. Verify Value of Geozone is correct");
                VerifyEqual(string.Format("11. Verify Geozone is '{0}'", geozone), geozone, equipmentInventoryPage.ElectricalCounterEditorPanel.GetGeozoneValue());

                Step("12. Verify Values of Longitude, Latitude are not empty");
                VerifyEqual("12. Verify Longitude is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.ElectricalCounterEditorPanel.GetLongitudeValue()));
                VerifyEqual("12. Verify Latitude is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.ElectricalCounterEditorPanel.GetLatitudeValue()));

                Step("13. Verify The tabs Identity, Inventory are displayed");
                var actualTabs = equipmentInventoryPage.ElectricalCounterEditorPanel.GetListOfTabsName();
                VerifyContain("13. Verify The tabs Identity, Inventory are displayed", actualTabs, expectedTabs);

                Step("14. Verify In the Identity tab, the following attributes are displayed: 'Controller ID', 'Identifier', 'Type of Equipment', 'Unique Address'");
                Step("15. Verify Identifier is read only");
                var isIdentityTabExisting = equipmentInventoryPage.ElectricalCounterEditorPanel.IsTabExisting("Identity");
                if (isIdentityTabExisting)
                {
                    equipmentInventoryPage.ElectricalCounterEditorPanel.SelectTab("Identity");
                    equipmentInventoryPage.ElectricalCounterEditorPanel.ExpandGroup("Control System");
                    var actualIControlerId = equipmentInventoryPage.ElectricalCounterEditorPanel.GetControllerIdText();
                    VerifyTrue("15. Verify Controller ID label is 'Controller ID'", actualIControlerId == "Controller ID" || actualIControlerId == "Controller ID *", "Controller ID/Controller ID *", actualIControlerId);
                    VerifyEqual("15. Verify Controller ID dropdown is displayed", true, equipmentInventoryPage.ElectricalCounterEditorPanel.IsControllerIdDropDownDisplayed());
                    var actualIdentifier = equipmentInventoryPage.ElectricalCounterEditorPanel.GetIdentifierText();
                    VerifyTrue("15. Verify Identifier label is 'Identifier'", actualIdentifier == "Identifier" || actualIdentifier == "Identifier *", "Identifier/Identifier *", actualIdentifier);
                    VerifyEqual("15. Verify Identifier input is displayed", true, equipmentInventoryPage.ElectricalCounterEditorPanel.IsIdentifierInputDisplayed());
                    var actualTypeOfEquipmentText = equipmentInventoryPage.ElectricalCounterEditorPanel.GetTypeOfEquipmentText();
                    VerifyTrue("15. Verify Type of Equipment label is 'Type of equipment'", actualTypeOfEquipmentText == "Type of equipment" || actualTypeOfEquipmentText == "Type of equipment *", "Type of equipment/Type of equipment *", actualTypeOfEquipmentText);
                    VerifyEqual("15. Verify Type of Equipment dropdown is displayed", true, equipmentInventoryPage.ElectricalCounterEditorPanel.IsTypeOfEquipmentDropDownDisplayed());
                    VerifyEqual("15. Verify Unique Address label is 'Unique address'", "Unique address", equipmentInventoryPage.ElectricalCounterEditorPanel.GetUniqueAddressText());
                    VerifyEqual("15. Verify Unique Address input is displayed", true, equipmentInventoryPage.ElectricalCounterEditorPanel.IsUniqueAddressInputDisplayed());
                }
                else
                {
                    Warning("15. Identity tab does not exist");
                }

                Step("16. Verify In the Inventory tab, the following attributes are displayed: 'Type of meter', 'Controller install date', 'Comment'");
                var isInventoryTabExisting = equipmentInventoryPage.ElectricalCounterEditorPanel.IsTabExisting("Inventory");
                if (isInventoryTabExisting)
                {
                    equipmentInventoryPage.ElectricalCounterEditorPanel.SelectTab("Inventory");
                    equipmentInventoryPage.ElectricalCounterEditorPanel.ExpandGroupsActiveTab();
                    VerifyEqual("16. Verify Type of meter label is 'Type of meter'", "Type of meter", equipmentInventoryPage.ElectricalCounterEditorPanel.GetTypeOfMeterText());
                    VerifyEqual("16. Verify Type of meter dropdown is displayed", true, equipmentInventoryPage.ElectricalCounterEditorPanel.IsTypeOfMeterDropDownDisplayed());
                    VerifyEqual("16. Verify Controller install date label is 'Controller install date'", "Controller install date", equipmentInventoryPage.ElectricalCounterEditorPanel.GetControllerInstallDateText());
                    VerifyEqual("16. Verify Controller install date input is displayed", true, equipmentInventoryPage.ElectricalCounterEditorPanel.IsControllerInstallDateInputDisplayed());
                    VerifyEqual("16. Verify Comment label is 'Comment'", "Comment", equipmentInventoryPage.ElectricalCounterEditorPanel.GetCommentText());
                    VerifyEqual("16. Verify Comment input is displayed", true, equipmentInventoryPage.ElectricalCounterEditorPanel.IsCommentInputDisplayed());
                }
                else
                {
                    Warning("16. Inventory tab does not exist");
                }

                Step("17. Verify The buttons 'Duplicate', 'Save' and 'Delete' are displayed");
                VerifyEqual("17. Verify Duplicate button is displayed", true, equipmentInventoryPage.ElectricalCounterEditorPanel.IsDuplicateButtonDisplayed());
                VerifyEqual("17. Verify Save button is displayed", true, equipmentInventoryPage.ElectricalCounterEditorPanel.IsSaveButtonDisplayed());
                VerifyEqual("17. Verify Delete button is displayed", true, equipmentInventoryPage.ElectricalCounterEditorPanel.IsDeleteButtonDisplayed());

                Step("18. Repeat from step #5 to end for the rest of equipment types");
                equipmentInventoryPage.ElectricalCounterEditorPanel.SelectTab("Identity");
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_45_01 Electrical Counter - Editor - Equipment Type - Cirwatt Mini")]
        public void EI_45_01()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI4501");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var counterName = SLVHelper.GenerateUniqueName("MTR");
            var counterPath = string.Format(@"{0}\{1}", geozone, counterName);
            var typeofEquipment = "CIRWATT MINI[Counter]";
            var expectedTabs = new List<string> { "Identity", "Inventory" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step("**** Precondition ****\n");
            
            Step("-> Create data for testing");
            DeleteGeozones("GZNEI4501*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.ElectricalCounter, counterName, controller, geozone, "AccuEnergy EV188[Counter]");

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select meter A");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(counterPath);

            Step("4. Verify Meter Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Meter Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Select type of equipment = 'Cirwatt Mini' in Identity tab");
            equipmentInventoryPage.ElectricalCounterEditorPanel.SelectTypeOfEquipmentDropDown(typeofEquipment);

            Step("6. Click Save");
            equipmentInventoryPage.ElectricalCounterEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

            Step("7. Verify Meter Editor panel disappears");
            VerifyEqual("7. Verify Meter Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("8. Select meter A again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(counterName);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("9. Verify Meter Editor panel appears again");
            VerifyEqual("9. Verify Meter Editor panel appears again", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("10. Verify Value of Name is correct");
            VerifyEqual("10. Verify Value of Name is correct", counterName, equipmentInventoryPage.ElectricalCounterEditorPanel.GetNameValue());

            Step("11. Verify Value of Geozone is correct");
            VerifyEqual("11. Verify Value of Geozone is correct", geozone, equipmentInventoryPage.ElectricalCounterEditorPanel.GetGeozoneValue());

            Step("12. Verify Values of Longitude, Latitude are not empty");
            VerifyEqual("12. Verify Values of Longitude is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.ElectricalCounterEditorPanel.GetLongitudeValue()));
            VerifyEqual("12. Verify Value of Latitude  is not empty", true, !string.IsNullOrEmpty(equipmentInventoryPage.ElectricalCounterEditorPanel.GetLatitudeValue()));

            Step("13. Verify The tabs Identity and Inventory are displayed");
            var actualTabs = equipmentInventoryPage.ElectricalCounterEditorPanel.GetListOfTabsName();
            VerifyContain("13. Verify The tabs Identity, Inventory are displayed", actualTabs, expectedTabs);

            Step("14. Verify In the Identity tab, the following attributes are displayed: 'Controller ID', 'Identifier', 'Type of Equipment', 'Unique Address'");
            equipmentInventoryPage.ElectricalCounterEditorPanel.SelectTab("Identity");
            var actualIControlerId = equipmentInventoryPage.StreetlightEditorPanel.GetControllerIdText();
            VerifyTrue("14. Verify Controller ID label is 'Controller ID'", actualIControlerId == "Controller ID" || actualIControlerId == "Controller ID *", "Controller ID/Controller ID *", actualIControlerId);
            VerifyEqual("14. Verify Controller ID dropdown is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsControllerIdDropDownDisplayed());
            var actualIdentifier = equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierText();
            VerifyTrue("14. Verify Identifier label is 'Identifier'", actualIdentifier == "Identifier" || actualIdentifier == "Identifier *", "Identifier/Identifier *", actualIdentifier);
            VerifyEqual("14. Verify Identifier input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsIdentifierInputDisplayed());
            var actualTypeOfEquipmentText = equipmentInventoryPage.StreetlightEditorPanel.GetTypeOfEquipmentText();
            VerifyTrue("14. Verify Type of Equipment label is 'Type of equipment'", actualTypeOfEquipmentText == "Type of equipment" || actualTypeOfEquipmentText == "Type of equipment *", "Type of equipment/Type of equipment *", actualTypeOfEquipmentText);
            VerifyEqual("14. Verify Type of Equipment dropdown is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsTypeOfEquipmentDropDownDisplayed());
            VerifyEqual("14. Verify Unique Address label is 'Unique address'", "Unique address", equipmentInventoryPage.StreetlightEditorPanel.GetUniqueAddressText());
            VerifyEqual("14. Verify Unique Address input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsUniqueAddressInputDisplayed());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_47 CSV import is creating several times the same geozone")]
        public void EI_47()
        {
            var geozone1 = SLVHelper.GenerateUniqueName("GZNEI4701");
            var geozone2 = SLVHelper.GenerateUniqueName("GZNEI4702");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight1 = SLVHelper.GenerateUniqueName("STL01");
            var streetlight2 = SLVHelper.GenerateUniqueName("STL02");
            var streetlight3 = SLVHelper.GenerateUniqueName("STL03");
            var geozonePath = string.Format(@"{0}\{1}", geozone1, geozone2);
            var fullGeozonePath = string.Format(@"{0}/{1}/{2}", Settings.RootGeozoneName, geozone1, geozone2);            
            var typeOfEquipment = "Telematics LCU[Lamp]";
            var csvNewFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI4701.csv");            
            var streetlight1N = new DeviceModel() { Type = DeviceType.Streetlight, Controller = controller, Id = streetlight1, Name = streetlight1, Latitude = SLVHelper.GenerateLatitude(), Longitude = SLVHelper.GenerateLongitude(), TypeOfEquipment = typeOfEquipment };
            var streetlight2N = new DeviceModel() { Type = DeviceType.Streetlight, Controller = controller, Id = streetlight2, Name = streetlight2, Latitude = SLVHelper.GenerateLatitude(), Longitude = SLVHelper.GenerateLongitude(), TypeOfEquipment = typeOfEquipment };
            var streetlight3N = new DeviceModel() { Type = DeviceType.Streetlight, Controller = controller, Id = streetlight3, Name = streetlight3, Latitude = SLVHelper.GenerateLatitude(), Longitude = SLVHelper.GenerateLongitude(), TypeOfEquipment = typeOfEquipment };
            var newStreetlights = new List<DeviceModel> { streetlight1N, streetlight2N, streetlight3N };
            var csvUpdatedFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI4702.csv");
            var streetlight1U = new DeviceModel() { Type = DeviceType.Streetlight, Controller = controller, Id = streetlight1, Name = SLVHelper.GenerateUniqueName("STL01U"), Latitude = SLVHelper.GenerateLatitude(), Longitude = SLVHelper.GenerateLongitude(), TypeOfEquipment = typeOfEquipment };
            var streetlight2U = new DeviceModel() { Type = DeviceType.Streetlight, Controller = controller, Id = streetlight2, Name = SLVHelper.GenerateUniqueName("STL02U"), Latitude = SLVHelper.GenerateLatitude(), Longitude = SLVHelper.GenerateLongitude(), TypeOfEquipment = typeOfEquipment };
            var streetlight3U = new DeviceModel() { Type = DeviceType.Streetlight, Controller = controller, Id = streetlight3, Name = SLVHelper.GenerateUniqueName("STL03U"), Latitude = SLVHelper.GenerateLatitude(), Longitude = SLVHelper.GenerateLongitude(), TypeOfEquipment = typeOfEquipment };
            var updatedStreetlights = new List<DeviceModel> { streetlight1U, streetlight2U, streetlight3U };            

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Prepare the 2 csv files, each file containing 3 streetlights of a exsiting geozone (new file and updated one)");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI47*");
            CreateNewGeozone(geozone1);
            CreateNewGeozone(geozone2, geozone1);
            CreateNewController(controller, geozone1);
            CreateCsvDevices(csvNewFilePath, fullGeozonePath, newStreetlights);
            CreateCsvDevices(csvUpdatedFilePath, fullGeozonePath, updatedStreetlights);
            ImportFile(csvNewFilePath);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Using API to import the new CSV file, then refresh the page and go to the testing geozone");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozonePath);

            Step("2. Verify The 3 newly imported streetlights displays on the geozone tree and belongs to the testing geozone");
            var expectedStreetlights = newStreetlights.Select(p => p.Name).ToList();
            var actualStreetlights = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildDeviceNamesOfSelectedNode();
            VerifyEqual("2. Verify The 3 newly imported streetlights displays on the geozone tree and belongs to the testing geozone", expectedStreetlights, actualStreetlights, false);

            Step("3. Select a new streetlight");
            var randomStreelight = newStreetlights.PickRandom();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(randomStreelight.Name);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify The information of the new streetlight is matched the csv file");
            VerifyEqual(string.Format("4. Verify Streetlight Name is {0}", randomStreelight.Name), randomStreelight.Name, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());
            VerifyEqual(string.Format("4. Verify Streetlight Identifier is {0}", randomStreelight.Id), randomStreelight.Id, equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue());
            VerifyEqual(string.Format("4. Verify Streetlight Latitude is {0}", randomStreelight.Latitude), randomStreelight.Latitude + " °", equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("4. Verify Streetlight Longitude is {0}", randomStreelight.Longitude), randomStreelight.Longitude + " °", equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue());

            Step("5. Using API to import the updated CSV file, then refresh the page and go to the testing geozone");
            ImportFile(csvUpdatedFilePath);
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozonePath);

            Step("6. Verify The streetlight's name is updated in the geozone tree");
            var updatedStreelight = updatedStreetlights.FirstOrDefault(p => p.Id == randomStreelight.Id);
            var streetlights = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildDeviceNamesOfSelectedNode();
            VerifyTrue("6. Verify The streetlight's name is updated in the geozone tree", streetlights.Contains(updatedStreelight.Name), updatedStreelight.Name, string.Join(", ", streetlights));

            Step("7. Select the updated streetlight");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(updatedStreelight.Name);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("8. Verify ");
            Step(" - The information of the new streetlight is matched the csv file");
            Step(" - There is only one testing geozone in the geozone tree (the geozone is not duplicated after importing a csv file)");
            VerifyEqual(string.Format("8. Verify Streetlight Name is {0}", updatedStreelight.Name), updatedStreelight.Name, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());
            VerifyEqual(string.Format("8. Verify Streetlight Identifier is {0}", updatedStreelight.Id), updatedStreelight.Id, equipmentInventoryPage.StreetlightEditorPanel.GetIdentifierValue());
            VerifyEqual(string.Format("8. Verify Streetlight Latitude is {0}", updatedStreelight.Latitude), updatedStreelight.Latitude + " °", equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("8. Verify Streetlight Longitude is {0}", updatedStreelight.Longitude), updatedStreelight.Longitude + " °", equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue());

            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(Settings.RootGeozoneName);
            var geozones = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.GeoZone);
            var existingGeozoneCount = geozones.Count(p => p.Equals(geozone2));
            VerifyEqual("8. There is no testing geozone in the ROOT geozone(the geozone is not duplicated after importing a csv file)", 0, existingGeozoneCount);

            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone1);
            geozones = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.GeoZone);
            existingGeozoneCount = geozones.Count(p => p.Equals(geozone2));
            VerifyEqual("8. There is only one testing geozone in its parent geozone(the geozone is not duplicated after importing a csv file)", 1, existingGeozoneCount);

            try
            {
                DeleteGeozone(geozone1);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("SC-1136 - Equipment Export in French Language is throwing 404 error")]
        [NonParallelizable]
        public void EI_48()
        { 
            string exportedFilePatternInFrench = "Equipements*.csv";

            Step("**** Precondition ****");
            Step(" - User using France has logged in successfully");
            Step("**** Precondition ****\n");

            var userModel = CreateNewProfileAndUser(language: "fr_FR");
            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(userModel.Username, userModel.Password);
            desktopPage.InstallAppsIfNotExist(SLVHelper.ConvertAppName(App.EquipmentInventory, "French"));

            Step("1. Go to Équipements (Equipment Inventory) app");
            Step("2. Verify Équipements (Equipment Inventory) page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
           
            Step("3. Verify Information panel of GeoZones displays on the left");
            VerifyEqual("3. Verify Information panel of GeoZones displays on the left", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("4. Press Plus button and select the option Exporter");
            equipmentInventoryPage.Export();
            
            Step("5. Verify The Exporter panel displays");
            VerifyEqual("5. Verify The Exporter panel displays", true, equipmentInventoryPage.GeozoneEditorPanel.IsExportPanelDisplayed());

            Step("6. Press Next button and then press Save button and wait for the system processes completely in a few second");
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.ClickNextButton();
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.WaitForPropertiesListPanelDisplayed();
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.WaitForSaveButtonDisplayed();
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.ClickSaveButton();
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.WaitForDownloadButtonDisplayed();
            equipmentInventoryPage.WaitForPreviousActionComplete();            

            Step("7. Verify The Save button is replaced by the Download button");           
            VerifyEqual("7. Verify The Save button disappears", true, !equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.IsSaveButtonDisplayed());
            VerifyEqual("7. Verify The Download button displays", true, equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.IsDownloadButtonDisplayed());

            Step("8. Press Download button");
            SLVHelper.DeleteAllFilesByPattern(exportedFilePatternInFrench);
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.ClickDownloadButton();
            SLVHelper.SaveDownloads();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForExportPanelDisappeared();

            Step("9. Verify The csv file is downloaded successfully.");
            Step(" • The Exporter panel disappears.");
            Step(" • The information panel of the Geozones displays again.");
            VerifyEqual("9. Verify The csv file is downloaded successfull(with name format 'Equipements*.csv')", true, SLVHelper.CheckFileExists(exportedFilePatternInFrench));
            VerifyEqual("9. Verify The Exporter panel disappears", true, !equipmentInventoryPage.GeozoneEditorPanel.IsExportPanelDisplayed());
            VerifyEqual("9. Verify The information panel of the Geozones displays again", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());            

            try
            {
                DeleteUserAndProfile(userModel);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_49 SC-782 Add new streetlight sharing the same location")]
        public void EI_49()
        {
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI49.csv");
            var geozone = SLVHelper.GenerateUniqueName("GZNEI49");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight1 = SLVHelper.GenerateUniqueName("STL01");
            var streetlight2 = SLVHelper.GenerateUniqueName("STL02");
            var streetlight3 = SLVHelper.GenerateUniqueName("STL03");
            var fullGeozonePath = Settings.RootGeozoneName + @"/" + geozone;
            var typeOfEquipment = "ABEL-Vigilon A[Dimmable ballast]";
            var longitude = "92.90999";
            var latitude = "12.23284";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a testing geozone containing a streetlight");
            Step(" - Prepare a csv file for the case: importing a new streetlight from csv file");
            Step("**** Precondition ****\n");
            
            Step("-> Create data for testing");
            DeleteGeozones("GZNEI49*");
            CreateNewGeozone(geozone, latMin: "12.23025", latMax: "12.23543", lngMin: "92.90449", lngMax: "92.91550");
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight1, controller, geozone, typeOfEquipment, latitude, longitude);
            CreateCsv(DeviceType.Streetlight, csvFilePath, fullGeozonePath, controller, streetlight3, typeOfEquipment, latitude, longitude);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select the testing geozone and add a new streetlight then position the new streetlight at the same location of the existing streetlight");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.CreateDevice(DeviceType.Streetlight, streetlight2, controller, streetlight2, typeOfEquipment, "", true);
            
            Step("4. Verify The new streetlight is added with");
            Step(" - The testing streetlight is highlighted on geozone tree");
            Step(" - The streetlight information panel is in the left screen with the name of testing streetlight");
            Step(" - The marker on the map displays the number of devices sharing the same location");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            VerifyEqual("4. Verify The testing streetlight is highlighted on geozone tree", streetlight2, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());
            VerifyEqual("4. Verify The streetlight information panel is in the left screen with the name of testing streetlight", streetlight2, equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName());
            var cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("4. Verify The marker on the map displays the number of devices sharing the same location", "2", cluster.DeviceCount);

            Step("5. Mouse over the marker");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);

            Step("6. Verify A tooltip displays with 2 rows");
            Step(" - 'Device Cluster'");
            Step(" - '{# of devices} devices'");
            var clusterName = equipmentInventoryPage.Map.GetDeviceNameGL();
            var deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("6. Verify A tooltip displays: Device Cluster", "Device Cluster", clusterName);
            VerifyEqual("6. Verify A tooltip displays: {# of devices} devices", "2 devices", deviceCount);                       
            
            Step("7. Use API to import the csv file, then refresh and go to the testing geozonee");
            ImportFile(csvFilePath);
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("8. Verify The marker displays the new number of devices sharing the same location");
            Wait.ForGLMapZoomTo(ZoomGLLevel.m50);
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("8. Verify The marker displays the new number of devices sharing the same location", "3", cluster.DeviceCount);

            Step("9. Mouse over the marker");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);

            Step("10. Verify The row '{# of devices} devices' is updated with the new number");
            deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("10. Verify The row '{# of devices} devices' is updated with the new number", "3 devices", deviceCount);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_50 SC-782 Update existing streetlights from the group sharing the same location")]
        public void EI_50()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI50");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight1 = SLVHelper.GenerateUniqueName("STL01");
            var streetlight2 = SLVHelper.GenerateUniqueName("STL02");
            var streetlight3 = SLVHelper.GenerateUniqueName("STL03");
            var fullGeozonePath = Settings.RootGeozoneName + @"/" + geozone;
            var typeOfEquipment = "ABEL-Vigilon A[Dimmable ballast]";
            var longitude1 = "92.70369";
            var latitude1 = "11.64268";
            var csvFilePath1 = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI50-01.csv");
            var csvFilePath2 = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI50-02.csv");

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a testing geozone containing streetlights sharing the same location");
            Step(" - Prepare 2 csv files for the case: Update an existing streetlight from csv file");
            Step("  + Case 1: csv file to update location of an existing streetlight the same with a streetlight group");
            Step("  + Case 2: csv file to update a streetlight in a group to another location");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI50*");
            CreateNewGeozone(geozone, latMin: "11.64001", latMax: "11.64534", lngMin: "92.69819", lngMax: "92.70920");
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.Streetlight, streetlight1, controller, geozone, typeOfEquipment, latitude1, longitude1);
            CreateNewDevice(DeviceType.Streetlight, streetlight2, controller, geozone, typeOfEquipment, latitude1, longitude1);
            CreateCsv(DeviceType.Streetlight, csvFilePath1, fullGeozonePath, controller, streetlight3, typeOfEquipment, latitude1, longitude1);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select the testing geozone and add a new streetlight then position the new streetlight at the different location of the existing streetlights group");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.CreateDevice(DeviceType.Streetlight, streetlight3, controller, streetlight3, typeOfEquipment);
            var longitude3 = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();
            var latitude3 = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
            CreateCsv(DeviceType.Streetlight, csvFilePath2, fullGeozonePath, controller, streetlight3, typeOfEquipment, latitude3, longitude3);

            Step("4. Verify The new streetlight is added with");
            Step(" - The indicator on the map");
            Step(" - The testing streetlight is highlighted on geozone tree");
            Step(" - The streetlight information panel is in the left screen with the name of testing streetlight");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude3, latitude3);
            var deviceNameInMap = equipmentInventoryPage.Map.GetDeviceNameGL();
            VerifyEqual("4. Verify The indicator on the map", streetlight3, deviceNameInMap);
            VerifyEqual("4. Verify The testing streetlight is highlighted on geozone tree", streetlight3, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());
            VerifyEqual("4. Verify The streetlight information panel is in the left screen with the name of testing streetlight", streetlight3, equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName());
            
            Step("5. Using API to import the csv file case 1, then refresh the page and go to the testing geozone");
            ImportFile(csvFilePath1);
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            
            Step("6. Verify");
            Step(" - The indicator of streetlight is disappeared. There is only the marker on the map");
            Step(" - The number of devices sharing the same location on the marker increases one");
            Wait.ForGLMapZoomTo(ZoomGLLevel.m50);
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude1, latitude1);
            deviceNameInMap = equipmentInventoryPage.Map.GetDeviceNameGL();
            var cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude1, latitude1);                
            VerifyEqual("6. Verify The indicator of streetlight is disappeared. There is only the marker on the map", "Device Cluster", deviceNameInMap);
            VerifyEqual("6. Verify The number of devices sharing the same location on the marker increases one", "3", cluster.DeviceCount);

            Step("7. Mouse over the marker");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude1, latitude1);

            Step("8. Verify The row '{# of devices} devices' is updated with the new number");
            var deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("8. Verify The row '{# of devices} devices' is updated with the new number", "3 devices", deviceCount);

            Step("9. Click on the newly added streetlight on the geozone tree");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight3);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("10. Verify The information panel displays on the left screen with name of the newly added streetlight");
            VerifyEqual("12. Verify The information panel displays on the left screen with name of the newly added streetlight", streetlight3, equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName());
           
            Step("11. Using API to import the csv file case 2, then refresh the page and go to the testing geozone");
            ImportFile(csvFilePath2);
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);            

            Step("12. Verify");
            Step(" - The indicator of streetlight appears with the marker on the map");
            Step(" - The number of devices sharing the same location on the marker decreases one");
            Wait.ForGLMapZoomTo(ZoomGLLevel.m50);
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude1, latitude1);
            deviceNameInMap = equipmentInventoryPage.Map.GetDeviceNameGL();
            cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude1, latitude1);
            VerifyEqual("12. Verify The indicator of streetlight is disappeared. There is only the marker on the map", "Device Cluster", deviceNameInMap);
            VerifyEqual("12. Verify The number of devices sharing the same location on the marker decreases one", "2", cluster.DeviceCount);

            Step("13. Mouse over the marker");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude1, latitude1);

            Step("14. Verify The row '{# of devices} devices' is updated with the new number");
            deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("14. Verify The row '{# of devices} devices' is updated with the new number", "2 devices", deviceCount);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_51 SC-782 The marker should display '9+' when there are ten devices or more")]
        public void EI_51()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI51");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlightPrefix = string.Format("STL{0}", DateTime.Now.Timestamp());
            var streetlight10th = streetlightPrefix + "10";
            var streetlight11th = streetlightPrefix + "11";
            var csvFilePath1 = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI51-01.csv");
            var csvFilePath2 = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI51-02.csv");
            var csvFilePath3 = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI51-03.csv");
            var fullGeozonePath = string.Format("{0}/{1}", Settings.RootGeozoneName, geozone);
            var typeOfEquipment = "ABEL-Vigilon A[Dimmable ballast]";
            var longitude = "92.89853";
            var latitude = "12.89924";
            var updatedLongitude = "92.90014";
            var updatedLatitude = "12.89994";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Prepare 1 csv file to import 9 streetlights sharing the same location");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI51*");
            CreateNewGeozone(geozone, latMin: "12.89710", latMax: "12.90138", lngMin: "92.89397", lngMax: "92.90308");
            CreateNewController(controller, geozone);
            CreateCsvDevicesSameLocation(9, DeviceType.Streetlight, csvFilePath1, fullGeozonePath, controller, streetlightPrefix, typeOfEquipment, latitude, longitude);
            ImportFile(csvFilePath1);
            CreateCsv(DeviceType.Streetlight, csvFilePath2, fullGeozonePath, controller, streetlight10th, typeOfEquipment, latitude, longitude);
            CreateCsv(DeviceType.Streetlight, csvFilePath3, fullGeozonePath, controller, streetlight10th, typeOfEquipment, updatedLatitude, updatedLongitude);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory App and select the testing geozone");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("2. Verify The marker displays with number of importing devices");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            var cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("2. Verify The marker displays with number of importing devices (9)", "9", cluster.DeviceCount);
            
            Step("3. Using API to import another device from csv to make the number of devices > 9, then refresh the page and go to the testing geozone");
            ImportFile(csvFilePath2);
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("4. Verify The number on the marker is updated to '9+'");
            Wait.ForGLMapZoomTo(ZoomGLLevel.m50);
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("4. Verify The number on the marker is updated to '9+'", "9plus", cluster.DeviceCount);

            Step("5. Mouse over the marker");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);

            Step("6. Verify The tooltip displays the real number: '10 devices'");
            var deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("6. Verify The tooltip displays the real number: '10 devices'", "10 devices", deviceCount);

            Step("7. Using API to import another device from csv to update the newly added streetlight to another location, then refresh the page and go to the testing geozone");
            ImportFile(csvFilePath3);
            desktopPage = Browser.RefreshLoggedInCMS();
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("8. Verify There is a new indicator for updated streetlight and 1 marker on the map. The number on the marker is updated to '9'");
            Wait.ForGLMapZoomTo(ZoomGLLevel.m50);
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            var deviceNameInMap = equipmentInventoryPage.Map.GetDeviceNameGL();
            VerifyEqual("8. Verify 1 marker on the map", "Device Cluster", deviceNameInMap);
            VerifyEqual("8. Verify The indicator of streetlight is disappeared. There is only the marker on the map", "Device Cluster", deviceNameInMap);
            VerifyEqual("8. The number on the marker is updated to '9'", "9", cluster.DeviceCount);

            Step("9. Hover the mouse on the new indicator");            
            Step("10. Verify The tooltip displays with");
            Step(" - Streetlight name");
            Step(" - 'Device ID: {id}'");
            equipmentInventoryPage.Map.MoveToDeviceGL(updatedLongitude, updatedLatitude);
            deviceNameInMap = equipmentInventoryPage.Map.GetDeviceNameGL();
            var deviceIdInMap = equipmentInventoryPage.Map.GetTooltipDeviceId();
            VerifyEqual("10. Verify The tooltip displays with: Streetlight name", streetlight10th, deviceNameInMap);
            VerifyEqual("10. Verify The tooltip displays with: 'Device ID: {id}'", string.Format("Device ID: {0}", streetlight10th), deviceIdInMap);

            Step("11. Hover the mouse on the marker");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);

            Step("12. Verify The tooltip displays the real number: '9 devices'");
            deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("12. Verify The tooltip displays the real number: '9 devices'", "9 devices", deviceCount);

            Step("13. Add a new streetlight from UI and drop the streetlight to the marker");
            equipmentInventoryPage.CreateDevice(DeviceType.Streetlight, streetlight11th, controller, streetlight11th, typeOfEquipment, "", true);

            Step("14. Verify The number on the marker is updated to '9+'");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("14. Verify The number on the marker is updated to '9+'", "9plus", cluster.DeviceCount);

            Step("15. Mouse over the marker");
            Step("16. Verify The tooltip displays the real number: '10 devices'");
            VerifyEqual("16. Verify The tooltip displays the real number: '10 devices'", "10 devices", deviceCount);

            Step("17. Press Delete to delete the newly added streetlight from the information panel on the left screen");
            equipmentInventoryPage.DeleteCurrentDevice();
            equipmentInventoryPage.AppBar.ClickHeaderBartop();

            Step("18. Verify The number on the marker is updated to '9'");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("[New bug#id needed] 18. Verify The number on the marker is updated to '9'", "9", cluster.DeviceCount);

            Step("19. Mouse over the marker");
            Step("19. Verify The tooltip displays the real number: '9 devices'");
            VerifyEqual("[New bug#id needed] 19. Verify The tooltip displays the real number: '9 devices'", "9 devices", deviceCount);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_52 SC-782 the marker should be updated when using category filters in the geozone tree")]        
        public void EI_52()
        {
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI52.csv");
            var geozone = SLVHelper.GenerateUniqueName("GZNEI52");
            var controller = SLVHelper.GenerateUniqueName("CTRL");         
            var fullGeozonePath = string.Format("{0}/{1}", Settings.RootGeozoneName, geozone);
            var longitude = "92.59822";
            var latitude = "11.81554";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Prepare 1 csv files to import 14 devices sharing the same location with 4 streetlights and 10 switches");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI52*");
            CreateNewGeozone(geozone, latMin: "11.81411", latMax: "11.81709", lngMin: "92.59485", lngMax: "92.60120");
            CreateNewController(controller, geozone);
            var importedStreetlights = CreateCsvDevicesSameLocation(4, DeviceType.Streetlight, csvFilePath, fullGeozonePath, controller, string.Format("STL{0}", DateTime.Now.Timestamp()), "ABEL-Vigilon A[Dimmable ballast]", latitude, longitude);
            var importedSwitches = CreateCsvDevicesSameLocation(10, DeviceType.Switch, csvFilePath, fullGeozonePath, controller, string.Format("SWH{0}", DateTime.Now.Timestamp()), "ABEL-Vigilon A[Switch]", latitude, longitude, true);
            ImportFile(csvFilePath);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory App and select the testing geozone");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);            

            Step("2. Verify The marker displays with number: '9+'");            
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);            
            var cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("2. Verify The marker displays with number: '9+'", "9plus", cluster.DeviceCount);

            Step("3. Press 'Advanced search' button on the geozone tree");
            equipmentInventoryPage.GeozoneTreeMainPanel.ClickExpandSearchButton();            

            Step("4. Select Attribute: Category and select 'StreetLight' for the Search field and press Search button");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectAttributeDropDown("Category");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectSearchFieldDropDown("StreetLight");
            equipmentInventoryPage.GeozoneTreeMainPanel.ClickSearchButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("5. Verify After the search done, the search result displays");
            Step(" - The streetlight of testing geozone displays on the search list");
            Step(" - The marker's number is updated: '4'");
            var searchResultList = equipmentInventoryPage.GeozoneTreeMainPanel.SearchResultsGeozonePanel.GetListOfSearchResult("Equipment");
            VerifyEqual("5. Verify The streetlight of testing geozone displays on the search list", true, searchResultList.CheckIfIncluded(importedStreetlights));
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("[New bug#id needed] 5. Verify The marker's number is updated: '4'", "4", cluster.DeviceCount);

            Step("6. Hover the marker");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);    

            Step("7. Verify The tooltip displays the number: 4 devices");
            var deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("[New bug#id needed] 7. Verify The tooltip displays the number: 4 devices", "4 devices", deviceCount);

            Step("8. Repeat the advanced search with 'Switch Device'");
            equipmentInventoryPage.AppBar.ClickHeaderBartop();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectSearchFieldDropDown("Switch Device");
            equipmentInventoryPage.GeozoneTreeMainPanel.ClickSearchButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("9. Verify After the search done, the search result displays");
            Step(" - The switches of testing geozone displays on the search list");
            Step(" - The marker's number is updated: '9+'");
            searchResultList = equipmentInventoryPage.GeozoneTreeMainPanel.SearchResultsGeozonePanel.GetListOfSearchResult("Equipment");
            VerifyEqual("9. Verify The streetlight of testing geozone displays on the search list", true, searchResultList.CheckIfIncluded(importedSwitches));
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("[New bug#id needed] 9. Verify The marker's number is updated: '9+'", "9plus", cluster.DeviceCount);

            Step("10. Hover the marker");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);

            Step("11. Verify The tooltip displays the number: 10 devices");
            deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("[New bug#id needed] 11. Verify The tooltip displays the number: 10 devices", "10 devices", deviceCount);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_55 SC-782 Device listing table UI and behaviors")]
        public void EI_55()
        {
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI55.csv");
            var geozone = SLVHelper.GenerateUniqueName("GZNEI55");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var fullGeozonePath = string.Format("{0}/{1}", Settings.RootGeozoneName, geozone);
            var longitude = "92.88515";
            var latitude = "13.19767";
            var importedDevices = new List<string>();

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Prepare 1 csv files to import 2 streetlights and 2 switches sharing the same location in a geozone");
            Step("**** Precondition ****\n");
            
            Step("-> Create data for testing");
            DeleteGeozones("GZNEI55*");
            CreateNewGeozone(geozone, latMin: "13.19429", latMax: "13.20184", lngMin: "92.87739", lngMax: "92.89360");
            CreateNewController(controller, geozone);
            var importedStreetlights = CreateCsvDevicesSameLocation(2, DeviceType.Streetlight, csvFilePath, fullGeozonePath, controller, string.Format("STL{0}", DateTime.Now.Timestamp()), "ABEL-Vigilon A[Dimmable ballast]", latitude, longitude);
            importedDevices.AddRange(importedStreetlights);
            var importedSwitches = CreateCsvDevicesSameLocation(2, DeviceType.Switch, csvFilePath, fullGeozonePath, controller, string.Format("SWH{0}", DateTime.Now.Timestamp()), "ABEL-Vigilon A[Switch]", latitude, longitude, true);
            importedDevices.AddRange(importedSwitches);
            ImportFile(csvFilePath);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory App and select the testing geozone");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("2. Verify The marker displays with number of importing devices");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            var cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("2. Verify The marker displays with number of importing devices", "4", cluster.DeviceCount);

            Step("3. Click on the marker");
            equipmentInventoryPage.Map.SelectDeviceGL(longitude, latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();

            Step("4. Verify A table listing all devices displays with");
            Step(" o Title: 'Cluster with {#} devices'");
            Step(" o Close (x) button");
            Step(" o 'Show/Hide columns' button");
            Step(" o A grid containing 4 rows of devices");
            VerifyEqual("4. Verify Title: 'Cluster with {#} devices", "Cluster with 4 devices", equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetPanelTitleText());
            VerifyEqual("4. Verify Close (x) button displayed", true, equipmentInventoryPage.Map.DeviceClusterPopupPanel.IsCloseButtonDisplayed());
            VerifyEqual("4. Verify 'Show/Hide columns' button displayed", true, equipmentInventoryPage.Map.DeviceClusterPopupPanel.IsShowHideColumnsButtonDisplayed());
            VerifyEqual("4. Verify A grid containing 4 rows of devices", 4, equipmentInventoryPage.Map.DeviceClusterPopupPanel.BuildDataTable().Rows.Count);

            Step("5. Click on 'Show/Hide columns' button");
            Step("6. Verify The pop-up displays with the list of device's properties:");
            Step(" o Type");
            Step(" o Name");
            Step(" o Identifier");
            Step(" o Unique Address");
            Step(" o Wattage");
            Step(" o Address1");
            Step(" o Address2");
            Step(" o Luminaire Type");
            var expectedAllDevicePropertiesList = new List<string>() {"Type", "Name", "Identifier", "Unique Address", "Wattage", "Address1", "Address2", "Luminaire Type" };
            var actualAllDevicePropertiesList = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetAllColumnsInShowHideColumnsMenu();
            VerifyEqual("6. Verify The pop-up displays with the list of device's properties as expected", expectedAllDevicePropertiesList, actualAllDevicePropertiesList);

            Step("7. Check on the checkboxes to select all properties");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.CheckAllColumnsInShowHideColumnsMenu();

            Step("8. Verify All checkboxes are checked");
            var actualCheckedDevicePropertiesList = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetAllCheckedColumnsInShowHideColumnsMenu();
            VerifyEqual("8. Verify All checkboxes are checked", expectedAllDevicePropertiesList, actualCheckedDevicePropertiesList);

            Step("9. Click 'Show/Hide columns' again");
            Step("10. Scroll the horizontal scrollbar");
            Step("11. Verify Selected properties are added as columns in the grid with the Checkbox column at the 1st position");
            var listOfColumnsHeader = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnsHeader();
            VerifyEqual("11. Verify Selected properties are added as columns in the grid with the Checkbox column at the 1st position", expectedAllDevicePropertiesList, listOfColumnsHeader);

            Step("12. Click 'Show/Hide columns' and check 'Type', 'Name', 'Identifier' then click on the button again");
            var checkedColumns = new List<string>() { "Type", "Name", "Identifier" };
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.UncheckAllColumnsInShowHideColumnsMenu();            
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.CheckColumnsInShowHideColumnsMenu(checkedColumns.ToArray());
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.HideShowHideColumnsMenu();

           Step("13. Verify the grid now contains 3 selected columns");
            Step(" o Type: displays streetlight icon for streetlight and switch icon for switches");
            Step(" o Name: displays the correct name of devices");
            Step(" o Identifier: displays the correct identifier");
            listOfColumnsHeader = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnsHeader();
            var tbGrid = equipmentInventoryPage.Map.DeviceClusterPopupPanel.BuildDataTable();
            var listOfIconType = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfIconType();
            var listOfDeviceName = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            var listOfIdentifier = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Identifier");
            VerifyEqual("13. Verify the grid now contains 3 selected columns", checkedColumns, listOfColumnsHeader);
            VerifyEqual("13. Verify Type: displays streetlight icon for streetlight and switch icon for switches", true, listOfIconType.Exists(p => p.Contains("streetlight.png") || p.Contains("switch.png")));
            VerifyEqual("13. Verify Name: displays the correct name of devices", importedDevices, listOfDeviceName, false);
            VerifyEqual("13. Verify Identifier: displays the correct name of identifier", importedDevices, listOfIdentifier, false);

            Step("14. Click and hold the title of the table and drag it to another position");
            var currentDeviceClusterPopupPanelLocation = equipmentInventoryPage.Map.GetDeviceClusterPopupPanelLocation();
            equipmentInventoryPage.Map.DragAndDropDeviceClusterPopupPanel(-200, 150);

            Step("15. Verify The table is drawn to another position");
            var updatedDeviceClusterPopupPanelLocation = equipmentInventoryPage.Map.GetDeviceClusterPopupPanelLocation();
            VerifyTrue("15. Verify The table is drawn to another position", currentDeviceClusterPopupPanelLocation != updatedDeviceClusterPopupPanelLocation, updatedDeviceClusterPopupPanelLocation, currentDeviceClusterPopupPanelLocation);

            Step("16. Check the checkbox on header column next to 'Type'");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickAllRowsCheckbox(true);
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("17. Verify All devices are selected on the grid");
            Step(" o All checkboxes are checked");
            Step(" o The background of selected devices turn to GREEN");
            VerifyEqual("17. Verify All checkboxes are checked", true, equipmentInventoryPage.Map.DeviceClusterPopupPanel.AreCheckBoxGridChecked());
            
            Step("18. Verify A panel displays on the right hand with");
            Step(" o Title: 'Selected equipments'");
            Step(" o The list of selected devices' names");
            Step(" o 3 tabs: Identity, Inventory, Electricity network");            
            VerifyEqual("18. Verify A panel displays on the right hand", true, equipmentInventoryPage.IsMultipleDevicesEditorPanelDisplayed());
            VerifyEqual("18. Verify Title: 'Selected equipments", "Selected equipments", equipmentInventoryPage.MultipleDevicesEditorPanel.GetPanelTitleText());
            VerifyEqual("18. Verify The list of selected devices' names", importedDevices, equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfDevicesName());
            VerifyEqual("18. Verify Title: 'Selected equipments", new List<string> { "Identity", "Inventory", "Electricity network" }, equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfTabsName());

            Step("19. Deselect randomly a device in the table");
            var rdnDevice = importedDevices.PickRandom();
            var updatedDevicesList = new List<string>(importedDevices);
            updatedDevicesList.Remove(rdnDevice);
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickGridColumn(rdnDevice, false);
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("20. Verify The right panel is refreshed the list of selected devices' names");
            VerifyEqual("20. Verify The right panel is refreshed the list of selected devices' names", updatedDevicesList, equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfDevicesName());

            Step("21. Continue to deselect until there is only 1 device selected in the table");
            rdnDevice = updatedDevicesList.PickRandom();
            updatedDevicesList.Remove(rdnDevice);
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickGridColumn(rdnDevice, false);
            equipmentInventoryPage.WaitForPreviousActionComplete();
            rdnDevice = updatedDevicesList.PickRandom();
            updatedDevicesList.Remove(rdnDevice);
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickGridColumn(rdnDevice, false);
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("22. Verify The right panel is updated with");
            Step(" o Title: depend on the remained device. It is either 'SWITCH DEVICE' or 'STREETLIGHT'");
            Step(" o The information of remained device: Name, Geozone, Latitude, Longitude");
            var title = equipmentInventoryPage.DeviceEditorPanel.GetDeviceCaptionText();
            VerifyEqual("22. Verify Title:depend on the remained device. It is either 'SWITCH DEVICE' or 'STREETLIGHT'", true, title.Equals("SWITCH DEVICE") || title.Equals("STREETLIGHT"));
            VerifyEqual("22. Verify The information of remained device: Name", true, equipmentInventoryPage.DeviceEditorPanel.IsNameInputDisplayed());
            VerifyEqual("22. Verify The information of remained device: Geozone", true, equipmentInventoryPage.DeviceEditorPanel.IsParentGeozoneInputReadOnly());
            VerifyEqual("22. Verify The information of remained device: Latitude", true, equipmentInventoryPage.DeviceEditorPanel.IsLatitudeInputDisplayed());
            VerifyEqual("22. Verify The information of remained device: Longitude", true, equipmentInventoryPage.DeviceEditorPanel.IsLongitudeInputDisplayed());

            Step("23. Click on the marker while the panel is opened");
            equipmentInventoryPage.Map.SelectDeviceGL(longitude, latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();

            Step("24. Verify The right panel is closed");
            VerifyEqual("24. Verify The right panel is closed", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());
            VerifyEqual("24. Verify The right panel is closed", false, equipmentInventoryPage.IsMultipleDevicesEditorPanelDisplayed());

            Step("25. Press 'X' button");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickCloseButton();

            Step("26. Verify the table is closed");
            VerifyEqual("26. Verify the table is closed", false, equipmentInventoryPage.Map.IsDeviceClusterPopupPanelDisplayed());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_56 SC-782 Update information of devices belonging to the same type of device and sharing the same location - Streetlights")]
        public void EI_56()
        {
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI56.csv");
            var geozone = SLVHelper.GenerateUniqueName("GZNEI56");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var fullGeozonePath = string.Format("{0}/{1}", Settings.RootGeozoneName, geozone);
            var longitude = "92.97214";
            var latitude = "12.13604";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Prepare 1 csv files to import 2 streetlights sharing the same location in a geozone");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI56*");
            CreateNewGeozone(geozone, latMin: "12.13120", latMax: "12.14025", lngMin: "92.96389", lngMax: "92.98324");
            CreateNewController(controller, geozone);
            var importedStreetlights = CreateCsvDevicesSameLocation(2, DeviceType.Streetlight, csvFilePath, fullGeozonePath, controller, string.Format("STL{0}", DateTime.Now.Timestamp()), "ABEL-Vigilon A[Dimmable ballast]", latitude, longitude);            
            ImportFile(csvFilePath);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory App and select the testing geozone");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            
            Step("2. Click on the marker");
            equipmentInventoryPage.Map.SelectDeviceGL(longitude, latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            
            Step("3. Click on 'Show/Hide columns' button and check on the checkboxes to select all properties, then click the button again to close it");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.CheckAllColumnsInShowHideColumnsMenu();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.HideShowHideColumnsMenu();
            
            Step("4. Check 2 streetlighs in the grid");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickAllRowsCheckbox(true);
            equipmentInventoryPage.WaitForPreviousActionComplete();
         
            Step("5. Verify The information panel has 3 tabs");
            Step(" o Tab 'Identity':");
            Step("  - 'Identity of the light point' area has");
            Step("   + 'Controller ID *' combobox");
            Step("  - 'Control System' area has");
            Step("   + 'Type of equipment *' combobox");
            Step("   + 'Dimming group' commbobox");
            Step("   + 'Install status' combobox");
            Step("   + 'Device HW version' textbox");
            Step("   + 'Device SW version' textbox");
            equipmentInventoryPage.MultipleDevicesEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.MultipleDevicesEditorPanel.ExpandGroupsActiveTab();
            var actualGroupsName = equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfGroupsNameActiveTab();
            VerifyEqual("5. Verify Tab 'Identity' has 'Identity of the light point', 'Control System'", new List<string> { "Identity of the light point", "Control System" }, actualGroupsName);
            VerifyEqual("5. Verify 'Controller ID *' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsControllerIdDropDownDisplayed());
            VerifyEqual("5. Verify 'Type of equipment *' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsTypeEquipmentDropDownDisplayed());
            VerifyEqual("5. Verify 'Dimming group' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsDimmingGroupDropDownDisplayed());
            VerifyEqual("5. Verify 'Install status' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsInstallStatusDropDownDisplayed());
            VerifyEqual("5. Verify 'Device HW version' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsDeviceHwVersionInputDisplayed());
            VerifyEqual("5. Verify 'Device SW version' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsDeviceSwVersionInputDisplayed());

            Step(" o Tab 'Inventory':");
            Step("  - 'Location' area has");
            Step("   + 'Premise' textbox");
            Step("   + 'Address 1' textbox");
            Step("   + 'Address 2' textbox");
            Step("   + 'City' textbox");
            Step("   + 'Zip code' textbox");
            Step("   + 'Map number' textbox");
            Step("   + 'Location Type' combobox");
            Step("  - 'Customer' area has");
            Step("   + 'Account number' textbox");
            Step("   + 'Customer number' textbox");
            Step("   + 'Customer name' textbox");
            Step("  - 'Lamp' area has");
            Step("   + 'Lamp Type' combobox");
            Step("   + 'Lamp wattage (W)' combobox");
            Step("   + 'Fixed saved power' combobox");
            Step("   + 'Lamp install date' textbox");
            Step("  - 'Driver or ballast' area has");
            Step("   + 'Ballast type' textbox");
            Step("   + 'Dimming interface' combobox");
            Step("   + 'Ballast brand' textbox");
            Step("   + 'Pole or head install' textbox");
            Step("  - 'Luminaire' area has");
            Step("   + 'Luminaire brand' textbox");
            Step("   + 'Luminaire type' combobox");
            Step("   + 'Luminaire model' textbox");
            Step("   + 'Light distribution' textbox");
            Step("   + 'Orientation' combobox");
            Step("   + 'Color code' textbox");
            Step("   + 'Status' textbox");
            Step("   + 'Luminaire install date' textbox");
            Step("  - 'Bracket' area has");
            Step("   + 'Bracket brand' textbox");
            Step("   + 'Bracket model' textbox");
            Step("   + 'Bracket type' textbox");
            Step("   + 'Bracket color' textbox");
            Step("  - 'Pole or support' area has");
            Step("   + 'Pole type' textbox");
            Step("   + 'Pole height' textbox");
            Step("   + 'Pole shape' textbox");
            Step("   + 'Pole material' textbox");
            Step("   + 'Pole color code' textbox");
            Step("   + 'Pole status' textbox");
            Step("   + 'Type of ground fixing' textbox");
            Step("   + 'Pole install date' textbox");
            Step("  - 'Comment' area has");
            Step("   + 'Comment' textbox");
            equipmentInventoryPage.MultipleDevicesEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.MultipleDevicesEditorPanel.ExpandGroupsActiveTab();
            actualGroupsName = equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfGroupsNameActiveTab();
            VerifyEqual("5. Verify Tab 'Inventory' has 'Location', 'Customer', 'Lamp', 'Driver or ballast', 'Luminaire', 'Bracket', 'Pole or support', 'Comment'", new List<string> { "Location", "Customer", "Lamp", "Driver or ballast", "Luminaire", "Bracket", "Pole or support", "Comment" }, actualGroupsName);
            VerifyEqual("5. Verify 'Premise' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPremiseInputDisplayed());
            VerifyEqual("5. Verify 'Address 1' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsAddress1InputDisplayed());
            VerifyEqual("5. Verify 'Address 2' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsAddress2InputDisplayed());
            VerifyEqual("5. Verify 'City' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsCityInputDisplayed());
            VerifyEqual("5. Verify 'Zip code' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsZipCodeInputDisplayed());
            VerifyEqual("5. Verify 'Map number' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsMapNumberInputDisplayed());
            VerifyEqual("5. Verify 'Location Typer' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLocationTypeDropDownDisplayed());
            VerifyEqual("5. Verify 'Account number' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsAccountNumberInputDisplayed());
            VerifyEqual("5. Verify 'Customer number' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsCustomerNumberInputDisplayed());
            VerifyEqual("5. Verify 'Customer name' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsCustomerNameInputDisplayed());
            VerifyEqual("5. Verify 'Lamp Type' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLampTypeDropDownDisplayed());
            VerifyEqual("5. Verify 'Lamp wattage (W)' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLampWattageNumericInputDisplayed());
            VerifyEqual("5. Verify 'Fixed saved power' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsFixedSavedPowerNumericInputDisplayed());
            VerifyEqual("5. Verify 'Lamp install date' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLampInstallDateInputDisplayed());
            VerifyEqual("5. Verify 'Ballast type' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsBallastTypeInputDisplayed());
            VerifyEqual("5. Verify 'Dimming interface' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsDimmingInterfaceDropDownDisplayed());
            VerifyEqual("5. Verify 'Ballast brand' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsBallastBrandInputDisplayed());
            VerifyEqual("5. Verify 'Pole or head install' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleHeadInstallInputDisplayed());
            VerifyEqual("5. Verify 'Luminaire brand' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLuminaireBrandInputDisplayed());
            VerifyEqual("5. Verify 'Luminaire type' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLuminaireTypeDropDownDisplayed());
            VerifyEqual("5. Verify 'Luminaire model' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLuminaireModelInputDisplayed());
            VerifyEqual("5. Verify 'Light distribution' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLightDistributionInputDisplayed());
            VerifyEqual("5. Verify 'Orientation' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsOrientationDropDownDisplayed());
            VerifyEqual("5. Verify 'Color code' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsColorCodeInputDisplayed());
            VerifyEqual("5. Verify 'Status' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsStatusInputDisplayed());
            VerifyEqual("5. Verify 'Bracket brand' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsBracketBrandInputDisplayed());
            VerifyEqual("5. Verify 'Bracket model' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsBracketModelInputDisplayed());
            VerifyEqual("5. Verify 'Bracket type' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsBracketTypeInputDisplayed());
            VerifyEqual("5. Verify 'Bracket color' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsBracketColorInputDisplayed());
            VerifyEqual("5. Verify 'Pole type' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleTypeInputDisplayed());
            VerifyEqual("5. Verify 'Pole height' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleHeightInputDisplayed());
            VerifyEqual("5. Verify 'Pole shape' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleShapeInputDisplayed());
            VerifyEqual("5. Verify 'Pole material' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleMaterialInputDisplayed());
            VerifyEqual("5. Verify 'Pole color code' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleColorCodeInputDisplayed());            
            VerifyEqual("5. Verify 'Pole status' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleStatusInputDisplayed());
            VerifyEqual("5. Verify 'Type of ground fixing' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsTypeGroundFixingInputDisplayed());
            VerifyEqual("5. Verify 'Pole install date' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleInstallDateInputDisplayed());
            VerifyEqual("5. Verify 'Comment' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsCommentInputDisplayed());

            Step(" o Tab 'Electricity network':");
            Step("  - 'Network' area has");
            Step("   + 'Energy supplier' combobox");
            Step("   + 'Network type' textbox");
            Step("   + 'Segment' combobox");
            Step("   + 'Section' textbox");
            Step("   + 'High voltage threshold' combobox");
            Step("   + 'Low voltage threshold' combobox");
            equipmentInventoryPage.MultipleDevicesEditorPanel.SelectTab("Electricity network");
            equipmentInventoryPage.MultipleDevicesEditorPanel.ExpandGroupsActiveTab();
            actualGroupsName = equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfGroupsNameActiveTab();
            VerifyEqual("5. Verify Tab 'Electricity network' has 'Network'", new List<string> { "Network" }, actualGroupsName);
            VerifyEqual("5. Verify 'Energy supplier' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsEnergySupplierDropDownDisplayed());
            VerifyEqual("5. Verify 'Network type' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsNetworkTypeInputDisplayed());
            VerifyEqual("5. Verify 'Segment' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsSegmentNumericInputDisplayed());
            VerifyEqual("5. Verify 'Section' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsSectionInputDisplayed());
            VerifyEqual("5. Verify 'High voltage threshold' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsHighVoltageThresholdNumericInputDisplayed());
            VerifyEqual("5. Verify 'Low voltage threshold' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLowVoltageThresholdNumericInputDisplayed());

            Step("6. Hover the streetlight listed in the information panel and click on 'X' button to deselect it");
            var rndStreetlight = importedStreetlights.PickRandom();
            equipmentInventoryPage.MultipleDevicesEditorPanel.ClickCancelDevice(rndStreetlight);

            Step("7. Verify The deselected streetlight is removed out of the list in the panel.");
            var deviceList = equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfDevicesName();
            VerifyEqual("7. Verify The deselected streetlight is removed out of the list in the panel", false, deviceList.Contains(rndStreetlight));

            Step("8. Close the panel and the gid then press the marker and select 2 streetlights again and update value for Wattage, Address 1, Address 2, Luminaire Type, then press Save button on the information panel");
            equipmentInventoryPage.MultipleDevicesEditorPanel.ClickBackButton();
            equipmentInventoryPage.WaitForMultipleDevicesEditorDisappeared();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickCloseButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();
            equipmentInventoryPage.Map.SelectDeviceGL(longitude, latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickAllRowsCheckbox(true);
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.MultipleDevicesEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.MultipleDevicesEditorPanel.ExpandGroupsActiveTab();
            var updatedWattage = SLVHelper.GenerateStringInteger(1, 9999);
            equipmentInventoryPage.MultipleDevicesEditorPanel.EnterLampWattageNumericInput(updatedWattage);
            var updatedAddress1 = SLVHelper.GenerateString(12);
            equipmentInventoryPage.MultipleDevicesEditorPanel.EnterAddress1Input(updatedAddress1);
            var updatedAddress2 = SLVHelper.GenerateString(12);
            equipmentInventoryPage.MultipleDevicesEditorPanel.EnterAddress2Input(updatedAddress2);
            var updatedLuminaireType = equipmentInventoryPage.MultipleDevicesEditorPanel.SelectRandomLampTypeDropDown();
            equipmentInventoryPage.MultipleDevicesEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForMultipleDevicesEditorDisappeared();

            Step("9. Verify The infomation is closed and the table is refreshed");
            VerifyEqual("9. Verify The infomation is closed and the table is refreshed", false, equipmentInventoryPage.IsMultipleDevicesEditorPanelDisplayed());

            Step("10. Scroll the horizontal scrollbar to see the value of Wattage, Address 1, Address 2, Luminaire Type is updated correctly");
            var listOfWattage = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Wattage");
            var listOfAddress1 = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Address1");
            var listOfAddress2 = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Address2");
            var listOfLuminaireType = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Luminaire Type");
            VerifyEqual("[New bug#id needed] 10. Verify Wattage is updated correctly", true, listOfWattage.All(p => p.Equals(updatedWattage)));
            VerifyEqual("[New bug#id needed] 10. Verify Address 1 is updated correctly", true, listOfAddress1.All(p => p.Equals(updatedAddress1)));
            VerifyEqual("[New bug#id needed] 10. Verify Address 2 is updated correctly", true, listOfAddress2.All(p => p.Equals(updatedAddress2)));
            VerifyEqual("[New bug#id needed] 10. Verify Luminaire Type is updated correctly", true, listOfLuminaireType.All(p => p.Equals(updatedLuminaireType)));

            Step("11. Select 2 streetlights again and update randomly values of some properties in 3 tabs, then press Save button");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickAllRowsCheckbox(false);
            equipmentInventoryPage.WaitForMultipleDevicesEditorDisappeared();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickAllRowsCheckbox(true);
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.MultipleDevicesEditorPanel.SelectTab("Identity");
            var updatedInstallStatus = equipmentInventoryPage.MultipleDevicesEditorPanel.SelectRandomInstallStatusDropDown();
            equipmentInventoryPage.MultipleDevicesEditorPanel.SelectTab("Inventory");
            var updatedAccountNumber = SLVHelper.GenerateString(5);
            equipmentInventoryPage.MultipleDevicesEditorPanel.EnterAccountNumberInput(updatedAccountNumber);
            equipmentInventoryPage.MultipleDevicesEditorPanel.SelectTab("Electricity network");
            var updatedSegment = SLVHelper.GenerateStringInteger(10, 999);
            equipmentInventoryPage.MultipleDevicesEditorPanel.EnterSegmentNumericInput(updatedSegment);
            equipmentInventoryPage.MultipleDevicesEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForMultipleDevicesEditorDisappeared();

            Step("12. Verify The infomation is closed and the table is refreshed");
            VerifyEqual("12. Verify The infomation is closed and the table is refreshed", false, equipmentInventoryPage.IsMultipleDevicesEditorPanelDisplayed());

            Step("13. Select randomly a streetlight and check the updated properties");
            rndStreetlight = importedStreetlights.PickRandom();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(rndStreetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("14. Verify The properties are updated correctly");
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identity");            
            VerifyEqual("14. Verify Install Status is updated correctly", updatedInstallStatus, equipmentInventoryPage.StreetlightEditorPanel.GetInstallStatusValue());
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");
            VerifyEqual("14. Verify Account Number is updated correctly", updatedAccountNumber, equipmentInventoryPage.StreetlightEditorPanel.GetAccountNumberValue());
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Electricity network");
            VerifyEqual("14. Verify Segment is updated correctly", updatedSegment, equipmentInventoryPage.StreetlightEditorPanel.GetSegmentValue());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_57 SC-782 Update information of devices belonging to the same type of device and sharing the same location - Switches")]
        public void EI_57()
        {
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI57.csv");
            var geozone = SLVHelper.GenerateUniqueName("GZNEI57");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var fullGeozonePath = string.Format("{0}/{1}", Settings.RootGeozoneName, geozone);
            var longitude = "92.61101";
            var latitude = "11.54777";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Prepare 1 csv files to import 3 switches sharing the same location in a geozone");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI57*");
            CreateNewGeozone(geozone, latMin: "11.54271", latMax: "11.55439", lngMin: "92.59962", lngMax: "92.62453");
            CreateNewController(controller, geozone);
            var importedSwitches = CreateCsvDevicesSameLocation(3, DeviceType.Switch, csvFilePath, fullGeozonePath, controller, string.Format("SWH{0}", DateTime.Now.Timestamp()), "ABEL-Vigilon A[Switch]", latitude, longitude);
            ImportFile(csvFilePath);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory App and select the testing geozone");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("2. Click on the marker");
            equipmentInventoryPage.Map.SelectDeviceGL(longitude, latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();

            Step("3. Click on 'Show/Hide columns' button and check on the checkboxes to select all properties, then click the button again to close it");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.CheckAllColumnsInShowHideColumnsMenu();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.HideShowHideColumnsMenu();

            Step("4. Check 2 switches in the grid");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickAllRowsCheckbox(true);
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("5. Verify 2 switches are listed in the information panel");      
            VerifyEqual("5. Verify 2 switches are listed in the information panel", importedSwitches, equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfDevicesName());

            Step("6. Hover the switch listed in the information panel and click on 'X' button to deselect it");
            var rndSwitch = importedSwitches.PickRandom();
            equipmentInventoryPage.MultipleDevicesEditorPanel.ClickCancelDevice(rndSwitch);

            Step("7. Verify The deselected switch is removed out of the list");
            var deviceList = equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfDevicesName();
            VerifyEqual("7. Verify The deselected switch is removed out of the list", false, deviceList.Contains(rndSwitch));

            Step("8. Click on the marker again and select 2 switches");           
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickCloseButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();
            equipmentInventoryPage.Map.SelectDeviceGL(longitude, latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickAllRowsCheckbox(true);
            equipmentInventoryPage.WaitForPreviousActionComplete();           

            Step("9. Hover the switch listed in the information panel and click on 'Trash Can' icon");
            rndSwitch = importedSwitches.PickRandom();
            equipmentInventoryPage.MultipleDevicesEditorPanel.ClickRemoveDevice(rndSwitch);
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("10. Verify a confirmation pop-up displays with");
            Step(" - Title: 'Confirmation'");
            Step(" - Description: 'Would you like to delete {Switch name} equipment ?'");
            var expectedMessage = string.Format("Would you like to delete {0} equipment ?", rndSwitch);
            VerifyEqual("10. Verify a confirmation pop-up displays with Title: 'Confirmation'", "Confirmation", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("10. Verify a confirmation pop-up displays with Description: 'Would you like to delete {Switch name} equipment ?'", expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());
            
            Step("11. Press 'No' button");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("12. Verify The pop-up disappeared");
            VerifyEqual("12. Verify The pop-up disappeared", true, !equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("13. Hover the switch listed in the information panel and click on 'Trash Can' icon again");
            equipmentInventoryPage.MultipleDevicesEditorPanel.ClickRemoveDevice(rndSwitch);
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("14. Press 'Yes' button");
            equipmentInventoryPage.Dialog.ClickYesButton();            
            equipmentInventoryPage.WaitForPopupDialogDisappeared();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("15. Verify a message displays on top of the screen 'The device has been removed successfully'");
            VerifyEqual("15. Verify a message displays on top of the screen 'The device has been removed successfully'", "The device has been removed successfully", equipmentInventoryPage.GetHeaderMessage());

            Step("16. Verify The device is removed ouf of the list of the information panel, the cluster table and the geozone tree.");
            deviceList = equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfDevicesName();
            VerifyEqual("16. Verify The device is removed ouf of the list of the information panel", true, !deviceList.Contains(rndSwitch));
            deviceList = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("[New bug#id needed] 16. Verify The device is removed ouf of the list of the cluster table", true, !deviceList.Contains(rndSwitch));
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            deviceList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.Switch);
            VerifyEqual("16. Verify The device is removed ouf of the list of the geozone tree", true, !deviceList.Contains(rndSwitch));

            Step("17. Verify The marker number is updated the exact number");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            var cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("[New bug#id needed] 17. Verify The marker number is updated the exact number", "2", cluster.DeviceCount);            
            var clusterName = equipmentInventoryPage.Map.GetDeviceNameGL();
            var deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("17. Verify A tooltip displays: Device Cluster", "Device Cluster", clusterName);
            VerifyEqual("[New bug#id needed] 17. Verify A tooltip displays: {2 devices", "2 devices", deviceCount);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_58 SC-782 Update information of devices belonging to the different types of device and sharing the same location")]
        public void EI_58()
        {
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI58.csv");
            var geozone = SLVHelper.GenerateUniqueName("GZNEI58");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var switchDevice = SLVHelper.GenerateUniqueName("SWH");
            var fullGeozonePath = string.Format("{0}/{1}", Settings.RootGeozoneName, geozone);
            var longitude = "93.04432";
            var latitude = "11.83135";
            var importedDevices = new List<string> { streetlight, switchDevice };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Prepare 1 csv files to import 1 switch and 1 streetlight sharing the same location in a geozone");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI58*");
            CreateNewGeozone(geozone, latMin: "11.82714", latMax: "11.83473", lngMin: "93.03573", lngMax: "93.05195");
            CreateNewController(controller, geozone);
            CreateCsv(DeviceType.Streetlight, csvFilePath, fullGeozonePath, controller, streetlight, "ABEL-Vigilon A[Dimmable ballast]", latitude, longitude);
            CreateCsv(DeviceType.Switch, csvFilePath, fullGeozonePath, controller, switchDevice, "ABEL-Vigilon A[Switch]", latitude, longitude, fileAppend: true);
            ImportFile(csvFilePath);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory App and select the testing geozone");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("2. Click on the marker");
            equipmentInventoryPage.Map.SelectDeviceGL(longitude, latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();

            Step("3. Click on 'Show/Hide columns' button and check on the checkboxes to select all properties, then click the button again to close it");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.CheckAllColumnsInShowHideColumnsMenu();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.HideShowHideColumnsMenu();

            Step("4. Check all devices in the grid");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickAllRowsCheckbox(true);
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("5. Verify The information panel has 3 tabs");
            Step(" o Tab 'Identity':");
            Step("  - 'Identity of the light point' area has");
            Step("   + 'Controller ID *' combobox");
            Step("  - 'Control System' area has");
            Step("   + 'Type of equipment *' combobox");
            Step("   + 'Dimming group' commbobox");
            Step("   + 'Install status' combobox");
            Step("   + 'Device HW version' textbox");
            Step("   + 'Device SW version' textbox");
            equipmentInventoryPage.MultipleDevicesEditorPanel.SelectTab("Identity");
            equipmentInventoryPage.MultipleDevicesEditorPanel.ExpandGroupsActiveTab();
            var actualGroupsName = equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfGroupsNameActiveTab();
            VerifyEqual("5. Verify Tab 'Identity' has 'Identity of the light point', 'Control System'", new List<string> { "Identity of the light point", "Control System" }, actualGroupsName);
            VerifyEqual("5. Verify 'Controller ID *' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsControllerIdDropDownDisplayed());
            VerifyEqual("5. Verify 'Type of equipment *' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsTypeEquipmentDropDownDisplayed());
            VerifyEqual("5. Verify 'Dimming group' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsDimmingGroupDropDownDisplayed());
            VerifyEqual("5. Verify 'Install status' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsInstallStatusDropDownDisplayed());
            VerifyEqual("5. Verify 'Device HW version' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsDeviceHwVersionInputDisplayed());
            VerifyEqual("5. Verify 'Device SW version' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsDeviceSwVersionInputDisplayed());

            Step(" o Tab 'Inventory':");
            Step("  - 'Location' area has");
            Step("   + 'Premise' textbox");
            Step("   + 'Address 1' textbox");
            Step("   + 'Address 2' textbox");
            Step("   + 'City' textbox");
            Step("   + 'Zip code' textbox");
            Step("   + 'Map number' textbox");
            Step("   + 'Location Type' combobox");
            Step("  - 'Customer' area has");
            Step("   + 'Account number' textbox");
            Step("   + 'Customer number' textbox");
            Step("   + 'Customer name' textbox");
            Step("  - 'Lamp' area has");
            Step("   + 'Lamp Type' combobox");
            Step("   + 'Lamp wattage (W)' combobox");
            Step("   + 'Fixed saved power' combobox");
            Step("   + 'Lamp install date' textbox");
            Step("  - 'Driver or ballast' area has");
            Step("   + 'Ballast type' textbox");
            Step("   + 'Dimming interface' combobox");
            Step("   + 'Ballast brand' textbox");
            Step("   + 'Pole or head install' textbox");
            Step("  - 'Luminaire' area has");
            Step("   + 'Luminaire brand' textbox");
            Step("   + 'Luminaire type' combobox");
            Step("   + 'Luminaire model' textbox");
            Step("   + 'Light distribution' textbox");
            Step("   + 'Orientation' combobox");
            Step("   + 'Color code' textbox");
            Step("   + 'Status' textbox");
            Step("   + 'Luminaire install date' textbox");
            Step("  - 'Bracket' area has");
            Step("   + 'Bracket brand' textbox");
            Step("   + 'Bracket model' textbox");
            Step("   + 'Bracket type' textbox");
            Step("   + 'Bracket color' textbox");
            Step("  - 'Pole or support' area has");
            Step("   + 'Pole type' textbox");
            Step("   + 'Pole height' textbox");
            Step("   + 'Pole shape' textbox");
            Step("   + 'Pole material' textbox");
            Step("   + 'Pole color code' textbox");
            Step("   + 'Pole status' textbox");
            Step("   + 'Type of ground fixing' textbox");
            Step("   + 'Pole install date' textbox");
            Step("  - 'Comment' area has");
            Step("   + 'Comment' textbox");
            equipmentInventoryPage.MultipleDevicesEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.MultipleDevicesEditorPanel.ExpandGroupsActiveTab();
            actualGroupsName = equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfGroupsNameActiveTab();
            VerifyEqual("5. Verify Tab 'Inventory' has 'Location', 'Customer', 'Lamp', 'Driver or ballast', 'Luminaire', 'Bracket', 'Pole or support', 'Comment'", new List<string> { "Location", "Customer", "Lamp", "Driver or ballast", "Luminaire", "Bracket", "Pole or support", "Comment" }, actualGroupsName);
            VerifyEqual("5. Verify 'Premise' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPremiseInputDisplayed());
            VerifyEqual("5. Verify 'Address 1' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsAddress1InputDisplayed());
            VerifyEqual("5. Verify 'Address 2' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsAddress2InputDisplayed());
            VerifyEqual("5. Verify 'City' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsCityInputDisplayed());
            VerifyEqual("5. Verify 'Zip code' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsZipCodeInputDisplayed());
            VerifyEqual("5. Verify 'Map number' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsMapNumberInputDisplayed());
            VerifyEqual("5. Verify 'Location Typer' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLocationTypeDropDownDisplayed());
            VerifyEqual("5. Verify 'Account number' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsAccountNumberInputDisplayed());
            VerifyEqual("5. Verify 'Customer number' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsCustomerNumberInputDisplayed());
            VerifyEqual("5. Verify 'Customer name' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsCustomerNameInputDisplayed());
            VerifyEqual("5. Verify 'Lamp Type' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLampTypeDropDownDisplayed());
            VerifyEqual("5. Verify 'Lamp wattage (W)' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLampWattageNumericInputDisplayed());
            VerifyEqual("5. Verify 'Fixed saved power' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsFixedSavedPowerNumericInputDisplayed());
            VerifyEqual("5. Verify 'Lamp install date' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLampInstallDateInputDisplayed());
            VerifyEqual("5. Verify 'Ballast type' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsBallastTypeInputDisplayed());
            VerifyEqual("5. Verify 'Dimming interface' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsDimmingInterfaceDropDownDisplayed());
            VerifyEqual("5. Verify 'Ballast brand' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsBallastBrandInputDisplayed());
            VerifyEqual("5. Verify 'Pole or head install' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleHeadInstallInputDisplayed());
            VerifyEqual("5. Verify 'Luminaire brand' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLuminaireBrandInputDisplayed());
            VerifyEqual("5. Verify 'Luminaire type' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLuminaireTypeDropDownDisplayed());
            VerifyEqual("5. Verify 'Luminaire model' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLuminaireModelInputDisplayed());
            VerifyEqual("5. Verify 'Light distribution' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLightDistributionInputDisplayed());
            VerifyEqual("5. Verify 'Orientation' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsOrientationDropDownDisplayed());
            VerifyEqual("5. Verify 'Color code' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsColorCodeInputDisplayed());
            VerifyEqual("5. Verify 'Status' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsStatusInputDisplayed());
            VerifyEqual("5. Verify 'Bracket brand' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsBracketBrandInputDisplayed());
            VerifyEqual("5. Verify 'Bracket model' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsBracketModelInputDisplayed());
            VerifyEqual("5. Verify 'Bracket type' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsBracketTypeInputDisplayed());
            VerifyEqual("5. Verify 'Bracket color' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsBracketColorInputDisplayed());
            VerifyEqual("5. Verify 'Pole type' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleTypeInputDisplayed());
            VerifyEqual("5. Verify 'Pole height' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleHeightInputDisplayed());
            VerifyEqual("5. Verify 'Pole shape' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleShapeInputDisplayed());
            VerifyEqual("5. Verify 'Pole material' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleMaterialInputDisplayed());
            VerifyEqual("5. Verify 'Pole color code' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleColorCodeInputDisplayed());
            VerifyEqual("5. Verify 'Pole status' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleStatusInputDisplayed());
            VerifyEqual("5. Verify 'Type of ground fixing' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsTypeGroundFixingInputDisplayed());
            VerifyEqual("5. Verify 'Pole install date' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsPoleInstallDateInputDisplayed());
            VerifyEqual("5. Verify 'Comment' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsCommentInputDisplayed());

            Step(" o Tab 'Electricity network':");
            Step("  - 'Network' area has");
            Step("   + 'Energy supplier' combobox");
            Step("   + 'Network type' textbox");
            Step("   + 'Segment' combobox");
            Step("   + 'Section' textbox");
            Step("   + 'High voltage threshold' combobox");
            Step("   + 'Low voltage threshold' combobox");
            equipmentInventoryPage.MultipleDevicesEditorPanel.SelectTab("Electricity network");
            equipmentInventoryPage.MultipleDevicesEditorPanel.ExpandGroupsActiveTab();
            actualGroupsName = equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfGroupsNameActiveTab();
            VerifyEqual("5. Verify Tab 'Electricity network' has 'Network'", new List<string> { "Network" }, actualGroupsName);
            VerifyEqual("5. Verify 'Energy supplier' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsEnergySupplierDropDownDisplayed());
            VerifyEqual("5. Verify 'Network type' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsNetworkTypeInputDisplayed());
            VerifyEqual("5. Verify 'Segment' combobox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsSegmentNumericInputDisplayed());
            VerifyEqual("5. Verify 'Section' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsSectionInputDisplayed());
            VerifyEqual("5. Verify 'High voltage threshold' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsHighVoltageThresholdNumericInputDisplayed());
            VerifyEqual("5. Verify 'Low voltage threshold' textbox displays", true, equipmentInventoryPage.MultipleDevicesEditorPanel.IsLowVoltageThresholdNumericInputDisplayed());

            Step("6. Hover the switch listed in the information panel and click on 'X' button to deselect it");
            equipmentInventoryPage.MultipleDevicesEditorPanel.ClickCancelDevice(switchDevice);

            Step("7. Verify The switch is removed out of the list of the panel");
            var deviceList = equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfDevicesName();
            VerifyEqual("7. Verify The switch is removed out of the list of the panel", false, deviceList.Contains(switchDevice));

            Step("8. Close the panel and the grid, then press the marker and select 2 devices again and update value for Wattage, Address 1, Address 2, Luminaire Type, then press Save button on the information panel");
            equipmentInventoryPage.MultipleDevicesEditorPanel.ClickBackButton();
            equipmentInventoryPage.WaitForMultipleDevicesEditorDisappeared();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickCloseButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();
            equipmentInventoryPage.Map.SelectDeviceGL(longitude, latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickAllRowsCheckbox(true);
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.MultipleDevicesEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.MultipleDevicesEditorPanel.ExpandGroupsActiveTab();
            var updatedWattage = SLVHelper.GenerateStringInteger(1, 9999);
            equipmentInventoryPage.MultipleDevicesEditorPanel.EnterLampWattageNumericInput(updatedWattage);
            var updatedAddress1 = SLVHelper.GenerateString(12);
            equipmentInventoryPage.MultipleDevicesEditorPanel.EnterAddress1Input(updatedAddress1);
            var updatedAddress2 = SLVHelper.GenerateString(12);
            equipmentInventoryPage.MultipleDevicesEditorPanel.EnterAddress2Input(updatedAddress2);
            var updatedLuminaireType = equipmentInventoryPage.MultipleDevicesEditorPanel.SelectRandomLampTypeDropDown();
            equipmentInventoryPage.MultipleDevicesEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForMultipleDevicesEditorDisappeared();

            Step("9. Verify The infomation is closed and the table is refreshed");
            VerifyEqual("9. Verify The infomation is closed and the table is refreshed", false, equipmentInventoryPage.IsMultipleDevicesEditorPanelDisplayed());

            Step("10. Scroll the horizontal scrollbar to see the value of Wattage, Address 1, Address 2, Luminaire Type is updated correctly for the streetlight. Note: skipped checking switch data because these property applied for streetlight only.");
            var dtGrid = equipmentInventoryPage.Map.DeviceClusterPopupPanel.BuildDataTable();
            var rows = dtGrid.Select(string.Format("Name = '{0}'", streetlight));
            if (rows.Any())
            {
                var colName = rows[0]["Name"].ToString();
                var colWattage = rows[0]["Wattage"].ToString();
                var colAddress1 = rows[0]["Address1"].ToString();
                var colAddress2 = rows[0]["Address2"].ToString();
                var colLuminaireType = rows[0]["Luminaire Type"].ToString();

                VerifyEqual("[New bug#id needed] 10. Verify Wattage is updated correctly", updatedWattage, colWattage);
                VerifyEqual("[New bug#id needed] 10. Verify Address 1 is updated correctly", updatedAddress1, colAddress1);
                VerifyEqual("[New bug#id needed] 10. Verify Address 2 is updated correctly", updatedAddress2, colAddress2);
                VerifyEqual("[New bug#id needed] 10. Verify Luminaire Type is updated correctly", updatedLuminaireType, colLuminaireType);
            }
            else
                Warning(string.Format("10. There is no row with device name '{0}'", streetlight));

            Step("11. Press Delete button on the information panel");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickAllRowsCheckbox(false);
            equipmentInventoryPage.WaitForMultipleDevicesEditorDisappeared();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickAllRowsCheckbox(true);
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.MultipleDevicesEditorPanel.ClickDeleteButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("12. Verify A pop-up displays with");
            Step(" - Title: Confirmation");
            Step(" - Description: 'Would you like to delete selected equipments ?'");            
            VerifyEqual("12. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("12. Verify dialog title is 'Confirmation'", "Confirmation", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("12. Verify Description: 'Would you like to delete selected equipments ?'", "Would you like to delete selected equipments ?", equipmentInventoryPage.Dialog.GetMessageText());

            Step("13. Press No button");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("14. Verify The pop-up is closed");
            VerifyEqual("14. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());
            
            Step("15. Press Delete button again and press Yes button");
            equipmentInventoryPage.MultipleDevicesEditorPanel.ClickDeleteButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();
            equipmentInventoryPage.Dialog.ClickYesButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForHeaderMessageDisplayed();

            Step("16. Verify");
            Step(" - A message displays '2 equipments have been deleted successfully'");
            Step(" - The information panel is closed");
            Step(" - The cluster is deleted out of the map");
            Step(" - The testing geozone tree has no imported devices");
            VerifyEqual("16. Verify A message displays '2 equipments has been removed successfully'", "2 equipments has been removed successfully", equipmentInventoryPage.GetHeaderMessage());
            VerifyEqual("[New bug#id needed] 16. The information panel is closed", false, equipmentInventoryPage.IsMultipleDevicesEditorPanelDisplayed());
            VerifyEqual("[New bug#id needed] 16. The cluster is deleted out of the map", false, equipmentInventoryPage.Map.IsDeviceClusterPopupPanelDisplayed());
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            var devices = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildDeviceNamesOfSelectedNode();
            VerifyEqual("16. Verify The testing geozone tree has no imported devices", 1, devices.Count);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_59 SC-782 Select devices on geozone tree while cluster grid is opened")]
        public void EI_59()
        {
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI59.csv");
            var geozone = SLVHelper.GenerateUniqueName("GZNEI59");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var separatedStreetlight = SLVHelper.GenerateUniqueName("STL");
            var newStreetlight = string.Format("STL{0}New", DateTime.Now.Timestamp());
            var fullGeozonePath = string.Format("{0}/{1}", Settings.RootGeozoneName, geozone);
            var clusterLongitude = "92.74642";
            var clusterLatitude = "12.84031";
            var streetlightLongitude = "92.74669"; 
            var streetlightLatitude = "12.84009";
            var typeOfEquipment = "ABEL-Vigilon A[Dimmable ballast]";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a geozone contains a cluster of 2 streetlights and a separate streetlight");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI59*");
            CreateNewGeozone(geozone, latMin: "12.83888", latMax: "12.84130", lngMin: "92.74411", lngMax: "92.74926");
            CreateNewController(controller, geozone);
            var clusterStreetlights = CreateCsvDevicesSameLocation(2, DeviceType.Streetlight, csvFilePath, fullGeozonePath, controller, string.Format("STL{0}", DateTime.Now.Timestamp()), typeOfEquipment, clusterLatitude, clusterLongitude);
            CreateNewDevice(DeviceType.Streetlight, separatedStreetlight, controller, geozone, typeOfEquipment, streetlightLatitude, streetlightLongitude);
            ImportFile(csvFilePath);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory App and select the testing geozone");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("2. Click on the cluster to open the grid");
            equipmentInventoryPage.Map.SelectDeviceGL(clusterLongitude, clusterLatitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            
            Step("3. Click on the device belonging to the grid from geozone tree");
            var firstStreelight = clusterStreetlights[0];
            var secondStreelight = clusterStreetlights[1];
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(firstStreelight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("4. Verify");
            Step(" - The row of that device in the grid with the checkbox is checked");
            Step(" - The device editor panel of the selected device displays on the right hand");
            VerifyEqual(string.Format("4. Verify The row of that device '{0}' in the grid with the checkbox is checked", firstStreelight), true, equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetCheckBoxGridColumnValue(firstStreelight));
            VerifyEqual("4. Verify The device editor panel of the selected device displays on the right hand", firstStreelight, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());

            Step("5. Select another device belonging to the grid from the geozone tree");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(secondStreelight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("6. Verify The grid and the device editor panel are updated correctly");
            VerifyEqual(string.Format("6. Verify The row of that device '{0}' in the grid with the checkbox is checked", secondStreelight), true, equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetCheckBoxGridColumnValue(secondStreelight));
            VerifyEqual("6. Verify The device editor panel are updated correctly", secondStreelight, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());

            Step("7. Click on the device not belonging to the grid from the geozone tree");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(separatedStreetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("8. Verify The grid is hidden and the device editor panel is updated correctly");
            VerifyEqual("8. Verify The grid is hidden", false, equipmentInventoryPage.Map.IsDeviceClusterPopupPanelDisplayed());
            VerifyEqual("8. Verifythe device editor panel is updated correctly", separatedStreetlight, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());

            Step("9. Click on the cluster again and select a device");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.Map.SelectDeviceGL(clusterLongitude, clusterLatitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();

            Step("10. If the grid is covering the separate streetlight, click on the title of the grid to move it to another position until seeing the separate streetlight");
            equipmentInventoryPage.Map.DragAndDropDeviceClusterPopupPanel(200, 150);

            Step("11. Press and hold Shift key and click on the separate streetlight");
            equipmentInventoryPage.Map.SelectDevicesGL(streetlightLongitude, streetlightLatitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();

            Step("12. Verify");
            Step(" - The grid is closed");
            Step(" - The right panel is updated with");
            Step("  + Title: 'Selected equipments'");
            Step("  + List of 3 selected devices.");
            VerifyEqual("12. Verify The grid is closed", false, equipmentInventoryPage.Map.IsDeviceClusterPopupPanelDisplayed());
            VerifyEqual("12. Verify The right panel is updated with Title: 'Selected equipments'", "Selected equipments", equipmentInventoryPage.MultipleDevicesEditorPanel.GetPanelTitleText());
            VerifyEqual("12. Verify List of 3 selected devices", 3, equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfDevicesName().Count);

            Step("13. Select the geozone again, press Add button and select 'Add Device' option, then select a streetlight");  
            Step("14. Enter all information for the new streetlight and position it on the existing streetlight");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.CreateDevice(DeviceType.Streetlight, newStreetlight, controller, newStreetlight, typeOfEquipment, "", true);

            Step("15. Verify the new cluster is created with the numberic text on it showing the number devices");
            equipmentInventoryPage.Map.MoveToDeviceGL(streetlightLongitude, streetlightLatitude);
            var tooltipDeviceName = equipmentInventoryPage.Map.GetDeviceNameGL();
            var tooltipDeviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("15. Verify the new cluster is created", "Device Cluster", tooltipDeviceName);
            VerifyEqual("15. Verify the new cluster is created with the numberic text on it showing the number devices", "2 devices", tooltipDeviceCount);

            Step("16. Click on the new cluster");
            equipmentInventoryPage.Map.SelectDeviceGL(streetlightLongitude, streetlightLatitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();

            Step("17. Verify the grid displays and contains 2 devices in 2 row");
            var listOfDeviceName = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("17. Verify the grid displays and contains 2 devices in 2 row", 2, listOfDeviceName.Count);

            Step("18. Select the newly added streetlight and press Duplicate button, then position it on the cluster in the precontion.");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newStreetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.ClickDuplicateButton();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForDuplicateEquipmentPanelDisplayed();
            equipmentInventoryPage.Map.ClickCentralPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.ClickRecorderButton();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForDuplicateEquipmentPanelDisappeared();

            Step("19. Verify The cluster is updated");
            Step(" - The numberic text is updated correctly");
            equipmentInventoryPage.Map.MoveToDeviceGL(streetlightLongitude, streetlightLatitude);
            tooltipDeviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("19. Verify The cluster is updated(The numberic text is updated correctly)", "3 devices", tooltipDeviceCount);

            Step("20. Close the 'Duplicate equipment' panel and click on the cluster");           
            equipmentInventoryPage.Map.SelectDeviceGL(streetlightLongitude, streetlightLatitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();

            Step("21. Verify the newly added streetlight is displays correctly in the grid.");
            VerifyEqual("21. Verify the newly added streetlight is displays correctly in the grid.", true, equipmentInventoryPage.Map.DeviceClusterPopupPanel.IsGridHasTextPresent("Name", newStreetlight));

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI-60 - SC-782 - Moving a cluster of devices on the map")]
        public void EI_60()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI60");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightLatitude = "11.26592";
            var streetlightLongitude = "92.70035";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a geozone contains a streetlight");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI60*");
            var userModel = CreateNewProfileAndUser();
            CreateNewGeozone(geozone, latMin: "11.26471", latMax: "11.26712", lngMin: "92.69778", lngMax: "92.70293");
            CreateNewController(controller, geozone, lat: SLVHelper.GenerateCoordinate("11.26544", "11.26627"), lng: SLVHelper.GenerateCoordinate("92.69977", "92.70091"));
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone, lat: streetlightLatitude, lng:streetlightLongitude);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(userModel.Username, userModel.Password);
            desktopPage.InstallAppsIfNotExist(App.Users, App.EquipmentInventory);

            Step("1. Go to Equipment Inventory App and select the testing geozone");           
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("2. Click on the streetlight and select Duplicate button on the 'device editor' panel");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            equipmentInventoryPage.StreetlightEditorPanel.ClickDuplicateButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForDuplicateEquipmentPanelDisplayed();           

            Step("3. Point the duplicated streetlight on the same position of the existing one");
            equipmentInventoryPage.Map.ClickCentralPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.ClickRecorderButton();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.StreetlightEditorPanel.WaitForDuplicateEquipmentPanelDisappeared();

            Step("4. Verify");
            Step(" - A new cluster is created");
            Step(" - The number of the cluster is 2");
            equipmentInventoryPage.Map.MoveToDeviceGL(streetlightLongitude, streetlightLatitude);
            var tooltipDeviceName = equipmentInventoryPage.Map.GetDeviceNameGL();
            var tooltipDeviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("4. Verify A new cluster is created", "Device Cluster", tooltipDeviceName);
            VerifyEqual("4. Verify The number of the cluster is 2", "2 devices", tooltipDeviceCount);
            equipmentInventoryPage.AppBar.ClickHeaderBartop();

            Step("5. Press and hold the left mouse for 3 seconds, then drag and move the cluster to another location");
            equipmentInventoryPage.Map.ClickHoldDeviceAndMoveTo(streetlightLongitude, streetlightLatitude, SLVHelper.GenerateInteger(50, 150), SLVHelper.GenerateInteger(50, 150), 3);
            equipmentInventoryPage.WaitForHeaderMessageDisplayed();

            Step("6. Verify The message displays on the top of the screen: 'The device's location has been updated successfully.'");
            VerifyEqual("6. Verify The message displays on the top of the screen: 'The device's location has been updated successfully.'", "The device's location has been updated successfully.", equipmentInventoryPage.GetHeaderMessage());
            equipmentInventoryPage.WaitForHeaderMessageDisappeared();

            Step("7. Press on the cluster and check a device, then press Reposition button");
            string newLongitude = string.Empty;
            string newLatitude = string.Empty;
            if (!equipmentInventoryPage.Map.IsDeviceClusterPopupPanelDisplayed())
            {
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
                newLongitude = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();
                newLatitude = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
                equipmentInventoryPage.Map.SelectDeviceGL(newLongitude, newLatitude);
                equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            }
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickGridColumn(streetlight, true);
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            newLongitude = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();
            newLatitude = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickRepositionButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();

            Step("8. Verify");
            Step(" - The table of the cluster is hidden");          
            Step(" - A red rectangle is flicking with the white text on the midle top of the screen");
            Step("  + Text 'Click on the map to reposition the device. Click here to stop.'");
            VerifyEqual("8. Verify The table of the cluster is hidden", false, equipmentInventoryPage.Map.IsDeviceClusterPopupPanelDisplayed());
            VerifyEqual("8. Verify The red rectangle is displayed", true, equipmentInventoryPage.Map.IsRecorderDisplayed());
            VerifyEqual("8. Verify A red rectangle is flicking with 'Click on the map to reposition the device. Click here to stop.'", "Click on the map to reposition the device. Click here to stop.", equipmentInventoryPage.Map.GetRecorderText());

            Step("9. Click on the text");
            equipmentInventoryPage.Map.ClickRecorderButton();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();

            Step("10. Verify");
            Step(" - The red rectangle is disappeared");
            Step(" - The number of the cluster is unchanged");
            VerifyEqual("10. Verify The red rectangle is disappeared", false, equipmentInventoryPage.Map.IsRecorderDisplayed());
            equipmentInventoryPage.Map.MoveToDeviceGL(newLongitude, newLatitude);
            tooltipDeviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            VerifyEqual("10. Verify The number of the cluster is unchanged", "2 devices", tooltipDeviceCount);            

            Step("11. Go to User app and select profile of the testing user, then select 'Modify device's inventory' in Blocked Actions section and press Save button");
            var usersPage = equipmentInventoryPage.AppBar.SwitchTo(App.Users) as UsersPage;
            usersPage.UserProfileListPanel.SelectProfile(userModel.Profile);
            usersPage.UserProfileDetailsPanel.SelectBlockActionsDropDown("Modify device's inventory");
            usersPage.UserProfileDetailsPanel.ClickSaveButton();
            usersPage.WaitForPreviousActionComplete();
            usersPage.WaitForHeaderMessageDisappeared();

            Step("12. Go back to Equipment inventory > the testing geozone");
            equipmentInventoryPage = usersPage.AppBar.SwitchTo(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("13. Press and hold the left mouse for 3 seconds, then drag and move the cluster to another location");
            equipmentInventoryPage.Map.ClickHoldDeviceAndMoveTo(newLongitude, newLatitude, SLVHelper.GenerateInteger(50, 150), SLVHelper.GenerateInteger(50, 150), 3);

            Step("14. Verify User cannot move the cluster to other position");
            VerifyEqual("14. Verify User cannot move the cluster to other position", false, equipmentInventoryPage.IsHeaderMessageDisplayed());

            Step("15. Click on the cluster");
            equipmentInventoryPage.Map.SelectDeviceGL(newLongitude, newLatitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();

            Step("16. Verify There is no 'Reposition' button on the table.");
            VerifyEqual("16. Verify There is no 'Reposition' button on the table.", false, equipmentInventoryPage.Map.DeviceClusterPopupPanel.IsRepositionButtonVisible());

            Step("17. Go back to User app and remove the blocked action added for testing user");
            usersPage = equipmentInventoryPage.AppBar.SwitchTo(App.Users) as UsersPage;
            usersPage.UserProfileListPanel.SelectProfile(userModel.Profile);
            usersPage.UserProfileDetailsPanel.RemoveAllBlockedActions();
            usersPage.UserProfileDetailsPanel.ClickSaveButton();
            usersPage.WaitForPreviousActionComplete();
            usersPage.WaitForHeaderMessageDisappeared();

            Step("18. Go back to Eqiupment inventory > the testing geozone");
            equipmentInventoryPage = usersPage.AppBar.SwitchTo(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("19. Press and hold the left mouse for 3 seconds, then drag and move the cluster to another location");
            equipmentInventoryPage.Map.ClickHoldDeviceAndMoveTo(newLongitude, newLatitude, SLVHelper.GenerateInteger(-150, -50), SLVHelper.GenerateInteger(-150, -50), 3);
            equipmentInventoryPage.WaitForHeaderMessageDisplayed();

            Step("20. Verify The message displays on the top of the screen: 'The device's location has been updated successfully.'");            
            VerifyEqual("20. Verify The message displays on the top of the screen: 'The device's location has been updated successfully.'", "The device's location has been updated successfully.", equipmentInventoryPage.GetHeaderMessage());
            equipmentInventoryPage.WaitForHeaderMessageDisappeared();

            Step("21. Press on the cluster and check a device");
            if (!equipmentInventoryPage.Map.IsDeviceClusterPopupPanelDisplayed())
            {
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
                newLongitude = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();
                newLatitude = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
                equipmentInventoryPage.Map.SelectDeviceGL(newLongitude, newLatitude);
                equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            }
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickGridColumn(streetlight, true);
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("22. Verify There is a button 'Reposition'");
            VerifyEqual("22. Verify There is a button 'Reposition'", true, equipmentInventoryPage.Map.DeviceClusterPopupPanel.IsRepositionButtonVisible());

            try
            {
                DeleteGeozone(geozone);           
                DeleteUserAndProfile(userModel);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI-61 - SC-782 - Moving devices out of a cluster")]
        public void EI_61()
        {
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI61.csv");
            var geozone = SLVHelper.GenerateUniqueName("GZNEI61");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var fullGeozonePath = string.Format("{0}/{1}", Settings.RootGeozoneName, geozone);
            var clusterLatitude = "12.54481";
            var clusterLongitude = "92.97222";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a geozone contains 5 streetlights");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI61*");
            CreateNewGeozone(geozone, latMin: "12.54348", latMax: "12.54590", lngMin: "92.96995", lngMax: "92.97510");
            CreateNewController(controller, geozone);
            var clusterStreetlights = CreateCsvDevicesSameLocation(5, DeviceType.Streetlight, csvFilePath, fullGeozonePath, controller, string.Format("STL{0}", DateTime.Now.Timestamp()), "ABEL-Vigilon A[Dimmable ballast]", clusterLatitude, clusterLongitude);            
            ImportFile(csvFilePath);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory App and select the testing geozone");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("2. Click on the cluster and select all streetlights");
            equipmentInventoryPage.Map.SelectDeviceGL(clusterLongitude, clusterLatitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickAllRowsCheckbox(true);
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("3. Click 'Reposition' button and drop them on another place in the map");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickRepositionButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForHeaderMessageDisplayed();

            Step("4. Verify The message displays on the top of the screen: 'The device's location has been updated successfully.'");
            VerifyEqual("4. Verify The message displays on the top of the screen: 'The device's location has been updated successfully.'", "The device's location has been updated successfully.", equipmentInventoryPage.GetHeaderMessage());
            equipmentInventoryPage.WaitForHeaderMessageDisappeared();

            Step("5. Click on the cluster and select 2 streetlights");
            var streetlight = clusterStreetlights.First();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            clusterLongitude = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();
            clusterLatitude = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
            var rndStreetlights = clusterStreetlights.PickRandom(2);
            equipmentInventoryPage.Map.SelectDeviceGL(clusterLongitude, clusterLatitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickGridColumn(rndStreetlights[0], true);
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickGridColumn(rndStreetlights[1], true);
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("6. Click 'Reposition' button and drop them on another place in the map");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickRepositionButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForHeaderMessageDisplayed();

            Step("7. Verify The message displays on the top of the screen: 'The device's location has been updated successfully.'");
            VerifyEqual("7. Verify The message displays on the top of the screen: 'The device's location has been updated successfully.'", "The device's location has been updated successfully.", equipmentInventoryPage.GetHeaderMessage());
            equipmentInventoryPage.WaitForHeaderMessageDisappeared();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(rndStreetlights[0]);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            var newClusterLongitude = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();
            var newClusterLatitude = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("8. Verify A new cluster is created with");
            Step(" - The number is 2");
            Step(" - It contains 2 moved streetlights");
            equipmentInventoryPage.Map.SelectDeviceGL(newClusterLongitude, newClusterLatitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            var listNewDevices = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("8. Verify A new cluster is created with 2 streetlights", 2, listNewDevices.Count);
            VerifyEqual("8. Verify A new cluster contains 2 moved streetlights", rndStreetlights, listNewDevices, false);
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickCloseButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();

            Step("9. Verify The old cluster is updated with");
            Step(" - The number is 3");
            Step(" - It contains 3 remained streetlights");
            var remainingStreetlights = clusterStreetlights.Except(rndStreetlights).ToList();
            equipmentInventoryPage.Map.SelectDeviceGL(clusterLongitude, clusterLatitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            var listOldDevices = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("8. Verify A new cluster is updated with 3 streetlights", 3, listOldDevices.Count);
            VerifyEqual("8. Verify A new cluster contains 3 remained streetlights", remainingStreetlights, listOldDevices, false);

            Step("10. Click on the old cluster and select 2 streetlights");
            rndStreetlights = remainingStreetlights.PickRandom(2);
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickGridColumn(rndStreetlights[0], true);
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickGridColumn(rndStreetlights[1], true);
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("11. Click 'Reposition' button and drop them on another place in the map");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickRepositionButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForHeaderMessageDisappeared();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(rndStreetlights[0]);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            var newClusterLongitude1 = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();
            var newClusterLatitude1 = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("12. Verify A new cluster is created with");
            Step(" - The number is 2");
            Step(" - It contains 2 moved streetlights");
            equipmentInventoryPage.Map.SelectDeviceGL(newClusterLongitude1, newClusterLatitude1);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            listNewDevices = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("12. Verify A new cluster is created with 2 streetlights", 2, listNewDevices.Count);
            VerifyEqual("12. Verify A new cluster contains 2 moved streetlights", rndStreetlights, listNewDevices, false);
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickCloseButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();

            Step("13. Verify The old cluster is removed");
            Step(" - It is changed to Streetlight icon");
            Step(" - Hover the streetlight icon");
            Step("  + A tooltip with streetlight's name displays");
            var lastStreetlight = remainingStreetlights.Except(rndStreetlights).FirstOrDefault();
            equipmentInventoryPage.Map.MoveToDeviceGL(clusterLongitude, clusterLatitude);
            var info = equipmentInventoryPage.Map.GetDeviceSprite(clusterLongitude, clusterLatitude);
            var tooltipDeviceName = equipmentInventoryPage.Map.GetDeviceNameGL();
            VerifyEqual("13. Verify The old cluster is changed to Streetlight icon", "streetlight", info.DeviceType);
            VerifyEqual("13. Verify A tooltip with streetlight's name displays", lastStreetlight, tooltipDeviceName);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI-62 - SC-782 - Drag and drop devices or cluster on top of another devices or cluster")]
        public void EI_62()
        { 
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI62.csv");          
            var geozone = SLVHelper.GenerateUniqueName("GZNEI62");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var fullGeozonePath = string.Format("{0}/{1}", Settings.RootGeozoneName, geozone);
            var typeOfEquipment = "ABEL-Vigilon A[Dimmable ballast]";
            var cluster1Latitude = "12.90506";
            var cluster1Longitude = "92.86811";
            var cluster2Latitude = "12.90498";
            var cluster2Longitude = "92.86856";
            var streetlight1 = new DeviceModel { Type = DeviceType.Streetlight, Id = SLVHelper.GenerateUniqueName("STL01"), Name = SLVHelper.GenerateUniqueName("STL01"), Controller = controller, TypeOfEquipment = typeOfEquipment, Latitude = "12.90518", Longitude = "92.86887", UniqueAddress = SLVHelper.GenerateMACAddress() };
            var streetlight2 = new DeviceModel { Type = DeviceType.Streetlight, Id = SLVHelper.GenerateUniqueName("STL02"), Name = SLVHelper.GenerateUniqueName("STL02"), Controller = controller, TypeOfEquipment = typeOfEquipment, Latitude = "12.90533", Longitude = "92.86864", UniqueAddress = SLVHelper.GenerateMACAddress() };
            var streetlight3 = new DeviceModel { Type = DeviceType.Streetlight, Id = SLVHelper.GenerateUniqueName("STL03"), Name = SLVHelper.GenerateUniqueName("STL03"), Controller = controller, TypeOfEquipment = typeOfEquipment, Latitude = "12.90536", Longitude = "92.86833", UniqueAddress = SLVHelper.GenerateMACAddress() };
            var streetlight4 = new DeviceModel { Type = DeviceType.Streetlight, Id = SLVHelper.GenerateUniqueName("STL04"), Name = SLVHelper.GenerateUniqueName("STL04"), Controller = controller, TypeOfEquipment = typeOfEquipment, Latitude = "12.90539", Longitude = "92.86809", UniqueAddress = SLVHelper.GenerateMACAddress() };
            var streetlight5 = new DeviceModel { Type = DeviceType.Streetlight, Id = SLVHelper.GenerateUniqueName("STL05"), Name = SLVHelper.GenerateUniqueName("STL05"), Controller = controller, TypeOfEquipment = typeOfEquipment, Latitude = cluster1Latitude, Longitude = cluster1Longitude, UniqueAddress = SLVHelper.GenerateMACAddress(), Cluster = "1" };
            var streetlight6 = new DeviceModel { Type = DeviceType.Streetlight, Id = SLVHelper.GenerateUniqueName("STL06"), Name = SLVHelper.GenerateUniqueName("STL06"), Controller = controller, TypeOfEquipment = typeOfEquipment, Latitude = cluster1Latitude, Longitude = cluster1Longitude, UniqueAddress = SLVHelper.GenerateMACAddress(), Cluster = "1" };
            var streetlight7 = new DeviceModel { Type = DeviceType.Streetlight, Id = SLVHelper.GenerateUniqueName("STL07"), Name = SLVHelper.GenerateUniqueName("STL07"), Controller = controller, TypeOfEquipment = typeOfEquipment, Latitude = cluster2Latitude, Longitude = cluster2Longitude, UniqueAddress = SLVHelper.GenerateMACAddress(), Cluster = "2" };
            var streetlight8 = new DeviceModel { Type = DeviceType.Streetlight, Id = SLVHelper.GenerateUniqueName("STL08"), Name = SLVHelper.GenerateUniqueName("STL08"), Controller = controller, TypeOfEquipment = typeOfEquipment, Latitude = cluster2Latitude, Longitude = cluster2Longitude, UniqueAddress = SLVHelper.GenerateMACAddress(), Cluster = "2" };            
            var devices = new List<DeviceModel>() { streetlight1, streetlight2, streetlight3, streetlight4, streetlight5, streetlight6, streetlight7, streetlight8 };
            var cluster1Streetlights = devices.Where(p => p.Cluster == "1").Select(p => p.Name).ToList();
            var cluster2Streetlights = devices.Where(p => p.Cluster == "2").Select(p => p.Name).ToList();
            var importedStreetlights = devices.Select(p => p.Name).ToList();

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a geozone contains 4 streetlights, 2 clusters of devices");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI62*");
            CreateNewGeozone(geozone, latMin: "12.90449", latMax: "12.90691", lngMin: "92.86561", lngMax: "92.87076");
            CreateNewController(controller, geozone);
            CreateCsvDevices(csvFilePath, fullGeozonePath, devices);
            ImportFile(csvFilePath);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);           
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            
            Step("2. Press and drag immediately a streetlight to another position");
            equipmentInventoryPage.Map.ClickHoldDeviceAndMoveTo(streetlight1.Longitude, streetlight1.Latitude, 0, SLVHelper.GenerateInteger(-80, -30), 0);

            Step("3. Verify The streetlight is not moved");
            VerifyEqual("3. Verify The streetlight is not moved", false, equipmentInventoryPage.IsHeaderMessageDisplayed());
            
            Step("4. Press and drag immediately a cluster to another position");
            equipmentInventoryPage.Map.ClickHoldDeviceAndMoveTo(cluster1Longitude, cluster1Latitude, 0, SLVHelper.GenerateInteger(-80, -30), 0);

            Step("5 Verify The cluster is not moved");
            VerifyEqual("5. Verify The cluster is not moved", false, equipmentInventoryPage.IsHeaderMessageDisplayed());
            
            Step("6. Press Shift key then press a cluster and a streetlight and drag immediately them to another position");
            equipmentInventoryPage.Map.SelectDevicesHoldAndMoveTo(new List<string> { streetlight1.Longitude + ";" + streetlight1.Latitude, cluster1Longitude + ";" + cluster1Latitude }, 20, -50, 0);
     
            Step("6. Verify The multi-selection devices are not moved");
            VerifyEqual("6. Verify The multi-selection devices are not moved", false, equipmentInventoryPage.IsHeaderMessageDisplayed());
            
            Step("7. Press Shift key and press a cluster and a streetlight and hold them 1 second then move them for more than 10px from where they are held");
            equipmentInventoryPage.Map.SelectDevicesHoldAndMoveTo(new List<string> { streetlight2.Longitude + ";" + streetlight2.Latitude, cluster2Longitude + ";" + cluster2Latitude }, 20, -50, 1);
            equipmentInventoryPage.WaitForHeaderMessageDisplayed();

            Step("7. Verify The multi-selection devices are moved to a new position");
            if (equipmentInventoryPage.Map.IsDeviceClusterPopupPanelDisplayed())
            {
                equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickCloseButton();
                equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();
            }
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight2.Name);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            var newStreetlight2Longitude = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();
            var newStreetlight2Latitude = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
            VerifyTrue(string.Format("8. Verify The {0} moved to a new position(Longitude changed)", streetlight2.Name), streetlight2.Longitude != newStreetlight2Longitude, streetlight2.Longitude, newStreetlight2Longitude);
            VerifyTrue(string.Format("8. Verify The {0} moved to a new position(Latitude changed)", streetlight2.Name), streetlight2.Latitude != newStreetlight2Latitude, streetlight2.Latitude, newStreetlight2Latitude);
            streetlight2.Longitude = newStreetlight2Longitude;
            streetlight2.Latitude = newStreetlight2Latitude;            
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cluster2Streetlights.PickRandom());
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            var newCluster2Longitude = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();
            var newCluster2Latitude = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
            VerifyTrue("8. Verify Cluster moved to a new position(Longitude changed)", cluster2Longitude != newCluster2Longitude, cluster2Longitude, newCluster2Longitude);
            VerifyTrue("8. Verify Cluster moved to a new position(Latitude changed)", cluster2Latitude != newCluster2Latitude, cluster2Latitude, newCluster2Latitude);
            equipmentInventoryPage.StreetlightEditorPanel.ClickBackButton();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();
            cluster2Longitude = newCluster2Longitude;
            cluster2Latitude = newCluster2Latitude;

            Step("9. Press Shift key and press a cluster and a streetlight");
            equipmentInventoryPage.Map.SelectDeviceGL(cluster1Longitude, cluster1Latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();            
            equipmentInventoryPage.Map.DragAndDropDeviceClusterPopupPanel(200, 200);
            equipmentInventoryPage.Map.SelectDevicesGL(streetlight4.Longitude, streetlight4.Latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();

            Step("10. Verify The right panel displays with the following information");
            Step(" o Title: 'Selected equipments'");
            Step(" o List of devices: All selected devices are listed");
            var expectedStreetlights = new List<string>();
            expectedStreetlights.Add(streetlight4.Name);
            expectedStreetlights.AddRange(cluster1Streetlights);
            VerifyEqual("10. Verify Title: 'Selected equipments'", "Selected equipments", equipmentInventoryPage.MultipleDevicesEditorPanel.GetPanelTitleText());
            VerifyEqual("10. Verify List of devices: All selected devices are listed", expectedStreetlights, equipmentInventoryPage.MultipleDevicesEditorPanel.GetListOfDevicesName(), false);
            
            Step("11. Press and hold Streetlight 01 for 1 second then move it on top of the streetlight 02");
            equipmentInventoryPage.Map.ClickHoldDeviceAndMoveTo(streetlight1.Longitude, streetlight1.Latitude, streetlight2.Longitude, streetlight2.Latitude);
            equipmentInventoryPage.WaitForHeaderMessageDisplayed();
            if (!equipmentInventoryPage.Map.IsDeviceClusterPopupPanelDisplayed())
            {
                equipmentInventoryPage.Map.SelectDeviceGL(streetlight2.Longitude, streetlight2.Latitude);
                equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            }

            Step("12. Verify A new cluster is created with");
            Step(" o Number of device =2");
            Step(" o Contains devices: Streetlight 01 and 02");
            var newClusterStreetlights = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("12. Verify A new cluster is created with Number of device = 2", 2, newClusterStreetlights.Count);
            VerifyEqual("12. Verify A new cluster contains devices: Streetlight 01 and 02", new List<string> { streetlight1.Name, streetlight2.Name }, newClusterStreetlights, false);
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickCloseButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();

            Step("13. Press and hold cluster 01 for 1 seconds then move it on top of the streetlight 03");
            equipmentInventoryPage.Map.ClickHoldDeviceAndMoveTo(cluster1Longitude, cluster1Latitude, streetlight3.Longitude, streetlight3.Latitude);
            equipmentInventoryPage.WaitForHeaderMessageDisplayed();
            if (!equipmentInventoryPage.Map.IsDeviceClusterPopupPanelDisplayed())
            {
                equipmentInventoryPage.Map.SelectDeviceGL(streetlight3.Longitude, streetlight3.Latitude);
                equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            }

            Step("14. Verify The cluster 01 is moved to the position with");
            Step(" o Number of device =3");
            Step(" o Contains devices: 2 old streetlight and streetlight 03");
            var expectedNewClusterStreetlights1 = new List<string>();
            expectedNewClusterStreetlights1.AddRange(cluster1Streetlights);
            expectedNewClusterStreetlights1.Add(streetlight3.Name);            
            var newClusterStreetlights1 = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("15. Verify The cluster 01 is created with Number of device = 3", 3, newClusterStreetlights1.Count);
            VerifyEqual("15. Verify The cluster 01 contains devices: 2 old streetlight and streetlight 03", expectedNewClusterStreetlights1, newClusterStreetlights1, false);
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickCloseButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();
            cluster1Longitude = streetlight3.Longitude;
            cluster1Latitude = streetlight3.Latitude;

            Step("16. Press and hold Streetlight 04 for 1 seconds then move it on top of the cluster 02");
            equipmentInventoryPage.Map.ClickHoldDeviceAndMoveTo(streetlight4.Longitude, streetlight4.Latitude, cluster2Longitude, cluster2Latitude);
            equipmentInventoryPage.WaitForHeaderMessageDisplayed();
            if (!equipmentInventoryPage.Map.IsDeviceClusterPopupPanelDisplayed())
            {
                equipmentInventoryPage.Map.SelectDeviceGL(cluster2Longitude, cluster2Latitude);
                equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            }

            Step("17. Verify The cluster 02 is updated with");
            Step(" o Number of device =3");
            Step(" o Contains devices: 2 old streetlight and streetlight 04");
            var expectedNewClusterStreetlights2 = new List<string>();
            expectedNewClusterStreetlights2.Add(streetlight4.Name);
            expectedNewClusterStreetlights2.AddRange(cluster2Streetlights);           
            var newClusterStreetlights2 = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("17. Verify The cluster 02 is updated with Number of device = 3", 3, newClusterStreetlights2.Count);
            VerifyEqual("17. Verify The cluster 02 contains devices: 2 old streetlight and streetlight 04", expectedNewClusterStreetlights2, newClusterStreetlights2, false);
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickCloseButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();

            Step("18. Press and hold the cluster 01 for 1 seconds then move it on top of the cluster 02");
            equipmentInventoryPage.Map.ClickHoldDeviceAndMoveTo(cluster1Longitude, cluster1Latitude, cluster2Longitude, cluster2Latitude);
            if (!equipmentInventoryPage.Map.IsDeviceClusterPopupPanelDisplayed())
            {
                equipmentInventoryPage.Map.SelectDeviceGL(cluster2Longitude, cluster2Latitude);
                equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();
            }

            Step("19. Verify The cluster 02 is updated with");
            Step(" o Number of device: 6");
            Step(" o Contains devices: all devices of cluster 01 and cluster 02");
            var expectedNewClusterStreetlights3 = new List<string>();
            expectedNewClusterStreetlights3.AddRange(expectedNewClusterStreetlights1);
            expectedNewClusterStreetlights3.AddRange(expectedNewClusterStreetlights2);
            var newClusterStreetlights3 = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("19. Verify The cluster 02 is created with Number of device = 6", 6, expectedNewClusterStreetlights3.Count);
            VerifyEqual("19. Verify The cluster 02 contains devices: all devices of cluster 01 and cluster 02", expectedNewClusterStreetlights3, newClusterStreetlights3, false);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI-63 - SC-782 - The cluster is updated accordingly to category filters in the geozone tree")]
        public void EI_63()
        {
            var testData = GetTestDataOfEI_63();
            var latMin = testData["LatMin"];
            var latMax = testData["LatMax"];
            var lngMin = testData["LngMin"];
            var lngMax = testData["LngMax"];
            var geozone = SLVHelper.GenerateUniqueName("GZNEI63");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var switch1 = SLVHelper.GenerateUniqueName("SWH01");
            var switch2 = SLVHelper.GenerateUniqueName("SWH02");
            var longitude = SLVHelper.GenerateCoordinate("102.14737", "102.15381");
            var latitude = SLVHelper.GenerateCoordinate("39.13024", "39.13579");
            var switches = new List<string> { switch1, switch2 };
            var devices = new List<string>(switches);
            devices.Add(streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a geozone contains 2 Switch and 1 streetlight belonging to a cluster");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI63*");
            CreateNewGeozone(geozone, latMin: latMin, latMax: latMax, lngMin: lngMin, lngMax: lngMax);
            CreateNewController(controller, geozone, lat: SLVHelper.GenerateCoordinate(latMin, latMax), lng: SLVHelper.GenerateCoordinate(lngMin, lngMax));
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone, lat: latitude, lng: longitude);
            CreateNewDevice(DeviceType.Switch, switch1, controller, geozone, lat: latitude, lng: longitude);
            CreateNewDevice(DeviceType.Switch, switch2, controller, geozone, lat: latitude, lng: longitude);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory App and select the testing geozone");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("2. Press Filter button on the geozone tree");
            equipmentInventoryPage.GeozoneTreeMainPanel.ClickFilterButton();
            equipmentInventoryPage.GeozoneTreeMainPanel.WaitForFilterPanelDisplayed();

            Step("3. Deselect 'Streetlight' in the 'Types' tab");
            equipmentInventoryPage.GeozoneTreeMainPanel.FiltersPanel.UncheckTypes(DeviceType.Streetlight);

            Step("4. Verify The cluster is updated accordingly");
            Step(" - The number of device: 2");
            Step(" - A tooltip displays with 2 rows when mouse overs:");
            Step("  + 'Device Cluster'");
            Step("  + '2 devices'");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);            
            var clusterName = equipmentInventoryPage.Map.GetDeviceNameGL();
            var deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            var cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("4. Verify The cluster is updated accordingly (The number of device: 2)", "2", cluster.DeviceCount);
            VerifyEqual("4. Verify A tooltip displays: Device Cluster", "Device Cluster", clusterName);
            VerifyEqual("4. Verify A tooltip displays: 2 devices", "2 devices", deviceCount);

            Step("5. Press the cluster on the map");
            equipmentInventoryPage.Map.SelectDeviceGL(longitude, latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();

            Step("6. Verify The table contains only Switch devices");
            var clusterDevices = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("6. Verify The table contains only Switch devices", switches, clusterDevices, false);

            Step("7. Check a switch");
            var rndSwitch = switches.PickRandom();
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickGridColumn(rndSwitch, true);
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("8. Verify The information editor panel displays on the right side with");
            Step(" - Title: 'SWITCH DEVICE'");
            Step(" - Name: the selected switch's name");
            VerifyEqual("8. Verify Title: 'SWITCH DEVICE", "SWITCH DEVICE", equipmentInventoryPage.SwitchEditorPanel.GetDeviceCaptionText());
            VerifyEqual("8. Verify Name: the selected switch's name", rndSwitch, equipmentInventoryPage.SwitchEditorPanel.GetNameValue());

            Step("9. Close the panel and the table, then deselect the 'Switch Device' in the 'Types' tab");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickCloseButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();
            equipmentInventoryPage.GeozoneTreeMainPanel.FiltersPanel.UncheckTypes(DeviceType.Switch);

            Step("10. Verify The cluster is disappeared on the map");
            cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("10. Verify The cluster is disappeared on the map", false, cluster.Visible);

            Step("11. Select 'Streetlight'");
            equipmentInventoryPage.GeozoneTreeMainPanel.FiltersPanel.CheckTypes(DeviceType.Streetlight);

            Step("12. Verify The cluster appears with");
            Step(" - The number of device: 1");
            Step(" - A tooltip displays with 2 rows when mouse overs:");
            Step("  + 'Device Cluster'");
            Step("  + '1 devices'");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            clusterName = equipmentInventoryPage.Map.GetDeviceNameGL();
            deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("12. Verify The cluster is updated accordingly (The number of device: 1)", "1", cluster.DeviceCount);
            VerifyEqual("12. Verify A tooltip displays: Device Cluster", "Device Cluster", clusterName);
            VerifyEqual("12. Verify A tooltip displays: 1 devices", "1 devices", deviceCount);

            Step("13. Press the cluster on the map");
            equipmentInventoryPage.Map.SelectDeviceGL(longitude, latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();            

            Step("14. Verify The table contains only Streetlight devices");
            clusterDevices = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("14. Verify The table contains only Streetlight devices", new List<string> { streetlight }, clusterDevices);

            Step("15. Check a streetlight");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.TickGridColumn(streetlight, true);
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("16. Verify The information editor panel displays on the right side with");
            Step(" - Title: 'STREETLIGHT'");
            Step(" - Name: the selected streetlight's name");
            VerifyEqual("16. Verify Title: 'STREETLIGHT", "STREETLIGHT", equipmentInventoryPage.SwitchEditorPanel.GetDeviceCaptionText());
            VerifyEqual("16. Verify Name: the selected streetlight's name", streetlight, equipmentInventoryPage.SwitchEditorPanel.GetNameValue());

            Step("17. Close the panel and the table, then select the 'Switch Device' and 'Streetlight' in the 'Types' tab");
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickCloseButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();
            equipmentInventoryPage.GeozoneTreeMainPanel.FiltersPanel.CheckTypes(DeviceType.Streetlight, DeviceType.Switch);

            Step("18. Verify The cluster is updated accordingly");
            Step(" - The number of device: 3");
            Step(" - A tooltip displays with 2 rows when mouse overs:");
            Step("  + 'Device Cluster'");
            Step("  + '3 devices'");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            clusterName = equipmentInventoryPage.Map.GetDeviceNameGL();
            deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("18. Verify The cluster is updated accordingly (The number of device: 3)", "3", cluster.DeviceCount);
            VerifyEqual("18. Verify A tooltip displays: Device Cluster", "Device Cluster", clusterName);
            VerifyEqual("18. Verify A tooltip displays: 3 devices", "3 devices", deviceCount);

            Step("19. Press the cluster on the map");
            equipmentInventoryPage.Map.SelectDeviceGL(longitude, latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();

            Step("20. Verify The table contains both Streetlight and Switch devices");
            clusterDevices = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("20. Verify The table contains both Streetlight and Switch devices", devices, clusterDevices, false);
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickCloseButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();

            Step("21. Close the filter then press 'Advanced Search' button on the geozone tree");
            equipmentInventoryPage.GeozoneTreeMainPanel.FiltersPanel.ClickBackToolbarButton();
            equipmentInventoryPage.GeozoneTreeMainPanel.WaitForFilterPanelDisappeared();

            Step("22. Select the attribute 'Category' and select 'Streetlight' option in Category combobox then press Search button");
            equipmentInventoryPage.GeozoneTreeMainPanel.ClickExpandSearchButton();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectAttributeDropDown("Category");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectSearchFieldDropDown("StreetLight");
            equipmentInventoryPage.GeozoneTreeMainPanel.ClickSearchButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            
            Step("23. Wait for the search done, then press 'Filter results on the map'");
            equipmentInventoryPage.GeozoneTreeMainPanel.SearchResultsGeozonePanel.ClickMapFilterButton();
            equipmentInventoryPage.GeozoneTreeMainPanel.SearchResultsGeozonePanel.WaitForFilterResultsOnMapTurnedOn();

            Step("24. Verify The cluster is updated accordingly");
            Step(" - The number of device: 1");
            Step(" - A tooltip displays with 2 rows when mouse overs:");
            Step("  + 'Device Cluster'");
            Step("  + '1 devices'");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            clusterName = equipmentInventoryPage.Map.GetDeviceNameGL();
            deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("[SC-1783] 24. Verify The cluster is updated accordingly (The number of device: 1)", "1", cluster.DeviceCount);
            VerifyEqual("24. Verify A tooltip displays: Device Cluster", "Device Cluster", clusterName);
            VerifyEqual("[SC-1783] 24. Verify A tooltip displays: 1 devices", "1 devices", deviceCount);

            Step("25. Press the cluster on the map");
            equipmentInventoryPage.Map.SelectDeviceGL(longitude, latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();

            Step("26. Verify The table contains only Streetlight devices");
            clusterDevices = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("[SC-1783] 26. Verify The table contains only Streetlight devices", new List<string> { streetlight }, clusterDevices);
            equipmentInventoryPage.Map.DeviceClusterPopupPanel.ClickCloseButton();
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisappeared();

            Step("27. Select the 'Switch Device' option in Category combobox then press Search button");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectSearchFieldDropDown("Switch Device");
            equipmentInventoryPage.GeozoneTreeMainPanel.ClickSearchButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("28. Verify The cluster is updated accordingly");
            Step(" - The number of device: 2");
            Step(" - A tooltip displays with 2 rows when mouse overs:");
            Step("  + 'Device Cluster'");
            Step("  + '2 devices'");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            clusterName = equipmentInventoryPage.Map.GetDeviceNameGL();
            deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("[SC-1783] 28. Verify The cluster is updated accordingly (The number of device: 2)", "2", cluster.DeviceCount);
            VerifyEqual("28. Verify A tooltip displays: Device Cluster", "Device Cluster", clusterName);
            VerifyEqual("[SC-1783] 28. Verify A tooltip displays: 2 devices", "2 devices", deviceCount);

            Step("29. Press the cluster on the map");
            equipmentInventoryPage.Map.SelectDeviceGL(longitude, latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();

            Step("30. Verify The table contains only Switch devices");
            clusterDevices = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("[SC-1783] 30. Verify The table contains only Switch devices", switches, clusterDevices, false);

            Step("31. Close the left panel");
            equipmentInventoryPage.GeozoneTreeMainPanel.SearchResultsGeozonePanel.ClickBackButton();
            equipmentInventoryPage.GeozoneTreeMainPanel.SearchResultsGeozonePanel.WaitForFilterResultsOnMapTurnedOff();
            equipmentInventoryPage.GeozoneTreeMainPanel.WaitForSearchResultPanelDisappeared();

            Step("32. Verify The cluster is updated accordingly");
            Step(" - The number of device: 3");
            Step(" - A tooltip displays with 2 rows when mouse overs:");
            Step("  + 'Device Cluster'");
            Step("  + '3 devices'");
            equipmentInventoryPage.Map.MoveToDeviceGL(longitude, latitude);
            clusterName = equipmentInventoryPage.Map.GetDeviceNameGL();
            deviceCount = equipmentInventoryPage.Map.GetTooltipDevicesCountGL();
            cluster = equipmentInventoryPage.Map.GetClusterSprite(longitude, latitude);
            VerifyEqual("32. Verify The cluster is updated accordingly (The number of device: 3)", "3", cluster.DeviceCount);
            VerifyEqual("32. Verify A tooltip displays: Device Cluster", "Device Cluster", clusterName);
            VerifyEqual("32. Verify A tooltip displays: 3 devices", "3 devices", deviceCount);

            Step("33. Press the cluster on the map");
            equipmentInventoryPage.Map.SelectDeviceGL(longitude, latitude);
            equipmentInventoryPage.Map.WaitForDeviceClusterPopupPanelDisplayed();

            Step("34. Verify The table contains both Streetlight and Switch devices");
            clusterDevices = equipmentInventoryPage.Map.DeviceClusterPopupPanel.GetListOfColumnData("Name");
            VerifyEqual("34. Verify The table contains both Streetlight and Switch devices", devices, clusterDevices, false);

            try
            {
                DeleteDevicesByGeozone(geozone);
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI-64 - SC-1904 - Geozone tree not expanded when switching apps")]
        public void EI_64()
        {
            var geozone1 = SLVHelper.GenerateUniqueName("GZNEI6401");
            var geozone2 = SLVHelper.GenerateUniqueName("GZNEI6402");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var streetlightPath = string.Format(@"{0}\{1}\{2}", geozone1, geozone2, streetlight);

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a streetlight that belongs to a GeoZone that has at least two ancestors (e.g. GeoZones/France/Paris/Lamp1)");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI64*");
            CreateNewGeozone(geozone1);
            CreateNewGeozone(geozone2, geozone1);
            CreateNewController(controller, geozone2);
            CreateNewDevice(DeviceType.Streetlight, streetlight, controller, geozone2);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory, App.DeviceHistory, App.RealTimeControl);

            Step("1. Go to Equipment Inventory App and select the testing streetlight");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightPath);
           
            Step("2. Using the application switcher, go to Device History or Real Time Control");
            var deviceHistoryPage = equipmentInventoryPage.AppBar.SwitchTo(App.DeviceHistory) as DeviceHistoryPage;

            Step("3. Verify The geozone tree is expaned to the testing geozone and testing streetlight is selected on geozone tree");
            var selectedNodeName = deviceHistoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();            
            VerifyEqual("3. Verify The geozone tree is expaned to the testing geozone", 3, deviceHistoryPage.GeozoneTreeMainPanel.GetExpandedNodesCount());
            VerifyEqual("3. Verify testing streetlight is selected on geozone tree", streetlight, selectedNodeName);

            Step("4. Using the application switcher to switch back Equiment Inventory");
            equipmentInventoryPage = deviceHistoryPage.AppBar.SwitchTo(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("5. Verify The geozone tree is expaned to the testing geozone and the map is zoomed to the testing streetlight");
            selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            var devicesInMap = equipmentInventoryPage.Map.GetSelectedDevices();
            VerifyEqual("5. Verify The geozone tree is expaned to the testing geozone", 3, deviceHistoryPage.GeozoneTreeMainPanel.GetExpandedNodesCount());
            VerifyEqual("5. Verify testing streetlight is selected", streetlight, selectedNodeName);
            VerifyEqual("5. Verify the map is zoomed to the testing streetlight", 1, devicesInMap.Count);

            Step("6. Go to Device History and select the testing streetlight");
            deviceHistoryPage = equipmentInventoryPage.AppBar.SwitchTo(App.DeviceHistory) as DeviceHistoryPage;

            Step("7. Double click on the row of the testing streetlight and select Real Time Control application from the pop-up");
            deviceHistoryPage.GridPanel.DoubleClickGridRecord(streetlight);
            deviceHistoryPage.WaitForSwitcherOverlayPanelDisplayed();
            var realtimeControlPage = deviceHistoryPage.SwitcherOverlayPanel.SwitchToRealtimeControlApp();
            realtimeControlPage.WaitForStreetlightWidgetDisplayed(streetlight);

            Step("8. Verify The geozone tree is expaned to the testing geozone and the map is zoomed to the testing streetlight");
            Step(" o Covered SC-1951 & 1952");
            selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            devicesInMap = equipmentInventoryPage.Map.GetSelectedDevices();
            VerifyEqual("8. Verify The geozone tree is expaned to the testing geozone", 3, deviceHistoryPage.GeozoneTreeMainPanel.GetExpandedNodesCount());
            VerifyEqual("8. Verify testing streetlight is selected", streetlight, selectedNodeName);
            VerifyEqual("8. Verify the map is zoomed to the testing streetlight", 1, devicesInMap.Count);

            try
            {
                DeleteGeozone(geozone1);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_66 Cabinet Controller - Create")]
        public void EI_66()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI66");
            var cabinetController = SLVHelper.GenerateUniqueName("CBN");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var expectedTabList = new List<string> { "Identity", "Inventory", "I/O", "Electricity network" };

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a testing geozone and a testing controller");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI66*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select the testing geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Dropdown Add menu then click Add Device menu item");
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddDeviceMenuItem();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisplayed();

            Step("6. Verify New Device panel appears");
            VerifyEqual("6. Verify New Device panel appears", true, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("7. Verify New Device panel lists following device types: 'BUILDING', 'CAMERA IP', 'CITY OBJECT', 'CONTROLLER DEVICE', 'ELECTRICAL COUNTER', 'ENVIRONMENTAL SENSOR', 'INPUTS', 'NATURE', 'NETWORK COMPONENT', 'OCCUPANCY SENSOR', 'OUTPUTS', 'PARKING PLACE', 'STREETLIGHT', 'SWITCH DEVICE', 'TANK', 'TRANSPORT SIGNAGE', 'VEHICLE', 'VEHICLE CHARGING STATION', 'WASTE CONTAINER', 'WEATHER STATION', 'CABINET CONTROLLER'");
            var expectedDeviceTypeList = DeviceType.GetList();
            var actualDeviceTypeList = equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetListOfDeviceTypes();
            VerifyEqual("7. Verify New Device panel lists following device types as expected", expectedDeviceTypeList, actualDeviceTypeList, false);

            Step("8. Select 'CABINET CONTROLLER'");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectDevice(DeviceType.CabinetController);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.WaitForNewDevicePropertiesSectionDisplayed();

            Step("9. Verify New Device panel switches to controller property content");
            VerifyEqual("9. Verify New Device panel switches to controller property content", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsNewDevicePropertiesSectionDisplayed());

            Step("10. Verify Cabinet Controller property content:");
            Step("  o The first line is Cabinet Controller icon and text 'CABINET CONTROLLER'");
            //Ignore this verify, waiting for confirmation/implement from devs
            //VerifyEqual("10. Verify The first line is Cabinet Controller icon", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.CheckIfDeviceIcon(DeviceType.CabinetController));
            VerifyEqual("10. Verify text is 'CABINET CONTROLLER'", "CABINET CONTROLLER", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNewDeviceText());
            Step("  o Name: 'New device' as default");            
            VerifyEqual("10. Verify An input whose value starts with 'New device'", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNameValue().Contains("New device"));
            VerifyEqual("10. Verify An input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsNameInputReadOnly());
            Step("  o Controller ID: a combobox and selecting value is the testing controller");
            VerifyEqual("10. Verify Controller ID property has a label whose text is 'Controller ID *'", "Controller ID *", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetControllerIdText());
            VerifyEqual("10. Verify An dropdown is selectable", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsControllerIdDropDownSelectable());
            VerifyEqual("10. Verify Controller ID: a combobox and selecting value is the testing controller", controller, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNewDeviceControllerIdValue());
            Step("  o Identifier: empty input");
            VerifyEqual("10. Verify Identifier property has a label whose text is 'Identifier *'", "Identifier *", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetIdentifierText());
            VerifyEqual("[#1398297] 10. Verify An input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsIdentifierInputReadOnly());
            VerifyEqual("10. Verify An input whose value is empty", string.Empty, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetIdentifierValue());            
            Step("  o Type of equipment: a combobox");
            VerifyEqual("10. Verify Equipment type property has a label whose text is 'Type of equipment *'", "Type of equipment *", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetTypeEquipmentText());
            VerifyEqual("10. Verify A dropdown list whose value is empty", "Select a value", equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetNewDeviceTypeOfEquipmentValue());
            VerifyEqual("10. Verify An dropdown is selectable", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsTypeOfEquipmentDropDownSelectable());
            Step("  o 'Position the device' button");
            VerifyEqual("10. Verify 'Position the device' button is visible", true, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsPositionDeviceButtonDisplayed());

            Step("11. Enter an unexisting value into Name, Identifier field");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(cabinetController);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterIdentifierInput(cabinetController);

            Step("12. Select a type of equipment");
            var typeOfEquipments = equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetListOfTypeOfEquipment();
            var typeOfEquipment = typeOfEquipments.PickRandom();
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectTypeOfEquipmentDropDown(typeOfEquipment);

            Step("13. Click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();

            Step("14. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel'");
            VerifyEqual("14. Verify Map recorder panel appears with text 'Position the new device on the map. Click here to cancel.'", "Position the new device on the map. Click here to cancel.", equipmentInventoryPage.Map.GetRecorderText());

            Step("15. Verify New Device panel disappears");
            VerifyEqual("15. Verify New Device panel disappears", false, equipmentInventoryPage.GeozoneEditorPanel.IsNewDevicePanelDisplayed());

            Step("16. Verify Geozone Editor panel disappears");
            VerifyEqual("16. Verify Geozone Editor panel disappears", false, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("17. Specify boundary of the new device by steps: zoom in the map using mouse scroll button; zoom in once more time using zooming bar of the map; drag the map");
            equipmentInventoryPage.Map.DragMapToRandomLocation();
            equipmentInventoryPage.Map.ZoomInToGLLevel(ZoomGLLevel.m50);

            Step("18. Place the cabinet controller on the map");
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            equipmentInventoryPage.CabinetControllerEditorPanel.WaitForTitleHasText();

            Step("19. Verify Map recorder panel disappears");
            VerifyEqual("21. Verify Map recorder panel disappears", false, equipmentInventoryPage.Map.IsRecorderDisplayed());

            Step("20. Verify The cabinet controller is selected on map and geozone tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("Verify The Cabinet Controller '{0}' is selected geozone tree", cabinetController), cabinetController, selectedNodeName);
            VerifyTrue("20. Verify The Cabinet Controller is selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL(), "Selected", "No device selected");

            Step("21. Verify Cabinet Controller Editor panel appears");
            VerifyEqual("21. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("22. Verify Value of Name field is the value entered in New Device panel step");
            VerifyEqual(string.Format("24. Verify Value of Name field is '{0}'", cabinetController), cabinetController, equipmentInventoryPage.CabinetControllerEditorPanel.GetNameValue());

            Step("23. Verify Value of GeoZone is the testing geozone's name");
            VerifyEqual(string.Format("23. Verify Value of GeoZone is '{0}'", geozone), geozone, equipmentInventoryPage.CabinetControllerEditorPanel.GetGeozoneValue());

            Step("24. Verify Value of Latitude field is filled");
            VerifyEqual("24. Verify Value of Latitude is filled", true, !string.IsNullOrEmpty(equipmentInventoryPage.CabinetControllerEditorPanel.GetLatitudeValue()));

            Step("25. Verify Value of Longitude field is filled");
            VerifyEqual("25. Verify Value of Longitude is filled", true, !string.IsNullOrEmpty(equipmentInventoryPage.CabinetControllerEditorPanel.GetLongitudeValue()));

            Step("26. Verify There are 4 tabs in Cabinet Controller Editor panel: 'Identity', 'Inventory', 'I/O', 'Electricity network'");
            var actualTabList = equipmentInventoryPage.CabinetControllerEditorPanel.GetListOfTabsName();
            VerifyEqual("26. Verify There are 4 tabs in Cabinet Controller Editor panelas expected", expectedTabList, actualTabList);

            Step("27. Verify In 'Identity' tab, values of Identifier, Controller ID and Type of equipment fields are the values when creating the device");
            VerifyEqual(string.Format("27. Verify Controller ID field is '{0}'", controller), controller, equipmentInventoryPage.CabinetControllerEditorPanel.GetControllerIdValue());
            VerifyEqual(string.Format("27. Verify Identifer field is '{0}'", cabinetController), cabinetController, equipmentInventoryPage.CabinetControllerEditorPanel.GetIdentifierValue());
            VerifyEqual(string.Format("27. Verify Type Of Equipment field is '{0}'", typeOfEquipment), typeOfEquipment, equipmentInventoryPage.CabinetControllerEditorPanel.GetTypeOfEquipmentValue());

            var notedName = equipmentInventoryPage.CabinetControllerEditorPanel.GetNameValue();
            var notedGeozoneName = equipmentInventoryPage.CabinetControllerEditorPanel.GetGeozoneValue();
            var notedLatitude = equipmentInventoryPage.CabinetControllerEditorPanel.GetLatitudeValue();
            var notedLongtitude = equipmentInventoryPage.CabinetControllerEditorPanel.GetLongitudeValue();
            var notedControllerId = equipmentInventoryPage.CabinetControllerEditorPanel.GetControllerIdValue();
            var notedIdentifier = equipmentInventoryPage.CabinetControllerEditorPanel.GetIdentifierValue();
            var notedTypeOfEquipment = equipmentInventoryPage.CabinetControllerEditorPanel.GetTypeOfEquipmentValue();

            Step("28. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("29. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("30. Browse to the testing geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("31. Verify The newly-created cabinet controller is present in the geozone");
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.CabinetController);
            VerifyEqual(string.Format("31. Verify The newly-created cabinet controller '{0}' is present in geozone '{1}'", cabinetController, geozone), true, subNodesList.Exists(p => p.Equals(cabinetController)));

            Step("32. Select the created cabinet controller");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cabinetController);

            Step("33. Verify Cabinet Controller Editor panel appears");
            VerifyEqual("33. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("34. Verify Cabinet Controller Editor panel displays the same values of Name, GeoZone, Latitude, Longitude, Controller ID, Identifier, Type of equipment host name as before refreshing browser");
            VerifyDeviceBasicInfo(equipmentInventoryPage, notedName, notedGeozoneName);
            VerifyDeviceLatitudeLongitude(equipmentInventoryPage, notedLatitude, notedLongtitude);
            VerifyDeviceIdentity(equipmentInventoryPage, notedControllerId, notedIdentifier, notedTypeOfEquipment);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_67 Cabinet Controller - Create - Validation")]
        public void EI_67()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI67");
            var cabinetController = SLVHelper.GenerateUniqueName("CBN");
            var cabinetController2nd = SLVHelper.GenerateUniqueName("CBN02");
            var controller = SLVHelper.GenerateUniqueName("CTRL");

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a testing geozone containing a controller");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI67*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select the testing geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("4. Verify Geozone Editor panel appears");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("4. Verify Geozone Editor panel appears", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("5. Dropdown Add menu then click Add Device menu item");
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddDeviceMenuItem();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisplayed();

            Step("6. Select 'CABINET CONTROLLER'");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectDevice(DeviceType.CabinetController);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.WaitForNewDevicePropertiesSectionDisplayed();

            Step("7. Clear Name field then click 'Position the device' button");
            VerifyEqual("[#1398297] 7. Verify Identifier input is editable", false, equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.IsIdentifierInputReadOnly());
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(string.Empty);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("8. Verify A dialog with title 'Warning' and message 'Please enter a device name.' appears");
            VerifyEqual("8. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("8. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("8. Verify dialog message is 'Please enter a device name.'", "Please enter a device name.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("9. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("10. Verify The dialog disappears");
            VerifyEqual("10. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("11. Enter the Name field then click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(cabinetController);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("12. Verify A dialog with title 'Warning' and message 'Please enter 'Identifier' property.' appears");
            VerifyEqual("12. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("12. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("12. Verify dialog message is 'Please enter 'Identifier' property.'", "Please enter 'Identifier' property.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("13. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("14. Verify The dialog disappears");
            VerifyEqual("14. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("15. Enter the Identifier field then click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterIdentifierInput(cabinetController);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("16. Verify A dialog with title 'Warning' and message 'Please enter 'Type of equipment' property.' appears");
            VerifyEqual("16. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("16. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("16. Verify dialog message is 'Please enter 'Type of equipment' property.'", "Please enter 'Type of equipment' property.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("17. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("18. Verify The dialog disappears");
            VerifyEqual("18. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("19. Select the Type of equipment field; update Name field to an existing controller's name in the geozone then click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(controller);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("20. Verify A dialog with title 'Warning' and message 'This device name already exists!' appears");
            VerifyEqual("20. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("20. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("20. Verify dialog message is 'This device name already exists!'", "This device name already exists!", equipmentInventoryPage.Dialog.GetMessageText());

            Step("21. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("22. Verify The dialog disappears");
            VerifyEqual("22. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("23. Update the Name field to an available name, then complete the creating process");            
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(cabinetController);
            var typeOfEquipments = equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.GetListOfTypeOfEquipment();
            var typeOfEquipment = typeOfEquipments.PickRandom();
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectTypeOfEquipmentDropDown(typeOfEquipment);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();
            equipmentInventoryPage.Map.DragMapToRandomLocation();
            equipmentInventoryPage.Map.ZoomInToGLLevel(ZoomGLLevel.m30);
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForRecorderDisappeared();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("24. Verify The new Cabinet Controller appear on the map and geozone tree.");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("24. Verify The Cabinet Controller '{0}' is selected geozone tree", cabinetController), cabinetController, selectedNodeName);
            VerifyTrue("24. Verify The Cabinet Controller is selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL(), "Selected", "No device selected");

            Step("25. Select the geozone tree and dropdown Add menu then click Add Device menu item");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddDeviceMenuItem();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisplayed();

            Step("26. Select 'CABINET CONTROLLER'");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectDevice(DeviceType.CabinetController);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.WaitForNewDevicePropertiesSectionDisplayed();

            Step("27. Enter all the available values for all fields and click 'Position the device' button");
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterNameInput(cabinetController2nd);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.EnterIdentifierInput(cabinetController2nd);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.SelectTypeOfEquipmentDropDown(typeOfEquipment);
            equipmentInventoryPage.GeozoneEditorPanel.NewDevicePanel.ClickPositionDeviceButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForNewDevicePanelDisappeared();
            equipmentInventoryPage.Map.WaitForRecorderDisplayed();
            equipmentInventoryPage.Map.ClickRandomPoint();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("28. Verify A dialog with title 'Error' and message 'GeoZone '[geozone's name]' contains a cabinet controller; creating another cabinet controller inside a GeoZone that already contains one is not allowed. Please check '[geozone's name]' before creating '[New cabinet controller's name]'.' appears");
            var message = string.Format("GeoZone '{0}' contains a cabinet controller; creating another cabinet controller inside a GeoZone that already contains one is not allowed. Please check '{0}' before creating '{1}'.", geozone, cabinetController2nd);
            VerifyEqual("28. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("28. Verify dialog title is 'Error'", "Error", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("28. Verify dialog message as expected", message, equipmentInventoryPage.Dialog.GetMessageText());

            Step("29. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("30. Verify The dialog disappears");
            VerifyEqual("30. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("31. Verify Geozone Editor panel appears back");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("31. Verify Geozone Editor panel appears again", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            Step("32. Select the geozone tree and dropdown Add menu then click Add Geozone menu item");
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddButton();
            equipmentInventoryPage.GeozoneEditorPanel.ClickAddGeozoneMenuItem();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("33. Verify A dialog with title 'Error' and message 'GeoZone [geozone's name]' contains a cabinet controller; creating a new GeoZone inside a GeoZone that already contains a cabinet controller is not allowed. Please check '[geozone's name]' before creating 'New GeoZone'.' appears");
            message = string.Format("GeoZone '{0}' contains a cabinet controller; creating a new GeoZone inside a GeoZone that already contains a cabinet controller is not allowed. Please check '{0}' before creating 'New GeoZone'.", geozone);
            VerifyEqual("33. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("33. Verify dialog title is 'Error'", "Error", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("33. Verify dialog message as expected", message, equipmentInventoryPage.Dialog.GetMessageText());

            Step("34. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("35. Verify The dialog disappears");
            VerifyEqual("35. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("36. Verify Geozone Editor panel appears back");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            VerifyEqual("36. Verify Geozone Editor panel appears again", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_68 Cabinet Controller - Update")]
        public void EI_68()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI68");
            var cabinetController = SLVHelper.GenerateUniqueName("CBN");
            var controller1 = SLVHelper.GenerateUniqueName("CTRL01");
            var controller2 = SLVHelper.GenerateUniqueName("CTRL02");           
            var cabinetControllerPath = geozone + @"\" + cabinetController;
            var typeOfEquipment = Settings.CabinetControllerEquipmentTypes.PickRandom().Key;
            
            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a geozone containing 2 controllers for testing.");
            Step(" - Create a Cabinet Controller connecting to Controller 01.");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI68*");
            CreateNewGeozone(geozone);
            CreateNewController(controller1, geozone);
            CreateNewController(controller2, geozone);
            CreateNewDevice(DeviceType.CabinetController, cabinetController, controller1, geozone, typeOfEquipment);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select the Cabinet Controller");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cabinetControllerPath);

            Step("4. Note tabs, expandable sections and all values in the editor of cabinet controller, both editable and readonly ones");
            var notedTabs = equipmentInventoryPage.CabinetControllerEditorPanel.GetListOfTabsName();
            var notedGroups = equipmentInventoryPage.CabinetControllerEditorPanel.GetListOfGroupsName();            

            Step("5. Change values of all editable fields (Controller ID is updated to Controller 02) except Type of equipment");
            equipmentInventoryPage.CabinetControllerEditorPanel.SelectControllerIdDropDown(controller2);
            var notedReadOnlyProperties = equipmentInventoryPage.CabinetControllerEditorPanel.GetReadOnlyPropertiesValue();            
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterEditablePropertiesValue("Controller ID *", "Type of equipment *", "Picture file path");
            var notedEditableProperties = equipmentInventoryPage.CabinetControllerEditorPanel.GetEditablePropertiesValue();

            Step("6. Click Save");
            equipmentInventoryPage.CabinetControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

            Step("7. Verify Cabinet Controller Editor panel disappears");
            VerifyEqual("7. Verify Cabinet Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());            

            Step("8. Verify There is no any node in geozone being selected");
            VerifyEqual("8. Verify There is no any node in geozone being selected", false, equipmentInventoryPage.GeozoneTreeMainPanel.HasSelectedNode());

            Step("9. Select the Cabinet Controller again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cabinetController);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("10. Verify Cabinet Controller Editor panel appears");
            VerifyEqual("10. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("11. Verify Tabs, sections and readonly values are remained unchanged against step #5");
            var tabs = equipmentInventoryPage.CabinetControllerEditorPanel.GetListOfTabsName();
            var groups = equipmentInventoryPage.CabinetControllerEditorPanel.GetListOfGroupsName();
            var readOnlyProperties = equipmentInventoryPage.CabinetControllerEditorPanel.GetReadOnlyPropertiesValue();           
            VerifyEqual("11. Verify Tabs is remained", notedTabs, tabs);
            VerifyEqual("11. Verify Sections is remained", notedGroups, groups);
            VerifyEqual("11. Verify Readonly values are remained", notedReadOnlyProperties, readOnlyProperties);
            
            Step("12. Verify Editable values are the new values (values after step #6)");
            var editableProperties = equipmentInventoryPage.CabinetControllerEditorPanel.GetEditablePropertiesValue();
            VerifyEqual(string.Format("[{0}] 12. Verify Editable values are the new values (values after step #6)", typeOfEquipment), notedEditableProperties, editableProperties);
            
            Step("13. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();
           
            Step("14. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("15. Browse to the Cabinet Controller again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cabinetControllerPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("16. Verify Cabinet Controller Editor panel appears");
            VerifyEqual("16. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("17. Verify Tabs, sections and readonly values are remained unchanged against step #5");
            tabs = equipmentInventoryPage.CabinetControllerEditorPanel.GetListOfTabsName();
            groups = equipmentInventoryPage.CabinetControllerEditorPanel.GetListOfGroupsName();
            var onlyPropertiesAfterRefreshed = equipmentInventoryPage.CabinetControllerEditorPanel.GetReadOnlyPropertiesValue();
            VerifyEqual("17. Verify Tabs is remained", notedTabs, tabs);
            VerifyEqual("17. Verify Sections is remained", notedGroups, groups);
            VerifyEqual("17. Verify Readonly values are remained", notedReadOnlyProperties, onlyPropertiesAfterRefreshed);

            Step("18. Verify Editable values are remained to be the new values (values after step #6)");
            var editablePropertiesAfterRefreshed = equipmentInventoryPage.CabinetControllerEditorPanel.GetEditablePropertiesValue();
            VerifyEqual(string.Format("[{0}] 18. Verify Editable values are remained to be the new values (values after step #6)", typeOfEquipment), editableProperties, editableProperties);

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_69 Cabinet Controller - Update - Validation")]
        public void EI_69()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI69");
            var cabinetController = SLVHelper.GenerateUniqueName("CBN");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var cabinetControllerPath = geozone + @"\" + cabinetController;

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - 'Enable device location' option for Equipment Inventory app in Back Office must be checked");
            Step(" - Create a testing geozone with a cabinet controller");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI69*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.CabinetController, cabinetController, controller, geozone);

            var loginPage = Browser.OpenBackOfficeApp();
            var backOfficePage = loginPage.LoginAsValidUserToBackOffice(Settings.Users["admin"].Username, Settings.Users["admin"].Password);
            backOfficePage.BackOfficeOptionsPanel.SelectConfiguration(App.EquipmentInventory);
            var firstDeviceLocationValue = backOfficePage.BackOfficeDetailsPanel.GetEquipmentDeviceLocationValue();
            backOfficePage.BackOfficeDetailsPanel.TickEquipmentDeviceLocationCheckbox(true);
            backOfficePage.BackOfficeDetailsPanel.ClickSaveButton();
            backOfficePage.WaitForPreviousActionComplete();

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var desktopPage = Browser.NavigateToLoggedInCMS();
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select the Cabinet Controller");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cabinetControllerPath);

            Step("4. Verify Cabinet Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Clear Name field");
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterNameInput(string.Empty);

            Step("6. Click Save");
            equipmentInventoryPage.CabinetControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("7. Verify A dialog with title 'Warning' and message 'Please enter a device name.' appears");
            VerifyEqual("7. Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("7. Verify dialog title is 'Warning'", "Warning", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("7. Verify dialog message is 'Please enter a device name.'", "Please enter a device name.", equipmentInventoryPage.Dialog.GetMessageText());

            Step("8. Click Ok");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("9. Verify The dialog disappears");
            VerifyEqual("9. Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("10. Verify Cabinet Controller Editor panel is still displayed");
            VerifyEqual("10. Verify Cabinet Controller Editor panel still displayed", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("11. Verify Cabinet Controller A is still selected in geozone tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("11. Verify The Cabinet Controller '{0}' is selected geozone tree", cabinetController), cabinetController, selectedNodeName);

            Step("12. Verify Cabinet Controller is still selected on map");
            VerifyTrue("12. Verify Cabinet Controller is still selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL(), "Selected", "No device selected");

            Step("13. Enter any value into Name field");
            var newCabinetController = SLVHelper.GenerateUniqueName("SLEI69");
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterNameInput(newCabinetController);

            Step("14. Click Save");
            equipmentInventoryPage.CabinetControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("15. Verify Cabinet Controller Editor disappears");
            VerifyEqual("15. Verify Cabinet Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("16. Verify There is not any dialog appearing");
            VerifyEqual("16. Verify There is not any dialog appearing", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("17. Select Cabinet Controller again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newCabinetController);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("18. Verify Cabinet Controller Editor panel appears");
            VerifyEqual("18. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("19. Verify Value of Name field are the new value");
            VerifyEqual("19. Verify Value of Name field are the new value", newCabinetController, equipmentInventoryPage.CabinetControllerEditorPanel.GetNameValue());

            Step("20. Note current latitude and longitude values");
            var latitude = equipmentInventoryPage.CabinetControllerEditorPanel.GetLatitudeValue();
            var longitude = equipmentInventoryPage.CabinetControllerEditorPanel.GetLongitudeValue();

            Step("21. Clear Latitude field");
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterLatitudeInput(string.Empty);

            Step("22. Click Save");
            equipmentInventoryPage.CabinetControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("23. Verify Cabinet Controller Editor panel disappears");
            VerifyEqual("23. Verify Cabinet Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("24. Verify Cabinet Controller is no longer selected in geozone tree");
            selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyTrue(string.Format("24. Verify The Cabinet Controller '{0}' is no longer selected geozone tree", cabinetController), cabinetController != selectedNodeName, cabinetController, selectedNodeName);

            Step("25. Verify Cabinet Controller is no longer selected on map");
            VerifyTrue("25. Verify Cabinet Controller is no longer selected on map", equipmentInventoryPage.Map.HasSelectedDevicesInMapGL() == false, "No device selected", "Selected");

            Step("26. Select Cabinet Controller again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newCabinetController);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("27. Verify Cabinet Controller Editor panel appears");
            VerifyEqual("27. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("28. Verify Value of latitude and longitude fields are remained and equal to the value noted at step #20");
            VerifyEqual(string.Format("28. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.CabinetControllerEditorPanel.GetLatitudeValue());            
            VerifyEqual(string.Format("28. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.CabinetControllerEditorPanel.GetLongitudeValue());

            Step("29. Clear Longitude field");
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterLongitudeInput(string.Empty);

            Step("30. Click Save");
            equipmentInventoryPage.CabinetControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("31. Verify Cabinet Controller Editor panel disappears");
            VerifyEqual("31. Verify Cabinet Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("32. Select Cabinet Controller again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newCabinetController);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("33. Verify Cabinet Controller Editor panel appears");
            VerifyEqual("33. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("34. Verify Value of latitude and longitude fields are remained the same with the value noted at step #20");
            VerifyEqual(string.Format("34. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.CabinetControllerEditorPanel.GetLatitudeValue());            
            VerifyEqual(string.Format("34. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.CabinetControllerEditorPanel.GetLongitudeValue());

            Step("35. Clear both Latitude and Longitude fields");
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterLatitudeInput(string.Empty);
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterLongitudeInput(string.Empty);

            Step("36. Click Save");
            equipmentInventoryPage.CabinetControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("37. Verify Cabinet Controller Editor panel disappears");
            VerifyEqual("37. Verify Cabinet Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("38. Select Cabinet Controller again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newCabinetController);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("39. Verify Cabinet Controller Editor panel appears");
            VerifyEqual("39. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("40. Verify Values of latitude and longitude fields are remained the same with the values noted at step #20");
            VerifyEqual(string.Format("40. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.CabinetControllerEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("40. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.CabinetControllerEditorPanel.GetLongitudeValue());

            Step("41. Enter values of alphanumeric/non-alphanumeric into Latitude and Longitude fields");
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterLatitudeInput(SLVHelper.GenerateString());
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterLongitudeInput(SLVHelper.GenerateString());

            Step("42. Click Save");
            equipmentInventoryPage.CabinetControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("43. Verify Cabinet Controller Editor panel disappears");
            VerifyEqual("43. Verify Cabinet Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("44. Select Cabinet Controller again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newCabinetController);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("45. Verify Cabinet Controller Editor panel appears");
            VerifyEqual("45. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("46. Verify Values of latitude and longitude fields are remained the same with the values noted at step #20");
            VerifyEqual(string.Format("46. Verify Value of latitude field is remained the same with the value '{0}'", latitude), latitude, equipmentInventoryPage.CabinetControllerEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("46. Verify Value of longitude field is remained the same with the value '{0}'", longitude), longitude, equipmentInventoryPage.CabinetControllerEditorPanel.GetLongitudeValue());

            Step("47. Increase 1 the last number of Latitude and Longitude fields");
            var newLatitude = IncreaseLatLong(latitude);
            var newLongitude = IncreaseLatLong(longitude);
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterLatitudeInput(newLatitude);
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterLongitudeInput(newLongitude);
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterLongitudeInput(newLongitude); //Re-enter 2nd time for auto-filled input issue.

            Step("48. Click Save");
            equipmentInventoryPage.CabinetControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForEditorPanelDisappeared();

            Step("49. Verify Cabinet Controller Editor panel disappears");
            VerifyEqual("49. Verify Cabinet Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("50. Select Cabinet Controller again");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(newCabinetController);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("51. Verify Cabinet Controller Editor panel appears");
            VerifyEqual("51. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("52. Verify Values of latitude and longitude fields are the new values");
            var actualLatitude = equipmentInventoryPage.CabinetControllerEditorPanel.GetLatitudeValue();
            var actualLongitude = equipmentInventoryPage.CabinetControllerEditorPanel.GetLongitudeValue();
            VerifyTrue(string.Format("52. Verify Value of latitude field is changed '{0}' to '{1}'", latitude, newLatitude), latitude != actualLatitude, actualLatitude, latitude);
            VerifyTrue(string.Format("52. Verify Value of longitude field is changed {0}' to '{1}'", longitude, newLongitude), longitude != actualLongitude, actualLongitude, longitude);

            Step("53. Refresh browser without saving");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("54. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("55. Browse to and select Cabinet Controller");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(string.Format(@"{0}\{1}", geozone, newCabinetController));

            Step("56. Verify Cabinet Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("56. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("57. Verify Value of name, latitude, longitude are its last updated values");
            VerifyEqual(string.Format("57. Verify Value of latitude field is '{0}'", actualLatitude), actualLatitude, equipmentInventoryPage.CabinetControllerEditorPanel.GetLatitudeValue());
            VerifyEqual(string.Format("57. Verify Value of longitude field is {0}'", actualLongitude), actualLongitude, equipmentInventoryPage.CabinetControllerEditorPanel.GetLongitudeValue());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_71 Cabinet Controller - Update - Per Type of Equipment")]
        public void EI_71()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI71");
            var cabinetController = SLVHelper.GenerateUniqueName("CBN");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var cabinetControllerPath = geozone + @"\" + cabinetController;

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a testing geozone with a Cabinet Controller connecting to a controller");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI71*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.CabinetController, cabinetController, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select the cabinet controller");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cabinetControllerPath);

            Step("4. Verify Cabinet Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Get list of 'Type of Equipment' and for each type, do following steps");
            var typeOfEquipmentList = equipmentInventoryPage.CabinetControllerEditorPanel.GetListOfEquipmentTypes();
            foreach (var equipmentType in typeOfEquipmentList)
            {
                Step("6. Select another equipment type from Equipment Type dropdown");
                Info(string.Format("Select equipment type '{0}'", equipmentType));
                equipmentInventoryPage.CabinetControllerEditorPanel.SelectTypeOfEquipmentDropDown(equipmentType);

                Step("7. Click Save");
                equipmentInventoryPage.CabinetControllerEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("8. Verify Control Editor panel disappears");
                VerifyEqual("8. Verify Cabinet Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("9. Select Cabinet Controller again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cabinetController);
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

                Step("10. Verify Cabinet Controller Editor panel appears back");
                VerifyEqual("10. Verify Cabinet Controller Editor panel appears back", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("11. Note tabs, expandable sections and all values in the editor of the Cabinet Controller, both editable and readonly ones");
                var notedTabs = equipmentInventoryPage.CabinetControllerEditorPanel.GetListOfTabsName();
                var notedGroups = equipmentInventoryPage.CabinetControllerEditorPanel.GetListOfGroupsName();

                Step("12. Change values of all editable fields except 'equipment type'");
                equipmentInventoryPage.CabinetControllerEditorPanel.EnterEditablePropertiesValue("Controller ID *", "Type of equipment *", "Identifier *", "Picture file path");
                var dicNotedReadOnlyProperties = equipmentInventoryPage.CabinetControllerEditorPanel.GetReadOnlyPropertiesValue();
                var dicNotedEditableProperties = equipmentInventoryPage.CabinetControllerEditorPanel.GetEditablePropertiesValue();

                Step("13. Click Save");
                equipmentInventoryPage.CabinetControllerEditorPanel.ClickSaveButton();
                equipmentInventoryPage.WaitForPreviousActionComplete();
                equipmentInventoryPage.WaitForDeviceEditorPanelDisappeared();

                Step("14. Verify Control Editor panel disappears");
                VerifyEqual("14. Verify Cabinet Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("15. Verify There is no any node in geozone being selected");
                VerifyEqual("15. Verify There is no any node in geozone being selected", false, equipmentInventoryPage.GeozoneTreeMainPanel.HasSelectedNode());

                Step("16. Select the Cabinet Controller again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cabinetController);

                Step("17. Verify Cabinet Controller Editor panel appears");
                VerifyEqual("17. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("18. Verify Tabs, sections and readonly values are remained unchanged against step #11");
                var tabs = equipmentInventoryPage.CabinetControllerEditorPanel.GetListOfTabsName();
                var groups = equipmentInventoryPage.CabinetControllerEditorPanel.GetListOfGroupsName();
                var dicReadOnlyProperties = equipmentInventoryPage.CabinetControllerEditorPanel.GetReadOnlyPropertiesValue();
                var dicEditableProperties = equipmentInventoryPage.CabinetControllerEditorPanel.GetEditablePropertiesValue();
                VerifyEqual("18. Verify Tabs is remained", notedTabs, tabs);
                VerifyEqual("18. Verify Sections is remained", notedGroups, groups);
                VerifyEqual("18. Verify Readonly values are remained", dicNotedReadOnlyProperties, dicReadOnlyProperties);

                Step("19. Verify Editable values are the new values (values after step #12)");
                VerifyEqual(string.Format("[{0}] 19. Verify Editable values are the new values", equipmentType), dicNotedEditableProperties, dicEditableProperties);

                Step("20. Refresh browser");
                Step("21. Go to Equipment Inventory again");
                desktopPage = Browser.RefreshLoggedInCMS();
                equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

                Step("22. Browse to the Cabinet Controller again");
                equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cabinetControllerPath);
                equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

                Step("23. Verify Cabinet Controller Editor panel appears");
                VerifyEqual("23. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

                Step("24. Verify Tabs, sections and readonly values are remained unchanged against step #11");
                tabs = equipmentInventoryPage.CabinetControllerEditorPanel.GetListOfTabsName();
                groups = equipmentInventoryPage.CabinetControllerEditorPanel.GetListOfGroupsName();
                var dicReadOnlyPropertiesAfterRefreshed = equipmentInventoryPage.CabinetControllerEditorPanel.GetReadOnlyPropertiesValue();
                VerifyEqual("24. Verify Tabs is remained", notedTabs, tabs);
                VerifyEqual("24. Verify Sections is remained", notedGroups, groups);
                VerifyEqual("24. Verify Readonly values are remained", dicNotedReadOnlyProperties, dicReadOnlyPropertiesAfterRefreshed);

                Step("25. Verify Editable values are remained to be the new values (values after step #12)");
                var dicEditablePropertiesAfterRefreshed = equipmentInventoryPage.CabinetControllerEditorPanel.GetEditablePropertiesValue();
                VerifyEqual(string.Format("[{0}] 25. Verify Editable values are the new values", equipmentType), dicNotedEditableProperties, dicEditablePropertiesAfterRefreshed);

                equipmentInventoryPage.CabinetControllerEditorPanel.SelectTab("Identity");
            }

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_72 Cabinet Controller - Delete")]
        public void EI_72()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI72");
            var cabinetController = SLVHelper.GenerateUniqueName("CBN");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var cabinetControllerPath = geozone + @"\" + cabinetController;

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a geozone containing a cabinet controller");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI72*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.CabinetController, cabinetController, controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("3. Select the testing cabinet controller");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cabinetControllerPath);

            Step("4. Verify Cabinet Controller Editor panel appears");
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            VerifyEqual("4. Verify Cabinet Controller Editor panel appears", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("5. Click Remove icon button");
            equipmentInventoryPage.CabinetControllerEditorPanel.ClickDeleteButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("6. Verify A dialog with message 'Would you like to delete {{Cabinet Controller's name}} equipment ?' appears");
            var expectedMessage = string.Format("Would you like to delete {0} equipment ?", cabinetController);
            VerifyEqual("Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual(string.Format("6. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("7. Click No");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("8. Verify The dialog disappears");
            VerifyEqual("Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("9. Verify Cabinet Controller Editor panel remains displaying");
            VerifyEqual("9. Verify Cabinet Controller Editor panel remains displaying", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("10. Verify Cabinet Controller is still remained selected in Geozone Tree");
            var selectedNodeName = equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName();
            VerifyEqual(string.Format("10. Verify Cabinet Controller '{0}' is still remained selected in Geozone Tree", cabinetController), cabinetController, selectedNodeName);

            Step("11. Click Remove icon button again");
            equipmentInventoryPage.CabinetControllerEditorPanel.ClickDeleteButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("12. Verify A dialog with message 'Would you like to delete {{Cabinet Controller's name}} equipment ?' appears again");
            VerifyEqual("Verify A dialog appears", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual(string.Format("12. Verify dialog message is '{0}'", expectedMessage), expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("13. Click Yes");
            equipmentInventoryPage.Dialog.ClickYesButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.WaitForHeaderMessageDisappeared();

            Step("14. Verify The dialog disappears");
            VerifyEqual("Verify The dialog disappears", false, equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("15. Verify Cabinet Controller Editor panel disappears");
            VerifyEqual("15. Verify Cabinet Controller Editor panel disappears", false, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("16. Verify Cabinet Controller is no longer present in its parent geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            var subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.CabinetController);
            VerifyEqual(string.Format("16. Verify Cabinet Controller '{0}' is no longer present in its parent geozone '{1}'", cabinetController, geozone), false, subNodesList.Exists(p => p.Equals(cabinetController)));

            Step("17. Refresh browser");
            desktopPage = Browser.RefreshLoggedInCMS();

            Step("18. Go to Equipment Inventory again");
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("19. Browse to the Cabinet Controller");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);

            Step("20. Verify Cabinet Controller is not present in its parent geozone");
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            subNodesList = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.CabinetController);
            VerifyEqual(string.Format("20. Verify Cabinet Controller '{0}' is not present in its parent geozone '{1}'", cabinetController, geozone), false, subNodesList.Exists(p => p.Equals(cabinetController)));

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_77 Cabinet Controller - Export a cabinet controller to csv file")]
        public void EI_77()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI77");
            var cabinetController = SLVHelper.GenerateUniqueName("CBN");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var cabinetControllerPath = geozone + @"\" + cabinetController;
            var typeOfEquipment = Settings.CabinetControllerEquipmentTypes.PickRandom();

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a geozone containing a cabinet controller and take note the value of");
            Step("    + General information: ");
            Step("        - Name");
            Step("        - Geozone");
            Step("        - Latitude");
            Step("        - Longitude");
            Step("    + Idenity tab");
            Step("        - Controller Id");
            Step("        - Identifier");
            Step("        - Type of equipment");
            Step("        - Unique address");
            Step("    + Inventory tab");
            Step("        - Location");
            Step("            + Address 1");
            Step("            + Address 2");
            Step("            + City");
            Step("    + I/O tab");
            Step("        - Dimming group");
            Step("    + Electricity network tab");
            Step("        - Energy supplier");
            Step("        - Network type");
            Step("        - Supply voltage");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI77*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateNewDevice(DeviceType.CabinetController, cabinetController, controller, geozone, typeOfEquipment.Key);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cabinetControllerPath);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();
            var notedGeoZonePath = string.Format("{0}/{1}", Settings.RootGeozoneName, geozone);
            var notedLat = decimal.Parse(equipmentInventoryPage.CabinetControllerEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim()).ToString();
            var notedLng = decimal.Parse(equipmentInventoryPage.CabinetControllerEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim()).ToString();
            var notedTypeOfEquipment = equipmentInventoryPage.CabinetControllerEditorPanel.GetTypeOfEquipmentValue();
            var notedUniqueAddress = SLVHelper.GenerateMACAddress();
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterUniqueAddressInput(notedUniqueAddress);

            equipmentInventoryPage.CabinetControllerEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.CabinetControllerEditorPanel.ExpandGroupsActiveTab();
            var notedAddress1 = SLVHelper.GenerateString(7);
            var notedAddress2 = SLVHelper.GenerateString(8);
            var notedCity = SLVHelper.GenerateString(9);
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterAddress1Input(notedAddress1);
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterAddress2Input(notedAddress2);
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterCityInput(notedCity);

            equipmentInventoryPage.CabinetControllerEditorPanel.SelectTab("I/O");
            equipmentInventoryPage.CabinetControllerEditorPanel.SelectRandomDimmingGroupDropDown();
            var notedDimmingGroup = equipmentInventoryPage.CabinetControllerEditorPanel.GetDimmingGroupValue();

            equipmentInventoryPage.CabinetControllerEditorPanel.SelectTab("Electricity network");
            equipmentInventoryPage.CabinetControllerEditorPanel.ExpandGroupsActiveTab();
            var notedNetworkType = SLVHelper.GenerateString(7);
            equipmentInventoryPage.CabinetControllerEditorPanel.SelectRandomEnergySupplierDropDown();
            equipmentInventoryPage.CabinetControllerEditorPanel.EnterNetworkTypeInput(notedNetworkType);
            equipmentInventoryPage.CabinetControllerEditorPanel.SelectRandomSupplierVoltageDropDown();
            var notedEnergySupplier = equipmentInventoryPage.CabinetControllerEditorPanel.GetEnergySupplierValue();
            var notedSupplyVoltage = equipmentInventoryPage.CabinetControllerEditorPanel.GetSupplyVoltageValue();
            equipmentInventoryPage.CabinetControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("3. Select the testing geozone, press 'More' button and select the option 'Export'");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.Export();

            Step("4. Verify Export panel appears");
            VerifyEqual("4 Verify The Exporter panel displays", true, equipmentInventoryPage.GeozoneEditorPanel.IsExportPanelDisplayed());

            Step("5. Select 'Cabinet Controller' only, then press Next button");
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.UncheckAllDeviceTypes();
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.CheckDeviceTypes(DeviceType.CabinetController.Value);
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.ClickNextButton();
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.WaitForPropertiesListPanelDisplayed();
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.WaitForSaveButtonDisplayed();
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.UncheckAllRemoteControlProperties();

            Step("6. In Remote Control section, select:");
            Step(" o Controller ID");
            Step(" o Dimming group");
            Step(" o Energy supplier");
            Step(" o GeoZone Path");
            Step(" o Identifier");
            Step(" o Latitude");
            Step(" o Longitude");
            Step(" o Name");
            Step(" o Type of equipment");
            Step(" o Unique address");
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.CheckRemoteControlProperties("Controller ID", "Dimming group", "Energy supplier", "GeoZone Path", "Identifier", "Latitude", "Longitude", "Name", "Type of equipment", "Unique address");

            Step("7. In Others section, select:");
            Step(" o Address 1");
            Step(" o Address 2");
            Step(" o City");
            Step(" o Network type");
            Step(" o Supply voltage");
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.CheckOthersProperties("Address 1", "Address 2", "City", "Network type", "Supply voltage");

            Step("8. Press 'Save' button, wait for the system completing the process, then press Download button");
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.ClickSaveButton();
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.WaitForDownloadButtonDisplayed();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            SLVHelper.DeleteAllFilesByPattern(_exportedFilePattern);
            equipmentInventoryPage.GeozoneEditorPanel.ExportPanel.ClickDownloadButton();
            SLVHelper.SaveDownloads();

            Step("9. Verify A csv file is downloaded to local");
            VerifyEqual("9. Verify The csv file is downloaded to local(with name format 'Equipements*.csv')", true, SLVHelper.CheckFileExists(_exportedFilePattern));

            Step("10. Open the csv file");
            var tblCSV = SLVHelper.BuildDataTableFromLastDownloadedCSV(_exportedFilePattern);
            var expectedHeaders = new List<string> { "address", "location.streetdescription", "location.city", "controllerStrId", "dimmingGroupName", "provider.name", "geoZone path", "idOnController", "lat", "lng", "name", "network.type", "network.supplyvoltage", "model", "macAddress" };
            var actualHeaders = tblCSV.Columns.Cast<DataColumn>().Select(x => x.ColumnName).ToList();

            Step("11. Verify There is a line with the following headers separated by a semi-comma:");
            Step(" o address");
            Step(" o location.streetdescription");
            Step(" o location.city");
            Step(" o controllerStrId");
            Step(" o dimmingGroupName");
            Step(" o provider.name");
            Step(" o geoZone path");
            Step(" o idOnController");
            Step(" o lat");
            Step(" o lng");
            Step(" o name");
            Step(" o network.type");
            Step(" o network.supplyvoltage");
            Step(" o model");
            Step(" o macAddress");
            VerifyEqual("11. Verify There is a line with the following headers as expeceted", expectedHeaders, actualHeaders, false);

            Step("12. Verify The contains for headers are corresponding to cabinet controller values");
            Step(" o address = Address 1");
            Step(" o location.streetdescription = Address 2");
            Step(" o location.city = City");
            Step(" o controllerStrId = Controller ID of controller to which the cabinet controller is connecting");
            Step(" o dimmingGroupName = Dimming group");
            Step(" o provider.name = Energy supplier");
            Step(" o geoZone path = the full path of testing geozone. Ex: GeoZones/Automation/CabinetController/EI_77");
            Step(" o idOnController = Identifier");
            Step(" o lat = Latitude");
            Step(" o lng = Longitude");
            Step(" o name = Cabinet controller's name");
            Step(" o network.type = Network Type");
            Step(" o network.supplyvoltage = Supply Voltage + 'Volts'");
            Step(" o model: Type of equipment. Ex: talq.cabinetcontroller.v1");
            Step(" o macAddress: Unique address");
            var rowCount = tblCSV.Rows.Count;
            if (rowCount == 1)
            {
                var row = tblCSV.Rows[0];
                var actualAddress1 = row["address"].ToString();
                var actualAddress2 = row["location.streetdescription"].ToString();
                var actualCity = row["location.city"].ToString();
                var actualControllerId = row["controllerStrId"].ToString();
                var actualDimmingGroup = row["dimmingGroupName"].ToString();
                var actualEnergySupplier = row["provider.name"].ToString();
                var actualGeoZonePath = row["geoZone path"].ToString();
                var actualIdentifier = row["idOnController"].ToString();
                var actualLat = row["lat"].ToString();
                var actualLong = row["lng"].ToString();
                var actualName = row["name"].ToString();
                var actualNetworkType = row["network.type"].ToString();
                var actualSupplyVoltage = row["network.supplyvoltage"].ToString();
                var actualTypeOfEquipment = row["model"].ToString();
                var actualUniqueAddress = row["macAddress"].ToString();

                VerifyEqual("12. Verify address = Address 1", notedAddress1, actualAddress1);
                VerifyEqual("12. Verify location.streetdescription = Address 2", notedAddress2, actualAddress2);
                VerifyEqual("12. Verify location.city = City", notedCity, actualCity);
                VerifyEqual("12. Verify controllerStrId = Controller ID of controller to which the cabinet controller is connecting", controller, actualControllerId);
                VerifyEqual("12. Verify dimmingGroupName = Dimming group", notedDimmingGroup, actualDimmingGroup);
                VerifyEqual("12. Verify provider.name = Energy supplier", notedEnergySupplier, actualEnergySupplier);
                VerifyEqual("12. Verify geoZone path = the full path of testing geozone. Ex: GeoZones/Automation/CabinetController/EI_77", notedGeoZonePath, actualGeoZonePath);
                VerifyEqual("12. Verify idOnController = Identifier", cabinetController, actualIdentifier);
                VerifyEqual("12. Verify lat = Latitude", notedLat, actualLat);
                VerifyEqual("12. Verify lng = Longitude", notedLng, actualLong);
                VerifyEqual("12. Verify name = Cabinet controller's name", cabinetController, actualName);
                VerifyEqual("12. Verify network.type = Network Type", notedNetworkType, actualNetworkType);
                VerifyEqual("12. Verify network.supplyvoltage = Supply Voltage + 'Volts'", notedSupplyVoltage, actualSupplyVoltage);
                VerifyEqual("12. Verify model: Type of equipment. Ex: talq.cabinetcontroller.v1", typeOfEquipment.Value, actualTypeOfEquipment);
                VerifyEqual("12. Verify macAddress: Unique address", notedUniqueAddress, actualUniqueAddress);
            }
            else
                Warning("CSV file only has 1 row with expected data");

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_78 Cabinet Controller - Import a cabinet controller from csv file")]
        [Category("RunAlone")]
        public void EI_78()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI78");
            var cabinetController = SLVHelper.GenerateUniqueName("CBN");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var typeOfEquipment = Settings.CabinetControllerEquipmentTypes.PickRandom();
            var geozonePath = string.Format("{0}/{1}", Settings.RootGeozoneName, geozone);
            var lat = SLVHelper.GenerateLatitude();
            var lng = SLVHelper.GenerateLongitude();
            var uniqueAddress = SLVHelper.GenerateMACAddress();
            var address1 = SLVHelper.GenerateString(7);
            var address2 = SLVHelper.GenerateString(8);
            var city = SLVHelper.GenerateString(9);
            var dimmingGroup = SLVHelper.GenerateString();
            var networkType = SLVHelper.GenerateString(7);
            var energySupplier = new List<string> { "EDF", "RWE", "E.ON", "Electrabel", "Enel" }.PickRandom();
            var supplyVoltage = new List<string> { "120 Volts", "277 Volts", "480 Volts" }.PickRandom();
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI78.csv");

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a testing geazone");
            Step(" - Prepare a csv file of a cabinet controller with these preset values of");
            Step("    + General information: ");
            Step("        - Name");
            Step("        - Geozone");
            Step("        - Latitude");
            Step("        - Longitude");
            Step("    + Idenity tab");
            Step("        - Controller Id");
            Step("        - Identifier");
            Step("        - Type of equipment");
            Step("        - Unique address");
            Step("    + Inventory tab");
            Step("        - Location");
            Step("            + Address 1");
            Step("            + Address 2");
            Step("            + City");
            Step("    + I/O tab");
            Step("        - Dimming group");
            Step("    + Electricity network tab");
            Step("        - Energy supplier");
            Step("        - Network type");
            Step("        - Supply voltage");
            Step("**** Precondition ****\n");   

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI78*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateCsv(DeviceType.CabinetController, csvFilePath, geozonePath, controller, cabinetController, typeOfEquipment.Key, cabinetController
                , new List<string> {
                    "lat#" + lat,  "lng#" + lng, "macAddress#" + uniqueAddress, "address#" + address1, "location.streetdescription#" + address2
                    , "location.city#" + city, "dimmingGroupName#" + dimmingGroup, "provider.name#" + energySupplier, "network.type#" + networkType, "network.supplyvoltage#" + supplyVoltage
                });

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Expected Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;                  

            Step("3. Select the testing geozone, press 'More' button and select the option 'Import'");
            Step("4. Select the csv file and wait for the importing process done");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.Import(csvFilePath);            

            Step("5. Verify The Import panel displays with");
            Step(" o Title: Import");
            Step(" o Button: Close, Commission, Reload");
            Step(" o A refreshing green icon and the message 'One device has been updated'");
            VerifyEqual("5. Verify The Import panel displays", true, equipmentInventoryPage.GeozoneEditorPanel.IsImportPanelDisplayed());
            VerifyEqual("5. Verify Import successfully: One device has been updated.", "One device has been updated.", equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.GetMessageCaptionText());

            Step("6. Press Refresh button and wait for the system refreshed");
            equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.ClickBackButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForImportPanelDisappeared();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("7. Verify The Geozone panel displays and the testing geozone is selected in the geozone tree");
            VerifyEqual("7. Verify the Geozone panel displays", true, equipmentInventoryPage.IsGeozoneEditorPanelDisplayed());
            VerifyEqual("7. Verify the testing geozone is selected in the geozone trees", geozone, equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName());

            Step("8. Verify The cabinet controller displays in the testing geozone in the geozone tree with the name of cabinet controller from csv file");
            var actualDevice = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.CabinetController).FirstOrDefault();
            VerifyEqual("8. Verify the cabinet controller displays in the testing geozone in the geozone tree with the name of cabinet controller from csv file", cabinetController, actualDevice);

            Step("9. Select the cabinet controller in the geozone tree");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cabinetController);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("10. Verify The map zooms into the selected cabinet controller and the Cabinet Controller Editor panel displays");
            VerifyEqual("10. Verify the map zooms into the selected cabinet controller", true, equipmentInventoryPage.Map.HasSelectedDevicesInMapGL());
            VerifyEqual("10. Verify the Cabinet Controller Editor panel displays", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("11. Check the values of fields imported from csv file");
            Step("12. Verify All the values are set properly in the Cabinet Controller Editor panel for the imported cabinet controller");
            var actualName = equipmentInventoryPage.CabinetControllerEditorPanel.GetNameValue();
            var actualGeozone = string.Format("{0}/{1}", Settings.RootGeozoneName, equipmentInventoryPage.CabinetControllerEditorPanel.GetGeozoneValue());
            var actualLat = equipmentInventoryPage.CabinetControllerEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
            var actualLng = equipmentInventoryPage.CabinetControllerEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();
            var actualControllerId = equipmentInventoryPage.CabinetControllerEditorPanel.GetControllerIdValue();
            var actualIdentifier = equipmentInventoryPage.CabinetControllerEditorPanel.GetIdentifierValue();           
            var actualTypeOfEquipment = equipmentInventoryPage.CabinetControllerEditorPanel.GetTypeOfEquipmentValue();
            var actualUniqueAddress = equipmentInventoryPage.CabinetControllerEditorPanel.GetUniqueAddressValue();
            equipmentInventoryPage.CabinetControllerEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.CabinetControllerEditorPanel.ExpandGroupsActiveTab();
            var actualAddress1 = equipmentInventoryPage.CabinetControllerEditorPanel.GetAddress1Value();
            var actualAddress2 = equipmentInventoryPage.CabinetControllerEditorPanel.GetAddress2Value();
            var actualCity = equipmentInventoryPage.CabinetControllerEditorPanel.GetCityValue();
            equipmentInventoryPage.CabinetControllerEditorPanel.SelectTab("I/O");
            var actualDimmingGroup = equipmentInventoryPage.CabinetControllerEditorPanel.GetDimmingGroupValue();
            equipmentInventoryPage.CabinetControllerEditorPanel.SelectTab("Electricity network");
            equipmentInventoryPage.CabinetControllerEditorPanel.ExpandGroupsActiveTab();
            var actualNetworkType = equipmentInventoryPage.CabinetControllerEditorPanel.GetNetworkTypeValue();
            var actualEnergySupplier = equipmentInventoryPage.CabinetControllerEditorPanel.GetEnergySupplierValue();
            var actualSupplyVoltage = equipmentInventoryPage.CabinetControllerEditorPanel.GetSupplyVoltageValue();
            VerifyEqual("12. Verify name in csv = Cabinet controller's name", cabinetController, actualName);
            VerifyEqual("12. Verify geoZone path in csv = the full path of testing geozone.", geozonePath, actualGeozone);
            VerifyEqual("12. Verify lat in csv = Latitude", lat, actualLat);
            VerifyEqual("12. Verify lng in csv = Longitude", lng, actualLng);
            VerifyEqual("12. Verify controllerStrId in csv = Controller ID of controller to which the cabinet controller is connecting", controller, actualControllerId);
            VerifyEqual("12. Verify idOnController in csv = Identifier", cabinetController, actualIdentifier);
            VerifyEqual("12. Verify model in csv ~ Type of equipment. Ex: talq.cabinetcontroller.v1", typeOfEquipment.Key, actualTypeOfEquipment);
            VerifyEqual("12. Verify macAddress in csv = Unique address", uniqueAddress, actualUniqueAddress);
            VerifyEqual("12. Verify address in csv = Address 1", address1, actualAddress1);
            VerifyEqual("12. Verify location.streetdescription in csv = Address 2", address2, actualAddress2);
            VerifyEqual("12. Verify location.city in csv = City", city, actualCity);            
            VerifyEqual("12. Verify dimmingGroupName in csv = Dimming group", dimmingGroup, actualDimmingGroup);
            VerifyEqual("12. Verify provider.name in csv = Energy supplier", energySupplier, actualEnergySupplier);
            VerifyEqual("12. Verify network.type in csv = Network Type", networkType, actualNetworkType);
            VerifyEqual("12. Verify network.supplyvoltage in csv = Supply Voltage + 'Volts'", supplyVoltage, actualSupplyVoltage);
          
            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_79 Cabinet Controller -  Commission a cabinet controller after importing from csv file")]
        [Category("RunAlone")]
        public void EI_79()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI79");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var cabinetController = SLVHelper.GenerateUniqueName("CBN");
            var geozonePath = string.Format("{0}/{1}", Settings.RootGeozoneName, geozone);
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI79.csv");
            var typeOfEquipment = Settings.CabinetControllerEquipmentTypes.PickRandom();

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a testing geazone and a controller (wait for TalQ simulator to test commission successfully)");
            Step(" - Prepare a csv file of a cabinet controller to import");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI79*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);
            CreateCsv(DeviceType.CabinetController, csvFilePath, geozonePath, controller, cabinetController, typeOfEquipment.Key);
            
            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Verify Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            
            Step("3. Select the testing geozone, press 'More' button and select the option 'Import'");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("4. Select the csv file and wait for the importing process done");
            equipmentInventoryPage.Import(csvFilePath);                       

            Step("5. Verify The Import panel displays with 'One device has been updated'");
            VerifyEqual("5. Verify The Import panel displays", true, equipmentInventoryPage.GeozoneEditorPanel.IsImportPanelDisplayed());
            VerifyEqual("5. Verify Import successfully: One device has been updated.", "One device has been updated.", equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.GetMessageCaptionText());

            Step("6. Press Commission button on Import panel");
            equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.ClickCommissionButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("7. Verify A pop-up displays with");
            Step(" o Title: Confirmation");
            Step(" o Description: 'There is 1 equipments to commission. Would you like to commission now ?'");
            Step(" o Button: Yes, No");
            VerifyEqual("7. Verify A pop-up displays", true, equipmentInventoryPage.IsPopupDialogDisplayed());
            VerifyEqual("7. Verify Title: Confirmation", "Confirmation", equipmentInventoryPage.Dialog.GetDialogTitleText());
            VerifyEqual("7. Verify Description: 'There is 1 equipments to commission. Would you like to commission now ?'", "There is 1 equipments to commission. Would you like to commission now ?", equipmentInventoryPage.Dialog.GetMessageText());
            VerifyEqual("7. Verify Button: Yes displays", true, equipmentInventoryPage.Dialog.IsYesButtonDisplayed());
            VerifyEqual("7. Verify Button: No displays", true, equipmentInventoryPage.Dialog.IsNoButtonDisplayed());

            Step("8. Press No button");
            equipmentInventoryPage.Dialog.ClickNoButton();
            equipmentInventoryPage.WaitForPopupMessageDialogDisappeared();

            Step("9. Verify The pop-up is closed");
            VerifyEqual("9. Verify A pop-up closed", true, !equipmentInventoryPage.IsPopupDialogDisplayed());

            Step("10. Press Commission button again, then press Yes button on the pop-up and wait for the commission is done");
            equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.ClickCommissionButton();
            equipmentInventoryPage.WaitForPopupDialogDisplayed();
            equipmentInventoryPage.Dialog.ClickYesButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForImportCommissionPanelDisplayed();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("11. Verify The Commission panel displays with 2 sections");
            Step(" o 1st: Check database configuration");
            Step(" o 2nd: Commissioning");
            var expectedSections = new List<string> { "Check database configuration", "Commissioning" };
            var actualSections = equipmentInventoryPage.GeozoneEditorPanel.ImportCommissionPanel.GetListOfSections();
            var messages = equipmentInventoryPage.GeozoneEditorPanel.ImportCommissionPanel.GetListOfMessagesText();
            var icons = equipmentInventoryPage.GeozoneEditorPanel.ImportCommissionPanel.GetListOfMessagesIcon();
            VerifyEqual("11. Verify Commissioning results are displayed: there are 2 sections 'Check database configuration' and 'Commissioning'", expectedSections, actualSections, false);
            
            Step("12. Verify In the 1st section, there are");
            Step(" o An green checked icon and text: 'Inventory has been checked in the database and is consistent'");
            VerifyTrue("12. Verify In the 1st section: An green checked icon", icons[0].Contains("status-ok.png"), "status-ok.png", icons[0]);
            VerifyEqual("12. Verify In the 1st section: text: 'Inventory has been checked in the database and is consistent'", "Inventory has been checked in the database and is consistent", messages[0]);

            Step("13. Verify In the 2nd section, there are");
            Step(" o An green checked icon and text: 'Devices configs are pushed using mode 'LIST'.'");
            Step(" o An green checked icon and text: '1 devices in list. 1 were pushed. 0 were ignored and 0 were not pushed because not found on controller.'");
            Step(" o An red error icon and text: 'Connection error Connect to localhost:80 [localhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused (Connection refused)'. Note: will update this point after the simulator worked.");
            VerifyTrue("13. Verify In the 2nd section: An green checked icon", icons[1].Contains("status-ok.png"), "status-ok.png", icons[1]);
            VerifyEqual("13. Verify In the 2nd section: text: Devices configs are pushed using mode 'LIST'.", "Devices configs are pushed using mode 'LIST'.", messages[1]);
            VerifyTrue("13. Verify In the 2nd section: An green checked icon", icons[2].Contains("status-ok.png"), "status-ok.png", icons[2]);
            VerifyEqual("13. Verify In the 2nd section: text: 1 devices in list. 1 were pushed. 0 were ignored and 0 were not pushed because not found on controller.", "1 devices in list. 1 were pushed. 0 were ignored and 0 were not pushed because not found on controller.", messages[2]);
            VerifyTrue("13. Verify In the 2nd section: An red error icon", icons[3].Contains("status-error.png"), "status-error.png", icons[3]);
            if (messages[3].Equals("Connection error Connect to localhost:80 [localhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused (Connection refused)"))
            {
                Warning("Will update step #13 after the simulator worked (TalQ simulator to test commission successfully)");
            }
            
            Step("14. Press Back button");
            equipmentInventoryPage.GeozoneEditorPanel.ImportCommissionPanel.ClickBackButton();
            equipmentInventoryPage.GeozoneEditorPanel.WaitForImportCommissionPanelDisappeared();

            Step("15. Verify Commission panel is closed and Import panel displays");
            VerifyEqual("15. Verify Commission panel is closed", true, !equipmentInventoryPage.GeozoneEditorPanel.IsImportCommissionPanelDisplayed());
            VerifyEqual("15. Verify Import panel displays", true, equipmentInventoryPage.GeozoneEditorPanel.IsImportPanelDisplayed());

            Step("16. Press Back button and wait for the page is refreshed, then select the imported cabinet controller");
            equipmentInventoryPage.GeozoneEditorPanel.ImportPanel.ClickBackButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cabinetController);
            equipmentInventoryPage.WaitForEditorPanelDisplayed();

            Step("17. Verify The Cabinet Controller Editor displays");
            VerifyEqual("17. Verify The Cabinet Controller Editor displays", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());
            VerifyEqual("17. Verify The Cabinet Controller Editor displays", cabinetController, equipmentInventoryPage.CabinetControllerEditorPanel.GetNameValue());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_80 1061890 Location Search - in Equipment Inventory")]
        public void EI_80()
        {
            var testData = GetTestDataOfEI_80();           
            var locationNoDevices = testData["LocationNoDevices"].ToString();
            var locationHasDevicesPartial = testData["LocationHasDevicesPartial"].ToString();
            var locationHasDevicesFull = testData["LocationHasDevicesFull"].ToString();   
            var allStreetlights = testData["Devices"] as List<DeviceModel>;
            var streetlight11 = allStreetlights.Last();            
            var streetlights = allStreetlights.Where(p => !p.Name.Equals(streetlight11.Name)).ToList();
            var csvFilePath = Settings.GetFullPath(Settings.CSV_FILE_PATH + "EI80.csv");

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - This test should be checked on screens having Map Search like: Equipment Inventory, Failure Tracking, Real-time Control, Batch Control");
            Step(" - Create a testing geozone containing 11 streetlights which are located at a known location. Ex: Hoang Van Thu park (using the import filed attached)");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            ImportFile(csvFilePath);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("2. Verify There is a button with icon: Globe icon on the top-right corner of the GeoZone tree");
            VerifyEqual("2. Verify There is a button with icon: Globe icon on the top-right corner of the GeoZone tree", true, equipmentInventoryPage.GeozoneTreeMainPanel.IsMapFilterButtonVisible());

            Step("3. Hover the button");
            equipmentInventoryPage.GeozoneTreeMainPanel.HoverMapSearchButton();

            Step("4. Verify The text 'Map Search' displays");
            VerifyEqual("4. Verify The text 'Map Search' displays", "Map Search", equipmentInventoryPage.GeozoneTreeMainPanel.GetMapSearchButtonTooltip());

            Step("5. Click the button");
            equipmentInventoryPage.GeozoneTreeMainPanel.ClickMapSearchButton();
            equipmentInventoryPage.GeozoneTreeMainPanel.WaitForMapSearchPanelDisplayed();

            Step("6. Verify A panel displays with");
            Step(" o Title: Map Search");
            Step(" o Text: Search by Location");
            Step(" o Textbox with a Magnifying Glass icon and the text 'Search in map'");
            Step(" - The 2 following texts");
            Step("  + 'You can search for devices in a given area within the map by using the search tool'");
            Step("  + 'Tip: If you dont know a specific street address, try searching by city or postal code'");
            VerifyEqual("6. Verify A panel displays: Title: Map Search", "Map Search", equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetPanelTitleText());
            VerifyEqual("6. Verify A panel displays: Text: Search by Location", "Search by Location", equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetContentText());
            VerifyEqual("6. Verify A panel displays: Textbox", true, equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.IsSearchInputDisplayed());
            VerifyEqual("6. Verify A panel displays: Textbox with a Magnifying Glass icon", true, equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.IsSearchInputHasMagnifyingGlass());
            VerifyEqual("6. Verify A panel displays: Textbox with the text 'Search in map'", "Search in map", equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetSearchPlaceholder());
            var expectedMessages = new List<string> { "You can search for devices in a given area within the map by using the search tool", "Tip: If you dont know a specific street address, try searching by city or postal code" };
            var actualMessages = equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetListOfMessages();
            VerifyEqual("6. Verify The 2 following texts as expected", expectedMessages, actualMessages);

            Step("7. Enter a known location which has no any devices. Ex: Can Tho International Airport");
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.EnterSearchInput(locationNoDevices);
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForSuggestionsDisplayed();
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.SelectSearchSuggestion();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForLocationSearchMarkerDisplayed();
            Wait.ForGLMapStopFlying();

            Step("8. Verify There is a box bellow the Search box");
            Step(" - Title: Closest Devices");
            Step(" - Text:");
            Step("  + 'Sorry, we couldn't find any devices in the selected area'");
            Step("  + 'Check the spelling or add details (like city or postal code)'");
            VerifyEqual("8. Verify There is a box bellow the Search box with Title: Closest Devices", "Closest Devices", equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetErrorsTitle());
            var expectedErrors = new List<string> { "Sorry, we couldn't find any devices in the selected area", "Check the spelling or add details (like city or postal code)" };
            var actualErrors = equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetListOfErrors();
            VerifyEqual("8. Verify The 2 following error texts as expected", expectedErrors, actualErrors);

            Step("9. Clear the search box and enter a partial of the testing address into the input");
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.ClickClearSearchButton();
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForClearSearchButtonDisappeared();
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.EnterSearchInput(locationHasDevicesPartial);
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForSuggestionsDisplayed();

            Step("10. Verify The search results appear as user types. The matched words are bold");
            var searchSuggestionsBoldTextList = equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetSearchSuggestionsBoldText();
            VerifyTrue("10. Verify The search results appear as user types. The matched words are bold", searchSuggestionsBoldTextList.All(p => p.Equals(locationHasDevicesPartial)), "all matched words are bold", string.Join(", ", searchSuggestionsBoldTextList));                     

            Step("11. Input the full value of the testing address, then click on the 1 result in the list");
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.ClickClearSearchButton();
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForClearSearchButtonDisappeared();
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.EnterSearchInput(locationHasDevicesFull);
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForSuggestionsDisplayed();
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.SelectSearchSuggestion();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForLocationSearchMarkerDisplayed();
            Wait.ForGLMapStopFlying();

            Step("12. Verify The map is centered on the selected location and zoomed to 50m-100m");
            var mapScale = equipmentInventoryPage.Map.GetMapGLScaleText();
            VerifyTrue("12. Verify The map is centered on the selected location and zoomed to 50m-100m", mapScale.Equals("50 m") || mapScale.Equals("100 m"), "50m-100m", mapScale);
            
            Step("13. Verify There is an Orange location icon on the center of the map");
            VerifyEqual("13. Verify There is location icon on the center of the map", true, equipmentInventoryPage.Map.IsLocationSearchMarkerDisplayed());

            Step("14. Verify There is a table listing devices nearest to the selected location bellow the Search box");
            Step(" - Title: Closest Devices");
            Step(" - Table: 2 columns:");
            Step("  + Device: Icon of the device + Device's name");
            Step("  + Distance (ft): the distance in feet");                        
            VerifyEqual("14. Verify There is a table listing devices nearest to the selected location bellow the Search box with Title: Closest Devices", "Closest Devices", equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetClosetDevicesTitle());
            var expectedColumns = new List<string> { "Device", "Distance (ft)" };
            var actualColumns = equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetListOfColumnsHeaderClosetDevices();
            VerifyEqual("14. Verify Table: 2 columns as expected", expectedColumns, actualColumns);
            var actualImages = equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetListOfClosetDevicesImage();
            var actualClosetDevices = equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetListOfColumnDataClosetDevices("Device");
            var actualDistances = equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetListOfColumnDataClosetDevices("Distance (ft)");
            VerifyEqual("14. Verify Device: Icon of the device + Device's name", true, actualImages.All(p => p.IndexOf("streetlight16.png") >= 0));
            VerifyEqual("14. Verify Device: Icon of the device + Device's name", true, actualClosetDevices.Any());
            VerifyEqual("14. Verify Distance (ft): the distance in feet", true, actualDistances.Any());

            Step("15. Verify Only 10 streetlights are listed in the table from 01 to 10, not including streetlight 11.");
            Step(" - Note: The number of displayed device is 10 by default and the distance is 5 kilometers by default. They are configurable globally. This should be checked after the groundcontrol UI is ready.");
            var expectedClosetDevices = streetlights.Select(p => p.Name).ToList();
            VerifyEqual("15. Verify Only 10 streetlights are listed in the table from 01 to 10", expectedClosetDevices, actualClosetDevices, false);
            VerifyEqual("15. Verify Not including streetlight 11", true, !actualClosetDevices.Any(p => p.Equals(streetlight11.Name)));            

            Step("16. Verify Devices are sorted by ascending distance to the selected location by default.");
            VerifyEqual("16. Verify Devices are sorted by ascending distance to the selected location by default.", true, actualDistances.IsIncreasing());

            Step("17. Press on the header 'Distance (ft)'");
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.ClickGridColumnHeader("Distance (ft)");

            Step("18. Verify The list is sorted by descending distance to the selected location");
            actualDistances = equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetListOfColumnDataClosetDevices("Distance (ft)");
            VerifyEqual("18. Verify The list is sorted by descending distance to the selected location", true, actualDistances.IsDecreasing());

            Step("19. Press on the header 'Device'");
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.ClickGridColumnHeader("Device");

            Step("20. Verify Devices are sorted by ascending name.");
            actualClosetDevices = equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetListOfColumnDataClosetDevices("Device");
            VerifyEqual("20. Verify Devices are sorted by ascending name.", true, actualClosetDevices.IsIncreasing());

            Step("21. Press on the header 'Device' again");
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.ClickGridColumnHeader("Device");

            Step("22. Verify Devices are sorted by descending name.");            
            actualClosetDevices = equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetListOfColumnDataClosetDevices("Device");
            VerifyEqual("22. Verify Devices are sorted by descending name.", true, actualClosetDevices.IsDecreasing());

            Step("23. Note: The following verifications should be checked after the groundcontrol UI is ready. 'The unit of distance is feet by default and is configurable per customer.The supported units of distance are feet and meters.'");
            Step("24. Select the streetlight on the map");
            var rndStreetlight = streetlights.PickRandom(2);
            var streetlight1 = rndStreetlight[0];
            equipmentInventoryPage.Map.SelectDeviceGL(streetlight1.Longitude, streetlight1.Latitude);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("25. Verify The device is selected and the Map Search panel remains visible");
            VerifyEqual("25. Verify The device is selected", true, equipmentInventoryPage.Map.HasSelectedDevicesInMapGL());
            VerifyEqual("25. Verify Map Search panel remains visible", true, equipmentInventoryPage.GeozoneTreeMainPanel.IsMapSearchPanelDisplayed());

            Step("26. Verify The Streetlight panel displays on the right");
            VerifyEqual("26. Verify The Streetlight Editor panel displays on the right", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("27. Select the streetlight on the Device table");
            var streetlight2 = rndStreetlight[1];
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.ClickGridRecord(streetlight2.Name);
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("28. Verify The device is selected and the Map Search panel remains visible");
            VerifyEqual("28. Verify The device is selected", true, equipmentInventoryPage.Map.HasSelectedDevicesInMapGL());
            VerifyEqual("28. Verify Map Search panel remains visible", true, equipmentInventoryPage.GeozoneTreeMainPanel.IsMapSearchPanelDisplayed());

            Step("29. Verify The Streetlight panel of selected streetlight displays on the right");
            VerifyEqual("29. Verify The Streetlight Editor panel displays on the right", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());

            Step("30. Press X icon on the Search box");
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.ClickClearSearchButton();
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForClearSearchButtonDisappeared();

            Step("31. Verify The input is cleared");
            VerifyEqual("31. Verify The input is cleared", "", equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.GetSearchValue());

            Step("32. Press Back button");
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.ClickBackToolbarButton();
            equipmentInventoryPage.GeozoneTreeMainPanel.WaitForMapSearchPanelDisappeared();
            
            Step("33. Verify Geozone tree panel displays again");
            Step(" - The streetlight is selected in the geozone tree");
            Step(" - The Streetlight panel remains visible");
            VerifyEqual("33. Verify The streetlight is selected in the geozone tree", streetlight2.Name, equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName());
            VerifyEqual("33. Verify The Streetlight Editor panel remains visible", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());
            
            try
            {
                DeleteGeozone("EI_80");
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_81 Cabinet Controller - Error messages needed for cabinet controller association scenarios")]
        public void EI_81()
        {
            var geozone1 = SLVHelper.GenerateUniqueName("GZNEI8101");
            var geozone2 = SLVHelper.GenerateUniqueName("GZNEI8102");
            var geozone3 = SLVHelper.GenerateUniqueName("GZNEI8103");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var cabinetController1 = SLVHelper.GenerateUniqueName("CBN01");
            var cabinetController2 = SLVHelper.GenerateUniqueName("CBN02");
            
            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a testing geazone (Ex: geozone01) and a cabinet controller (ex: cabinetcontroller01) connected to a controller");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI81*");
            CreateNewGeozone(geozone1);
            CreateNewController(controller, geozone1);
            CreateNewDevice(DeviceType.CabinetController, cabinetController1, controller, geozone1);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app");
            Step("2. Verify Equipment Inventory page is routed and loaded successfully");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            
            Step("3. Create a new geozone (Ex: geozone02) and try to move that geozone to the testing geozone, then press 'Yes' in the Confirmation pop-up");
            equipmentInventoryPage.CreateGeozone(geozone2);
            equipmentInventoryPage.MoveNodeToGeozoneAndClickYesConfirmed(geozone2, geozone1);
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("4. Verify The error pop-up displays with the description:");
            Step(" o 'GeoZone '[geozone01]' contains a cabinet controller; moving a GeoZone inside another GeoZone that already contains a cabinet controller is not allowed. Please check '[geozone01]' before moving '[geozone02]'.'");
            var expectedMessage = string.Format("GeoZone '{0}' contains a cabinet controller; moving a GeoZone inside another GeoZone that already contains a cabinet controller is not allowed. Please check '{0}' before moving '{1}'.", geozone1, geozone2);
            VerifyEqual("4. Verify The error pop-up displays as expected", expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("5. Press OK button on the error pop-up");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("6. Verify The newly created geozone is not moved to the testing geozone. Note: Bug Waiting for JM creating a ticket");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone1);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            var subNodes = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.GeoZone);
            var isNewGZNMovedToTestingGZN = subNodes.Exists(p => p.Equals(geozone2));
            VerifyEqual("[New bug#id needed] 6. Verify The newly created geozone is not moved to the testing geozone", true, !isNewGZNMovedToTestingGZN);
            if (isNewGZNMovedToTestingGZN)
            {
                equipmentInventoryPage.MoveNodeToGeozoneAndClickYesConfirmed(geozone2, Settings.RootGeozoneName);
            }

            Step("7. Create a subgeozone (geozone03) in the geozone02");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone2);

            Step("8. Select the geozone02 and try to add a new cabinet controller");
            equipmentInventoryPage.CreateGeozone(geozone3, geozone2);
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone2);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.CreateDevice(DeviceType.CabinetController, cabinetController2, controller, cabinetController2);
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("9. Verify The error pop-up displays with the description:");
            Step(" o 'GeoZone 'geozone02' contains a sub-GeoZone; creating a cabinet controller inside a GeoZone that already contains a sub-GeoZone is not allowed. Please check 'geozone02' before creating 'cabinet controller's name'.");
            expectedMessage = string.Format("GeoZone '{0}' contains a sub-GeoZone; creating a cabinet controller inside a GeoZone that already contains a sub-GeoZone is not allowed. Please check '{0}' before creating '{1}'.", geozone2, cabinetController2);
            VerifyEqual("9. Verify The error pop-up displays as expected", expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("10. Press OK button on the error pop-up");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("11. Verify No cabinet controller created");
            subNodes = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.CabinetController);
            VerifyEqual("11. Verify No cabinet controller created", true, !subNodes.Exists(p => p.Equals(cabinetController2)));

            Step("12. Move the cabinet controller in geozone01 to geozone03, then press Yes on the confirmation pop-up");
            equipmentInventoryPage.MoveNodeToGeozoneAndClickYesConfirmed(cabinetController1, geozone3);

            Step("13. Verify The cabinet controller is moving to geozone03");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone3);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            subNodes = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.CabinetController);
            VerifyEqual("13. Verify The cabinet controller is moving to geozone03", true, subNodes.Exists(p => p.Equals(cabinetController1)));

            Step("14. Select geozone03 and add a new streetlight, in the Streetlight Editor panel select the testing cabinet controller for 'Cabinet Controller' field and save change");
            equipmentInventoryPage.CreateDevice(DeviceType.Streetlight, streetlight, controller, streetlight, "ABEL-Vigilon A[Dimmable ballast]");
            equipmentInventoryPage.StreetlightEditorPanel.SelectCabinetControllerDropDown(cabinetController1);
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("15. Try to move the cabinet controller to geozone01, then press Yes on the confirmation pop-up");
            equipmentInventoryPage.MoveNodeToGeozoneAndClickYesConfirmed(cabinetController1, geozone1);
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("16. Verify The error pop-up displays with the description:");
            Step(" o The cabinet controller '[cabinetcontroller01's name]' cannot be moved to another GeoZone because it is already associated with devices. Please check these associations before moving '[cabinetcontroller01's name]'.");
            expectedMessage = string.Format("The cabinet controller '{0}' cannot be moved to another GeoZone because it is already associated with devices. Please check these associations before moving '{0}'.", cabinetController1);
            VerifyEqual("16. Verify The error pop-up displays as expected", expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());
            
            Step("17. Press OK button on the error pop-up");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("18. Verify Cabinet controller still is in geozone03");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone3);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            subNodes = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.CabinetController);
            VerifyEqual("18. Verify Cabinet controller still is in geozone03", true, subNodes.Exists(p => p.Equals(cabinetController1)));

            Step("19. Select gezone01 and add a new cabinet controller (ex: cabinetcontroller02), then save changes");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone1);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.CreateDevice(DeviceType.CabinetController, cabinetController2, controller, cabinetController2);
            equipmentInventoryPage.CabinetControllerEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("20. Try to move cabinetcontroller02 to geozone03, then press Yes on the confirmation pop-up");
            equipmentInventoryPage.MoveNodeToGeozoneAndClickYesConfirmed(cabinetController2, geozone3);
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("21. Verify The error pop-up displays with the description:");
            Step(" o GeoZone 'geozone03' contains a cabinet controller; moving another cabinet controller into a GeoZone that already contains one is not allowed. Please check 'geozone03' before moving 'cabinetcontroller02'.");
            expectedMessage = string.Format("GeoZone '{0}' contains a cabinet controller; moving another cabinet controller into a GeoZone that already contains one is not allowed. Please check '{0}' before moving '{1}'.", geozone3, cabinetController2);
            VerifyEqual("21. Verify The error pop-up displays as expected", expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());
            
            Step("22. Press OK button on the error pop-up");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("23. Verify The cabinetcontroller02 is still in gezone01");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone1);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            subNodes = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.CabinetController);
            VerifyEqual("23. Verify cabinetcontroller02 still is in geozone01", true, subNodes.Exists(p => p.Equals(cabinetController2)));

            Step("24. Try to move cabinetcontroller02 to geozone02, then press Yes on the confirmation pop-up");
            equipmentInventoryPage.MoveNodeToGeozoneAndClickYesConfirmed(cabinetController2, geozone2);
            equipmentInventoryPage.WaitForPopupDialogDisplayed();

            Step("25. Verify The error pop-up displays with the description:");
            Step(" o GeoZone 'geozone02' contains a sub-GeoZone; moving a cabinet controller into a GeoZone that already contains a sub-GeoZone is not allowed. Please check 'geozone02' before moving '[cabinetcontroller02's name]'.");
            expectedMessage = string.Format("GeoZone '{0}' contains a sub-GeoZone; moving a cabinet controller into a GeoZone that already contains a sub-GeoZone is not allowed. Please check '{0}' before moving '{1}'.", geozone2, cabinetController2);
            VerifyEqual("25. Verify The error pop-up displays as expected", expectedMessage, equipmentInventoryPage.Dialog.GetMessageText());

            Step("26. Press OK button on the error pop-up");
            equipmentInventoryPage.Dialog.ClickOkButton();
            equipmentInventoryPage.WaitForPopupDialogDisappeared();

            Step("27. Verify The cabinetcontroller02 is still in gezone01");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone1);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            subNodes = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNamesOfSelectedNode(NodeType.CabinetController);
            VerifyEqual("27. Verify cabinetcontroller02 still is in geozone01", true, subNodes.Exists(p => p.Equals(cabinetController2)));

            try
            {
                DeleteGeozone(geozone1);
                DeleteGeozone(geozone2);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_83 Cabinet Controller - 1292136 - Associate a streetlight to a cabinet controller")]
        public void EI_83()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI83");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var cabinetController = SLVHelper.GenerateUniqueName("CBN");
            var typeOfEquipmentCBN = Settings.CabinetControllerEquipmentTypes.PickRandom();
            var typeOfEquipmentSTL = "ABEL-Vigilon A[Dimmable ballast]";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a testing geozone and a controller");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI83*");
            var userModel = CreateNewProfileAndUser();
            CreateNewGeozone(geozone, latMin: "28.21034", latMax: "28.21238", lngMin: "82.30717", lngMax: "82.31232");
            CreateNewController(controller, geozone, lat: SLVHelper.GenerateCoordinate("28.21105", "28.21174"), lng: SLVHelper.GenerateCoordinate("82.30928", "82.31043"));           

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.Users, App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app, and select the testing geozone");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("2. Create a new cabinet controller");
            Step("3. Verify A cabinet controller is created successfully");
            equipmentInventoryPage.CreateDevice(DeviceType.CabinetController, cabinetController, controller, cabinetController, typeOfEquipmentCBN.Key);
            var latCBN = equipmentInventoryPage.CabinetControllerEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
            var lngCBN = equipmentInventoryPage.CabinetControllerEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();

            Step("4. Create a new streetlight");
            Step("5. Verify A streetlight is created successfully");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.CreateDevice(DeviceType.Streetlight, streetlight, controller, streetlight, typeOfEquipmentSTL);
            var latSTL = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
            var lngSTL = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();
            
            Step("6. Select the cabinet controller for 'Cabinet Controller' field in Identify tab of the streetlight's Editor panel, then save changes");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identify");
            equipmentInventoryPage.StreetlightEditorPanel.SelectCabinetControllerDropDown(cabinetController);
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("7. Verify The geozone tree is updated as following");
            Step(" o The testing geozone's text is '3 devices'");
            Step(" o There is an Expand icon next to the cabinet controller icon");
            Step(" o The streetlight is moved as a group of the cabinet controller");
            VerifyEqual("7. Verify The testing geozone's text is '3 devices'", "3 devices", equipmentInventoryPage.GeozoneTreeMainPanel.GetNodeDevicesCountText(geozone));
            VerifyEqual("[#1429497] 7. Verify There is an Expand icon next to the cabinet controller icon", true, equipmentInventoryPage.GeozoneTreeMainPanel.IsNodeHasExpandIcon(cabinetController));            
            equipmentInventoryPage.GeozoneTreeMainPanel.ExpandNode(cabinetController);
            var devices = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNames(cabinetController);
            VerifyEqual("7. Verify The streetlight is moved as a group of the cabinet controller", true, devices.Contains(streetlight));

            Step("8. Press the Expand icon of the cabinet controller");
            equipmentInventoryPage.GeozoneTreeMainPanel.ExpandNode(cabinetController);

            Step("9. Verify The streetlight icon is hidden");
            devices = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNames(cabinetController);
            devices.RemoveAll(p => string.IsNullOrEmpty(p));
            VerifyEqual("9. Verify The streetlight icon is hidden", true, devices.Count == 0);

            Step("10. Press the Expand icon again");
            equipmentInventoryPage.GeozoneTreeMainPanel.ExpandNode(cabinetController);

            Step("11. Verify The streetlight icon displays again on geozone tree");
            devices = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNames(cabinetController);
            VerifyEqual("11. Verify The streetlight icon displays again on geozone tree", true, devices.Contains(streetlight));

            Step("12. Press the Expand icon next to the testing geozone");
            equipmentInventoryPage.GeozoneTreeMainPanel.ExpandNode(geozone);

            Step("13. Verify The cabinet controller and the streetlight are hidden on the geozone tree");
            devices = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildDeviceNamesOfSelectedNode();
            devices.RemoveAll(p => string.IsNullOrEmpty(p));
            VerifyEqual("13. Verify The cabinet controller and the streetlight are hidden on the geozone tree", true, devices.Count == 0);

            Step("14. Select the cabinet controller icon on the map");
            equipmentInventoryPage.Map.SelectDeviceGL(lngCBN, latCBN);
            devices = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildDeviceNamesOfSelectedNode();            

            Step("15. Verify");
            Step(" o The geozone is expanded and the cabinet controller and the streetlight display again.");
            Step(" o The Cabibet Controller Editor panel displays");
            VerifyEqual("15. Verify The Cabibet Controller Editor panel displays", true, equipmentInventoryPage.IsDeviceEditorPanelDisplayed());
            VerifyEqual("15. Verify The The geozone is expanded and the cabinet controller display", cabinetController, equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName());
            VerifyEqual("15. Verify The streetlight displays again", true, devices.Contains(streetlight));

            Step("16. Switch to User app, create a new profile containing a user and assign the testing geozone for that profile");
            var usersPage = equipmentInventoryPage.AppBar.SwitchTo(App.Users) as UsersPage;
            usersPage.UserProfileListPanel.SelectProfile(userModel.Profile);
            usersPage.UserProfileDetailsPanel.EnterGeozoneInputAutoComplete(geozone);
            usersPage.UserProfileDetailsPanel.ClickSaveButton();
            usersPage.WaitForPreviousActionComplete();
            usersPage.WaitForHeaderMessageDisappeared();

            Step("17. Log out and log in with the new user, go to Equipment Inventory app");
            desktopPage = SLVHelper.LogoutAndLogin(usersPage, userModel.Username, userModel.Password);
            equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("18. Verify In geozone tree");
            Step(" o The root geozone is the testing geozone");
            Step(" o The text is '3 devices'");
            Step(" o The root geozone is selected and expanded");
            Step(" o The geozone Editor panel displays");
            Step(" o The cabinet controller is not expanded");
            VerifyEqual("18. Verify The root geozone is the testing geozone", geozone, equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeName());
            VerifyEqual("18. Verify The text is '3 devices'", "3 devices", equipmentInventoryPage.GeozoneTreeMainPanel.GetSelectedNodeDevicesCountText());
            VerifyEqual("18. Verify The root geozone is selected and expanded", true, equipmentInventoryPage.GeozoneTreeMainPanel.IsSelectedGeozoneExpandable());
            devices = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildDeviceNamesOfSelectedNode();
            VerifyEqual("18. Verify The cabinet controller is not expanded", true, !devices.Contains(streetlight));

            Step("19. Verify The markers of the canibet controller and streetlight displays");
            var mapCBN = equipmentInventoryPage.Map.MoveAndGetDeviceNameGL(lngCBN, latCBN);
            VerifyEqual("19. Verify The markers of the canibet controller displays", cabinetController, mapCBN);
            var mapSTL = equipmentInventoryPage.Map.MoveAndGetDeviceNameGL(lngSTL, latSTL);
            VerifyEqual("19. Verify The markers of the streetlight displays", streetlight, mapSTL);

            Step("20. Expand the cabinet controller");
            equipmentInventoryPage.GeozoneTreeMainPanel.ExpandNode(cabinetController);

            Step("21. Verify the streetlight displays in geozone tree");
            devices = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNames(cabinetController);
            VerifyEqual("21. Verify the streetlight displays in geozone tree", true, devices.Contains(streetlight));
            
            Step("22. Select the cabinet controller");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(cabinetController);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("23. Verify The Cabinet Controller Editor displays and its marker on the map is selected");
            VerifyEqual("23. Verify The Cabinet Controller Editor displays", cabinetController, equipmentInventoryPage.CabinetControllerEditorPanel.GetNameValue());
            equipmentInventoryPage.Map.MoveToSelectedDeviceGL();
            VerifyEqual("23. Verify its marker on the map is selected", cabinetController, equipmentInventoryPage.Map.GetDeviceNameGL());

            Step("24. Select the streetlight");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.WaitForDeviceEditorPanelDisplayed();

            Step("25. Verify The Streetlight Editor displays and its marker on the map is selected");
            VerifyEqual("25. Verify The Streetlight Editor displays", streetlight, equipmentInventoryPage.StreetlightEditorPanel.GetNameValue());
            equipmentInventoryPage.Map.MoveToSelectedDeviceGL();
            VerifyEqual("25. Verify its marker on the map is selected", streetlight, equipmentInventoryPage.Map.GetDeviceNameGL());

            try
            {
                DeleteUserAndProfile(userModel);
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_84 Cabinet Controller - SC-1469 - Users can see that association between Cabinet Controller and streetlights in Failure Tracking")]
        public void EI_84()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI84");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var cabinetController = SLVHelper.GenerateUniqueName("CBN");
            var typeOfEquipmentCBN = Settings.CabinetControllerEquipmentTypes.PickRandom();
            var typeOfEquipmentSTL = "ABEL-Vigilon A[Dimmable ballast]";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a testing geozone and a controller");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI84*");
            CreateNewGeozone(geozone, latMin: "28.21022", latMax: "28.21238", lngMin: "82.31492", lngMax: "82.32007");
            CreateNewController(controller, geozone, lat: SLVHelper.GenerateCoordinate("28.21101", "28.21173"), lng: SLVHelper.GenerateCoordinate("82.31693 ", "82.31783"));

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.Users, App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app, and select the testing geozone");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("2. Create a new cabinet controller");
            Step("3. Verify A cabinet controller is created successfully");
            equipmentInventoryPage.CreateDevice(DeviceType.CabinetController, cabinetController, controller, cabinetController, typeOfEquipmentCBN.Key);
            var latCBN = equipmentInventoryPage.CabinetControllerEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
            var lngCBN = equipmentInventoryPage.CabinetControllerEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();

            Step("4. Create a new streetlight");
            Step("5. Verify A streetlight is created successfully");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.CreateDevice(DeviceType.Streetlight, streetlight, controller, streetlight, typeOfEquipmentSTL);
            var latSTL = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
            var lngSTL = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();

            Step("6. Select the cabinet controller for 'Cabinet Controller' field in Identify tab of the streetlight's Editor panel, then save changes");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identify");
            equipmentInventoryPage.StreetlightEditorPanel.SelectCabinetControllerDropDown(cabinetController);
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("7. Verify The geozone tree is updated as following");
            Step(" o The testing geozone's text is '3 devices'");
            Step(" o There is an Expand icon next to the cabinet controller icon");
            Step(" o The streetlight is moved as a group of the cabinet controller");
            VerifyEqual("7. Verify The testing geozone's text is '3 devices'", "3 devices", equipmentInventoryPage.GeozoneTreeMainPanel.GetNodeDevicesCountText(geozone));
            VerifyEqual("[#1429497] 7. Verify There is an Expand icon next to the cabinet controller icon", true, equipmentInventoryPage.GeozoneTreeMainPanel.IsNodeHasExpandIcon(cabinetController));
            equipmentInventoryPage.GeozoneTreeMainPanel.ExpandNode(cabinetController);
            var devices = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNames(cabinetController);
            VerifyEqual("7. Verify The streetlight is moved as a group of the cabinet controller", true, devices.Contains(streetlight));

            Step("8. Switch to the Failure Tracking app");
            var failureTrackingPage = equipmentInventoryPage.AppBar.SwitchTo(App.FailureTracking) as FailureTrackingPage; 

            Step("9. Verify The geozone tree is expand to the selected streetlight. Note: Bug: Currently it expands to Cabinet Controler only.");
            VerifyEqual("9. Verify The geozone tree is expand to the selected streetlight. Note: Bug: Currently it expands to Cabinet Controler only.", streetlight, failureTrackingPage.GeozoneTreeMainPanel.GetSelectedNodeName());

            Step("10. Verify The streetlight is selected in the map");            
            failureTrackingPage.Map.MoveToSelectedDeviceGL();
            VerifyEqual("10. Verify The streetlight is selected in the map", streetlight, failureTrackingPage.Map.GetDeviceNameGL());

            Step("11. Verify The streetlight's Failure Tracking panel displays on the right side");
            VerifyEqual("11. Verify The streetlight's Failure Tracking panel displays on the right side", true, failureTrackingPage.IsDetailsPanelDisplayed());

            Step("12. Select Cabinet Controller in the geozone tree");
            failureTrackingPage.GeozoneTreeMainPanel.SelectNode(cabinetController);

            Step("13. Verify The cabinet controller is selected in the map");
            failureTrackingPage.Map.MoveToSelectedDeviceGL();
            VerifyEqual("13. Verify The cabinet controller is selected in the map", cabinetController, failureTrackingPage.Map.GetDeviceNameGL());

            Step("14. Verify The Cabinet Controller's Failure Tracking panel displays with");
            Step(" o Title: Failure Tracking");
            Step(" o Cabinet Controller Icon and its name");
            Step(" o A section with 'no data' text");
            VerifyEqual("14. Verify Failure Tracking panel displays Title: Failure Tracking", "Failure Tracking", failureTrackingPage.FailureTrackingDetailsPanel.GetPanelTitleText());
            VerifyEqual("14. Verify Failure Tracking panel displays Cabinet Controller Icon", true, failureTrackingPage.FailureTrackingDetailsPanel.HasIconDevice(DeviceType.CabinetController));
            VerifyEqual("14. Verify Failure Tracking panel displays Cabinet Controller Name", cabinetController, failureTrackingPage.FailureTrackingDetailsPanel.GetDeviceNameValueText());
            VerifyEqual("14. Verify A section with 'No data' text", "No data", failureTrackingPage.FailureTrackingDetailsPanel.GetHistoryFailuresMessageText());

            Step("15. Close the cabinet controller's Failure Tracking panel and press the Expand icon of the cabinet controller on geozone tree");
            failureTrackingPage.FailureTrackingDetailsPanel.ClickCloseButton();
            failureTrackingPage.WaitForDetailsPanelDisappeared();
            failureTrackingPage.GeozoneTreeMainPanel.ExpandNode(cabinetController);

            Step("16. Verify The streetlight icon is hidden");
            devices = failureTrackingPage.GeozoneTreeMainPanel.GetChildNodeNames(cabinetController);
            VerifyEqual("16. Verify There is an Expand icon next to the cabinet controller icon", true, failureTrackingPage.GeozoneTreeMainPanel.IsNodeHasExpandIcon(cabinetController));
            VerifyEqual("16. Verify The streetlight icon is hidden", true, !devices.Contains(streetlight));

            Step("17. Press the Expand icon again");
            failureTrackingPage.GeozoneTreeMainPanel.ExpandNode(cabinetController);

            Step("18. Verify The streetlight icon displays again on geozone tree");
            devices = failureTrackingPage.GeozoneTreeMainPanel.GetChildNodeNames(cabinetController);            
            VerifyEqual("18. Verify The streetlight icon displays again on geozone tree", true, devices.Contains(streetlight));

            Step("19. Press the Expand icon next to the testing geozone");
            failureTrackingPage.GeozoneTreeMainPanel.ExpandNode(geozone);

            Step("20. Verify The cabinet controller and the streetlight are hidden on the geozone tree");
            devices = failureTrackingPage.GeozoneTreeMainPanel.GetChildNodeNames(geozone);
            VerifyEqual("20. Verify The cabinet controller icon is hidden", true, !devices.Contains(cabinetController));
            VerifyEqual("20. Verify The streetlight icon is hidden", true, !devices.Contains(streetlight));

            Step("21. Select the cabinet controller icon on the map");
            failureTrackingPage.Map.SelectDeviceGL(lngCBN, latCBN);

            Step("22. Verify The cabinet controller is selected in the map");
            failureTrackingPage.Map.MoveToSelectedDeviceGL();
            VerifyEqual("22. Verify The cabinet controller is selected in the map", cabinetController, failureTrackingPage.Map.GetDeviceNameGL());
            
            Step("23. Verify");
            Step(" o The geozone is expanded and the cabinet controller and the streetlight display again.");
            Step(" o The Cabibet Controller's Failure Tracking panel diplays");
            devices = failureTrackingPage.GeozoneTreeMainPanel.GetChildNodeNames(geozone);
            VerifyEqual("23. Verify The Cabinet controller is displayed", true, devices.Contains(cabinetController));
            VerifyEqual("23. Verify The streetlight is displayed", true, devices.Contains(streetlight));
            VerifyEqual("23. The Cabibet Controller's Failure Tracking panel diplays", true, failureTrackingPage.IsDetailsPanelDisplayed());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_85 Cabinet Controller - SC-1469 - Users can see that association between Cabinet Controller and streetlights in Real-time Control")]
        public void EI_85()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI85");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlight = SLVHelper.GenerateUniqueName("STL");
            var cabinetController = SLVHelper.GenerateUniqueName("CBN");
            var typeOfEquipmentCBN = Settings.CabinetControllerEquipmentTypes.PickRandom();
            var typeOfEquipmentSTL = "ABEL-Vigilon A[Dimmable ballast]";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a testing geozone and a controller");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI85*");
            CreateNewGeozone(geozone, latMin: "28.21030", latMax: "28.21246", lngMin: "82.32039", lngMax: "82.32554");
            CreateNewController(controller, geozone, lat: SLVHelper.GenerateCoordinate("28.21108", "28.21192"), lng: SLVHelper.GenerateCoordinate("82.32247", "82.32346"));

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.Users, App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app, and select the testing geozone");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("2. Create a new cabinet controller");
            Step("3. Verify A cabinet controller is created successfully");
            equipmentInventoryPage.CreateDevice(DeviceType.CabinetController, cabinetController, controller, cabinetController, typeOfEquipmentCBN.Key);
            var latCBN = equipmentInventoryPage.CabinetControllerEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
            var lngCBN = equipmentInventoryPage.CabinetControllerEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();

            Step("4. Create a new streetlight");
            Step("5. Verify A streetlight is created successfully");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.CreateDevice(DeviceType.Streetlight, streetlight, controller, streetlight, typeOfEquipmentSTL);
            var latSTL = equipmentInventoryPage.StreetlightEditorPanel.GetLatitudeValue().Replace(" °", string.Empty).Trim();
            var lngSTL = equipmentInventoryPage.StreetlightEditorPanel.GetLongitudeValue().Replace(" °", string.Empty).Trim();

            Step("6. Select the cabinet controller for 'Cabinet Controller' field in Identify tab of the streetlight's Editor panel, then save changes");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlight);
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Identify");
            equipmentInventoryPage.StreetlightEditorPanel.SelectCabinetControllerDropDown(cabinetController);
            equipmentInventoryPage.StreetlightEditorPanel.ClickSaveButton();
            equipmentInventoryPage.WaitForPreviousActionComplete();

            Step("7. Verify The geozone tree is updated as following");
            Step(" o The testing geozone's text is '3 devices'");
            Step(" o There is an Expand icon next to the cabinet controller icon");
            Step(" o The streetlight is moved as a group of the cabinet controller");
            VerifyEqual("7. Verify The testing geozone's text is '3 devices'", "3 devices", equipmentInventoryPage.GeozoneTreeMainPanel.GetNodeDevicesCountText(geozone));
            VerifyEqual("[#1429497] 7. Verify There is an Expand icon next to the cabinet controller icon", true, equipmentInventoryPage.GeozoneTreeMainPanel.IsNodeHasExpandIcon(cabinetController));
            equipmentInventoryPage.GeozoneTreeMainPanel.ExpandNode(cabinetController);
            var devices = equipmentInventoryPage.GeozoneTreeMainPanel.GetChildNodeNames(cabinetController);
            VerifyEqual("7. Verify The streetlight is moved as a group of the cabinet controller", true, devices.Contains(streetlight));

            Step("8. Switch to the Real-Time Control app");
            var realTimeControlPage = equipmentInventoryPage.AppBar.SwitchTo(App.RealTimeControl) as RealTimeControlPage;

            Step("9. Verify The geozone tree is expand to the selected streetlight. Note: Bug: Currently it expands to Cabinet Controler only.");
            VerifyEqual("9. Verify The geozone tree is expand to the selected streetlight. Note: Bug: Currently it expands to Cabinet Controler only.", streetlight, realTimeControlPage.GeozoneTreeMainPanel.GetSelectedNodeName());

            Step("10. Verify The streetlight is selected in the map");
            realTimeControlPage.Map.MoveToSelectedDeviceGL();
            VerifyEqual("10. Verify The streetlight is selected in the map", streetlight, realTimeControlPage.Map.GetDeviceNameGL());

            Step("11. Verify The streetlight's LPC widget displays on the right side");
            VerifyEqual("11. Verify The streetlight's LPC widget displays on the right side", true, realTimeControlPage.IsStreetlightWidgetDisplayed());

            Step("12. Select Cabinet Controller in the geozone tree");
            realTimeControlPage.GeozoneTreeMainPanel.SelectNode(cabinetController);

            Step("13. Verify The cabinet controller is selected in the map");
            realTimeControlPage.Map.MoveToSelectedDeviceGL();
            VerifyEqual("13. Verify The cabinet controller is selected in the map", cabinetController, realTimeControlPage.Map.GetDeviceNameGL());

            Step("14. Verify The Cabinet Controller's LPC widget displays with");
            Step(" o Note: currently there is no simulator available, so the widget is empty. Would be updated later.");
            Warning("Note: currently there is no simulator available, so the widget is empty. Would be updated later.");

            Step("15. Press Information button");
            Step("16. Verify The Cabinet Controller's LPC widget is updated to Information widget");
            Step(" o Note: currently there is no simulator available, so the widget is empty. Would be updated later.");
            Step("17. Press on the Information widget");
            Step("18. Verify The Information widget is updated to Cabinet Controller's LPC widget");

            Step("19. Close the cabinet controller's LPC widget and press the Expand icon of the cabinet controller on geozone tree");
            realTimeControlPage.GeozoneTreeMainPanel.ExpandNode(cabinetController);
           
            Step("20. Verify The streetlight icon is hidden");
            devices = realTimeControlPage.GeozoneTreeMainPanel.GetChildNodeNames(cabinetController);
            VerifyEqual("20. Verify There is an Expand icon next to the cabinet controller icon", true, realTimeControlPage.GeozoneTreeMainPanel.IsNodeHasExpandIcon(cabinetController));
            VerifyEqual("20. Verify The streetlight icon is hidden", true, !devices.Contains(streetlight));

            Step("21. Press the Expand icon again");
            realTimeControlPage.GeozoneTreeMainPanel.ExpandNode(cabinetController);

            Step("22. Verify The streetlight icon displays again on geozone tree");
            devices = realTimeControlPage.GeozoneTreeMainPanel.GetChildNodeNames(cabinetController);
            VerifyEqual("22. Verify The streetlight icon displays again on geozone tree", true, devices.Contains(streetlight));

            Step("23. Press the Expand icon next to the testing geozone");
            realTimeControlPage.GeozoneTreeMainPanel.ExpandNode(geozone);

            Step("24. Verify The cabinet controller and the streetlight are hidden on the geozone tree");
            devices = realTimeControlPage.GeozoneTreeMainPanel.GetChildNodeNames(geozone);
            VerifyEqual("24. Verify The cabinet controller icon is hidden", true, !devices.Contains(cabinetController));
            VerifyEqual("24. Verify The streetlight icon is hidden", true, !devices.Contains(streetlight));

            Step("25. Select the cabinet controller icon on the map");
            realTimeControlPage.Map.SelectDeviceGL(lngCBN, latCBN);

            Step("26. Verify The cabinet controller is selected in the map");
            realTimeControlPage.Map.MoveToSelectedDeviceGL();
            VerifyEqual("26. Verify The cabinet controller is selected in the map", cabinetController, realTimeControlPage.Map.GetDeviceNameGL());

            Step("27. Verify");
            Step(" o The geozone is expanded and the cabinet controller and the streetlight display again.");
            Step(" o The Cabibet Controller's LPC widget diplays");
            devices = realTimeControlPage.GeozoneTreeMainPanel.GetChildNodeNames(geozone);
            VerifyEqual("27. Verify The cabinet controller icon is displayed", true, devices.Contains(cabinetController));
            VerifyEqual("27. Verify The streetlight icon is displayed", true, devices.Contains(streetlight));
            VerifyEqual("27. Verify The Cabibet Controller's LPC widget diplays", true, realTimeControlPage.IsCabinetControllerWidgetDisplayed());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_1306558 Show Lamp failure threshold and Lamp warmup time for streetlight with type Lumnex Viaduct Controller only")]
        public void EI_1306558()
        {
            var geozone = SLVHelper.GenerateUniqueName("GZNEI1306558");
            var controller = SLVHelper.GenerateUniqueName("CTRL");
            var streetlightLumnex = SLVHelper.GenerateUniqueName("STL01");
            var streetlightNonLumnex = SLVHelper.GenerateUniqueName("STL02");
            var typeOfEquipmentLumnex = "Lumnex Viaduct Controller";
            var typeOfEquipmentNonLumnex = "ABEL-Vigilon A[Dimmable ballast]";

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - Create a testing geozone and a controller");
            Step("**** Precondition ****\n");

            Step("-> Create data for testing");
            DeleteGeozones("GZNEI1306558*");
            CreateNewGeozone(geozone);
            CreateNewController(controller, geozone);

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.Users, App.EquipmentInventory);

            Step("1. Go to Equipment Inventory app, and select the testing geozone");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();

            Step("2. Create a new streetlight with type: Lumnex Viaduct Controller");
            equipmentInventoryPage.CreateDevice(DeviceType.Streetlight, streetlightLumnex, controller, streetlightLumnex, typeOfEquipmentLumnex);

            Step("3. Verify A streetlight is created successfully");
            var actualName = equipmentInventoryPage.StreetlightEditorPanel.GetNameValue();
            VerifyEqual(string.Format("3. Verify A streetlight '{0}' is created successfully", streetlightLumnex), streetlightLumnex , actualName);

            Step("4. Create another streetlight with any type(but not Lumnex Viaduct Controller)");
            Step("5. Verify A streetlight is created successfully");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(geozone);
            equipmentInventoryPage.WaitForGeozoneEditorPanelDisplayed();
            equipmentInventoryPage.CreateDevice(DeviceType.Streetlight, streetlightNonLumnex, controller, streetlightNonLumnex, typeOfEquipmentNonLumnex);
            actualName = equipmentInventoryPage.StreetlightEditorPanel.GetNameValue();
            VerifyEqual(string.Format("5. Verify A streetlight '{0}' is created successfully", streetlightNonLumnex), streetlightNonLumnex, actualName);

            Step("6. Select the streetlight with type: Lumnex Viaduct Controller, and switch to Inventory tab in the Streetlight Editor panel");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightLumnex);
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");

            Step("7. Expand Lamp section if it not expaned, and check the Lamp failure threshold and Lamp warmup time");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroup("Lamp");

            Step("8. Verify There are 2 attributes:");
            Step(" - Label: Lamp failure threshold; Textbox: input only number");
            Step(" - Label: Lamp warmup time; Textbox: input only number");
            VerifyEqual("8. Verify Lamp section's attributes contains Lamp failure threshold", true, equipmentInventoryPage.StreetlightEditorPanel.IsLampFailureThresholdExisted());
            VerifyEqual("8. Verify Lamp failure threshold label is 'Lamp failure threshold'", "Lamp failure threshold", equipmentInventoryPage.StreetlightEditorPanel.GetLampFailureThresholdText());
            VerifyEqual("8. Verify Lamp failure threshold input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsLampFailureThresholdNumericInputDisplayed());
            VerifyEqual("8. Verify Lamp section's attributes contains Lamp warmup time", true, equipmentInventoryPage.StreetlightEditorPanel.IsLampWarmupTimeExisted());
            VerifyEqual("8. Verify Lamp failure threshold label is 'Lamp warmup time'", "Lamp warmup time", equipmentInventoryPage.StreetlightEditorPanel.GetLampWarmupTimeText());
            VerifyEqual("8. Verify Lamp warmup time input is displayed", true, equipmentInventoryPage.StreetlightEditorPanel.IsLampWarmupTimeNumericInputDisplayed());

            Step("9. Select the streetlight with random type and switch to Inventory tab in the Streetlight Editor panel");
            equipmentInventoryPage.GeozoneTreeMainPanel.SelectNode(streetlightNonLumnex);
            equipmentInventoryPage.StreetlightEditorPanel.SelectTab("Inventory");
            equipmentInventoryPage.StreetlightEditorPanel.ExpandGroup("Lamp");

            Step("10. Verify Lamp section's attributes does not contain Lamp failure threshold and Lamp warmup time");
            VerifyEqual("8. Verify Lamp section's attributes does not contain Lamp failure threshold", true, !equipmentInventoryPage.StreetlightEditorPanel.IsLampFailureThresholdExisted());
            VerifyEqual("8. Verify Lamp section's attributes does not contain Lamp warmup time", true, !equipmentInventoryPage.StreetlightEditorPanel.IsLampWarmupTimeExisted());

            try
            {
                DeleteGeozone(geozone);
            }
            catch { }
        }

        [Test, DynamicRetry]
        [Description("EI_1377758_1377757 Map search - markers remain on the map (bug 1332086 and 1293833)")]
        public void EI_1377758_1377757()
        {
            var testData = GetTestDataOfEI_1377758_1377757();
            var location1 = testData["Location1"].ToString();
            var location2 = testData["Location2"].ToString();

            Step("**** Precondition ****");
            Step(" - User has logged in successfully");
            Step(" - This test should be checked on screens having Map Search like: Equipment Inventory, Failure Tracking, Real-time Control, Batch Control");
            Step(" - Prepare 2 known locations which are near each other.");
            Step("  + Ho Chi Minh Mausoleum, Quảng Trường Ba Đình, Quận Ba Đình, Hanoi 118700, Vietnam");
            Step("  + Ho Chi Minh Museum, Chùa Một Cột, Quận Ba Đình, Hanoi 118200, Vietnam");
            Step("**** Precondition ****\n");

            var loginPage = Browser.OpenCMS();
            var desktopPage = loginPage.LoginAsValidUser(Settings.Users["DefaultTest"].Username, Settings.Users["DefaultTest"].Password);
            desktopPage.InstallAppsIfNotExist(App.EquipmentInventory, App.FailureTracking, App.RealTimeControl, App.BatchControl);

            Step("1. Go to the testing screen");
            var equipmentInventoryPage = desktopPage.GoToApp(App.EquipmentInventory) as EquipmentInventoryPage;

            Step("2. Verify There is a button with icon: Globe icon on the top-right corner of the GeoZone tree");
            VerifyEqual("2. Verify There is a button with icon: Globe icon on the top-right corner of the GeoZone tree", true, equipmentInventoryPage.GeozoneTreeMainPanel.IsMapFilterButtonVisible());

            Step("3. Click the button and input the first location, then click on the 1 result in the list");
            equipmentInventoryPage.GeozoneTreeMainPanel.ClickMapSearchButton();
            equipmentInventoryPage.GeozoneTreeMainPanel.WaitForMapSearchPanelDisplayed();
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.EnterSearchInput(location1);
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForSuggestionsDisplayed();
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.SelectSearchSuggestion();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForLocationSearchMarkerDisplayed();
            Wait.ForGLMapStopFlying();

            Step("4. Verify There is only one Orange location icon on the center of the map");
            VerifyEqual("4. Verify There is location icon on the center of the map", true, equipmentInventoryPage.Map.IsLocationSearchMarkerDisplayed());

            Step("5. Verify The search address is displayed below the marker");
            var actualMarkerAddress = equipmentInventoryPage.Map.GetLocationSearchMarkerCaption();
            VerifyEqual("5. Verify The search address is displayed below the marker", location1, actualMarkerAddress);

            Step("6. Press X icon on the Search box, and input the second location, then click on the 1 result in the list");
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.ClickClearSearchButton();
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForClearSearchButtonDisappeared();
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.EnterSearchInput(location2);
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForSuggestionsDisplayed();
            equipmentInventoryPage.GeozoneTreeMainPanel.MapSearchPanel.SelectSearchSuggestion();
            equipmentInventoryPage.WaitForPreviousActionComplete();
            equipmentInventoryPage.Map.WaitForLocationSearchMarkerDisplayed();
            Wait.ForGLMapStopFlying();

            Step("7. Verify There is only one Orange location icon on the center of the map");
            VerifyEqual("7. Verify There is location icon on the center of the map", true, equipmentInventoryPage.Map.IsLocationSearchMarkerDisplayed());

            Step("8. Verify The search address is displayed below the marker");
            actualMarkerAddress = equipmentInventoryPage.Map.GetLocationSearchMarkerCaption();
            VerifyEqual("8. Verify The search address is displayed below the marker", location2, actualMarkerAddress);

            Step("9. Repeat the test with the other screen");
            Step("--> Switch to Failure Tracking");
            var failureTrackingPage = equipmentInventoryPage.AppBar.SwitchTo(App.FailureTracking) as FailureTrackingPage;

            Step("2.1. Verify There is a button with icon: Globe icon on the top-right corner of the GeoZone tree");
            VerifyEqual("2.1. Verify There is a button with icon: Globe icon on the top-right corner of the GeoZone tree", true, failureTrackingPage.GeozoneTreeMainPanel.IsMapFilterButtonVisible());

            Step("3.1. Click the button and input the first location, then click on the 1 result in the list");
            failureTrackingPage.GeozoneTreeMainPanel.ClickMapSearchButton();
            failureTrackingPage.GeozoneTreeMainPanel.WaitForMapSearchPanelDisplayed();
            failureTrackingPage.GeozoneTreeMainPanel.MapSearchPanel.EnterSearchInput(location1);
            failureTrackingPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForSuggestionsDisplayed();
            failureTrackingPage.GeozoneTreeMainPanel.MapSearchPanel.SelectSearchSuggestion();
            failureTrackingPage.WaitForPreviousActionComplete();
            failureTrackingPage.Map.WaitForLocationSearchMarkerDisplayed();
            Wait.ForGLMapStopFlying();

            Step("4.1. Verify There is only one Orange location icon on the center of the map");
            VerifyEqual("4.1. Verify There is location icon on the center of the map", true, failureTrackingPage.Map.IsLocationSearchMarkerDisplayed());

            Step("5.1. Verify The search address is displayed below the marker");
            actualMarkerAddress = failureTrackingPage.Map.GetLocationSearchMarkerCaption();
            VerifyEqual("5.1. Verify The search address is displayed below the marker", location1, actualMarkerAddress);

            Step("6.1. Press X icon on the Search box, and input the second location, then click on the 1 result in the list");
            failureTrackingPage.GeozoneTreeMainPanel.MapSearchPanel.ClickClearSearchButton();
            failureTrackingPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForClearSearchButtonDisappeared();
            failureTrackingPage.GeozoneTreeMainPanel.MapSearchPanel.EnterSearchInput(location2);
            failureTrackingPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForSuggestionsDisplayed();
            failureTrackingPage.GeozoneTreeMainPanel.MapSearchPanel.SelectSearchSuggestion();
            failureTrackingPage.WaitForPreviousActionComplete();
            failureTrackingPage.Map.WaitForLocationSearchMarkerDisplayed();
            Wait.ForGLMapStopFlying();

            Step("7.1. Verify There is only one Orange location icon on the center of the map");
            VerifyEqual("7.1. Verify There is location icon on the center of the map", true, failureTrackingPage.Map.IsLocationSearchMarkerDisplayed());

            Step("8.1. Verify The search address is displayed below the marker");
            actualMarkerAddress = failureTrackingPage.Map.GetLocationSearchMarkerCaption();
            VerifyEqual("8.1. Verify The search address is displayed below the marker", location2, actualMarkerAddress);

            Step("--> Switch to RealTime Control");
            var realTimeControlPage = failureTrackingPage.AppBar.SwitchTo(App.RealTimeControl) as RealTimeControlPage;

            Step("2.2. Verify There is a button with icon: Globe icon on the top-right corner of the GeoZone tree");
            VerifyEqual("2.2. Verify There is a button with icon: Globe icon on the top-right corner of the GeoZone tree", true, realTimeControlPage.GeozoneTreeMainPanel.IsMapFilterButtonVisible());

            Step("3.2. Click the button and input the first location, then click on the 1 result in the list");
            realTimeControlPage.GeozoneTreeMainPanel.ClickMapSearchButton();
            realTimeControlPage.GeozoneTreeMainPanel.WaitForMapSearchPanelDisplayed();
            realTimeControlPage.GeozoneTreeMainPanel.MapSearchPanel.EnterSearchInput(location1);
            realTimeControlPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForSuggestionsDisplayed();
            realTimeControlPage.GeozoneTreeMainPanel.MapSearchPanel.SelectSearchSuggestion();
            realTimeControlPage.WaitForPreviousActionComplete();
            realTimeControlPage.Map.WaitForLocationSearchMarkerDisplayed();
            Wait.ForGLMapStopFlying();

            Step("4.2. Verify There is only one Orange location icon on the center of the map");
            VerifyEqual("4.2. Verify There is location icon on the center of the map", true, realTimeControlPage.Map.IsLocationSearchMarkerDisplayed());

            Step("5.2. Verify The search address is displayed below the marker");
            actualMarkerAddress = realTimeControlPage.Map.GetLocationSearchMarkerCaption();
            VerifyEqual("5.2. Verify The search address is displayed below the marker", location1, actualMarkerAddress);

            Step("6.2. Press X icon on the Search box, and input the second location, then click on the 1 result in the list");
            realTimeControlPage.GeozoneTreeMainPanel.MapSearchPanel.ClickClearSearchButton();
            realTimeControlPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForClearSearchButtonDisappeared();
            realTimeControlPage.GeozoneTreeMainPanel.MapSearchPanel.EnterSearchInput(location2);
            realTimeControlPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForSuggestionsDisplayed();
            realTimeControlPage.GeozoneTreeMainPanel.MapSearchPanel.SelectSearchSuggestion();
            realTimeControlPage.WaitForPreviousActionComplete();
            realTimeControlPage.Map.WaitForLocationSearchMarkerDisplayed();
            Wait.ForGLMapStopFlying();

            Step("7.2. Verify There is only one Orange location icon on the center of the map");
            VerifyEqual("7.2. Verify There is location icon on the center of the map", true, realTimeControlPage.Map.IsLocationSearchMarkerDisplayed());

            Step("8.2. Verify The search address is displayed below the marker");
            actualMarkerAddress = realTimeControlPage.Map.GetLocationSearchMarkerCaption();
            VerifyEqual("8.2. Verify The search address is displayed below the marker", location2, actualMarkerAddress);

            Step("--> Switch to RealTime Control");
            var batchControlPage = failureTrackingPage.AppBar.SwitchTo(App.BatchControl) as BatchControlPage;

            Step("2.3. Verify There is a button with icon: Globe icon on the top-right corner of the GeoZone tree");
            VerifyEqual("23. Verify There is a button with icon: Globe icon on the top-right corner of the GeoZone tree", true, batchControlPage.GeozoneTreeMainPanel.IsMapFilterButtonVisible());

            Step("3.3. Click the button and input the first location, then click on the 1 result in the list");
            batchControlPage.GeozoneTreeMainPanel.ClickMapSearchButton();
            batchControlPage.GeozoneTreeMainPanel.WaitForMapSearchPanelDisplayed();
            batchControlPage.GeozoneTreeMainPanel.MapSearchPanel.EnterSearchInput(location1);
            batchControlPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForSuggestionsDisplayed();
            batchControlPage.GeozoneTreeMainPanel.MapSearchPanel.SelectSearchSuggestion();
            batchControlPage.WaitForPreviousActionComplete();
            batchControlPage.Map.WaitForLocationSearchMarkerDisplayed();
            Wait.ForGLMapStopFlying();

            Step("4.3. Verify There is only one Orange location icon on the center of the map");
            VerifyEqual("4.3. Verify There is location icon on the center of the map", true, batchControlPage.Map.IsLocationSearchMarkerDisplayed());

            Step("5.3. Verify The search address is displayed below the marker");
            actualMarkerAddress = batchControlPage.Map.GetLocationSearchMarkerCaption();
            VerifyEqual("5.3. Verify The search address is displayed below the marker", location1, actualMarkerAddress);

            Step("6.3. Press X icon on the Search box, and input the second location, then click on the 1 result in the list");
            batchControlPage.GeozoneTreeMainPanel.MapSearchPanel.ClickClearSearchButton();
            batchControlPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForClearSearchButtonDisappeared();
            batchControlPage.GeozoneTreeMainPanel.MapSearchPanel.EnterSearchInput(location2);
            batchControlPage.GeozoneTreeMainPanel.MapSearchPanel.WaitForSuggestionsDisplayed();
            batchControlPage.GeozoneTreeMainPanel.MapSearchPanel.SelectSearchSuggestion();
            batchControlPage.WaitForPreviousActionComplete();
            batchControlPage.Map.WaitForLocationSearchMarkerDisplayed();
            Wait.ForGLMapStopFlying();

            Step("7.3. Verify There is only one Orange location icon on the center of the map");
            VerifyEqual("7.3. Verify There is location icon on the center of the map", true, batchControlPage.Map.IsLocationSearchMarkerDisplayed());

            Step("8.3. Verify The search address is displayed below the marker");
            actualMarkerAddress = realTimeControlPage.Map.GetLocationSearchMarkerCaption();
            VerifyEqual("8.3. Verify The search address is displayed below the marker", location2, actualMarkerAddress);
        }

        #endregion //Test Cases

        #region Private methods   

        public bool CompareLatLong(string expected, string actual)
        {
            var formattedExpected = expected.SplitAndGetAt(new char[] { ' ' }, 0);
            var formattedActual = actual.SplitAndGetAt(new char[] { ' ' }, 0);

            var arrExpected = formattedExpected.SplitEx(new char[] { '.' });
            var arrActual = formattedActual.SplitEx(new char[] { '.' });

            var intExpectedNumber = int.Parse(arrExpected[0]);
            var intActualNumber = int.Parse(arrActual[0]);
            var decExpectedNumber = int.Parse(arrExpected[1]);
            var decActualNumber = int.Parse(arrActual[1]);

            return expected.Equals(actual)
                || (intExpectedNumber.Equals(intActualNumber) && decExpectedNumber == decActualNumber + 1)
                || (intExpectedNumber.Equals(intActualNumber) && decActualNumber == decExpectedNumber + 1);
        }

        /// <summary>
        /// Increase 1 the last number of Latitude/Longitude
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public string IncreaseLatLong(string value)
        {
            var formattedValue = value.SplitAndGetAt(new char[] { ' ' }, 0);

            var decValue = double.Parse(formattedValue);

            //return string.Format("{0} °", decValue + 0.00001d);
            return string.Format("{0}", decValue + 0.00001d);
        }

        private void EnterVirtualEnergyConsumptionRandomValues(EquipmentInventoryPage page)
        {
            page.GeozoneEditorPanel.EnterJanuaryNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.GeozoneEditorPanel.EnterFebruaryNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.GeozoneEditorPanel.EnterMarchNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.GeozoneEditorPanel.EnterAprilNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.GeozoneEditorPanel.EnterMayNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.GeozoneEditorPanel.EnterJuneNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.GeozoneEditorPanel.EnterJulyNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.GeozoneEditorPanel.EnterAugustNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.GeozoneEditorPanel.EnterSeptemberNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.GeozoneEditorPanel.EnterOctoberNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.GeozoneEditorPanel.EnterNovemberNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.GeozoneEditorPanel.EnterDecemberNumericInput(SLVHelper.GenerateStringInteger(99999));
        }

        private void EnterControllerEditableValues(EquipmentInventoryPage page)
        {
            page.ControllerEditorPanel.SelectTab("Identity");
            page.ControllerEditorPanel.ExpandGroupsActiveTab();
            //Identity of the controller            
            page.ControllerEditorPanel.EnterHardwareRevisionInput(SLVHelper.GenerateString(8));
            page.ControllerEditorPanel.EnterSoftwareVersionInput(SLVHelper.GenerateString(8));

            page.ControllerEditorPanel.SelectRandomCommMediaDropDown();
            page.ControllerEditorPanel.EnterUniqueAddressInput(SLVHelper.GenerateMACAddress());
            page.ControllerEditorPanel.SelectRandomRealtimeCommandDropDown();
            page.ControllerEditorPanel.SelectRandomGzipPayloadDropDown();
            page.ControllerEditorPanel.SelectRandomControllerCacheModeDropDown();

            //Communication
            page.ControllerEditorPanel.EnterGatewayHostNameInput(SLVHelper.GenerateString(9));
            page.ControllerEditorPanel.EnterNetworkIdInput(SLVHelper.GenerateString());
            page.ControllerEditorPanel.EnterServerWebAppUrlInput(SLVHelper.GenerateString(15));
            page.ControllerEditorPanel.EnterUsernameInput(SLVHelper.GenerateString(8));
            page.ControllerEditorPanel.EnterPasswordInput(SLVHelper.GenerateString(8));
            page.ControllerEditorPanel.SelectRandomCommissionModeDropDown();
            page.ControllerEditorPanel.EnterConfigPathInput(SLVHelper.GenerateString());
            page.ControllerEditorPanel.EnterRealtimePathInput(SLVHelper.GenerateString());
            page.ControllerEditorPanel.TickGroupDimCommandCheckbox(!page.ControllerEditorPanel.GetGroupDimCommandValue());
            page.ControllerEditorPanel.TickGlobalDimCommandCheckbox(!page.ControllerEditorPanel.GetGlobalDimCommandValue());
            page.ControllerEditorPanel.EnterMaxDevicesNumericInput(SLVHelper.GenerateStringInteger(999));
            page.ControllerEditorPanel.TickConsiderStreetLightsCheckbox(!page.ControllerEditorPanel.GetConsiderStreetLightsValue());
            page.ControllerEditorPanel.TickConsiderReplaceOlcCheckbox(!page.ControllerEditorPanel.GetConsiderReplaceOlcValue());
            page.ControllerEditorPanel.EnterReportTimeInput(string.Format("{0:D2}:00", SLVHelper.GenerateInteger(23)));
            page.ControllerEditorPanel.EnterReportFrequencyNumericInput(SLVHelper.GenerateStringInteger(99));
            page.ControllerEditorPanel.EnterTimeoutNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.ControllerEditorPanel.EnterMaxConnectionsNumericInput(SLVHelper.GenerateStringInteger(99));
            page.ControllerEditorPanel.EnterRequestIntervalNumericInput(SLVHelper.GenerateStringInteger(999));
            page.ControllerEditorPanel.TickInclLatencyIntervalCheckbox(!page.ControllerEditorPanel.GetInclLatencyIntervalValue());

            page.ControllerEditorPanel.SelectTab("Inventory");
            page.ControllerEditorPanel.ExpandGroupsActiveTab();
            //Location
            page.ControllerEditorPanel.EnterAddress1Input(SLVHelper.GenerateString(15));
            page.ControllerEditorPanel.EnterAddress2Input(SLVHelper.GenerateString(20));
            page.ControllerEditorPanel.EnterCityInput(SLVHelper.GenerateString(10));
            page.ControllerEditorPanel.EnterZipCodeInput(SLVHelper.GenerateString(3).ToUpper());
            page.ControllerEditorPanel.EnterMapNumberInput(SLVHelper.GenerateStringInteger(999));
            //About this cabinet
            page.ControllerEditorPanel.EnterControllerInstallDateInput(DateTime.Now.ToString("yyyy-MM-dd"));
            page.ControllerEditorPanel.EnterCommentInput(SLVHelper.GenerateString(10));

            page.ControllerEditorPanel.SelectTab("Time");
            page.ControllerEditorPanel.ExpandGroupsActiveTab();
            page.ControllerEditorPanel.SelectTimezoneDropDown(string.Format("GMT+{0:D2}:00", SLVHelper.GenerateInteger(12)));
        }

        private void EnterStreetlightEditableValues(EquipmentInventoryPage page)
        {
            page.StreetlightEditorPanel.SelectTab("Identity");
            page.StreetlightEditorPanel.ExpandGroupsActiveTab();
            //Identity of the light point
            //page.StreetlightEditorPanel.SelectRandomControllerIdDropDown();
            //Control system
            page.StreetlightEditorPanel.SelectRandomDimmingGroupDropDown();
            page.StreetlightEditorPanel.EnterUniqueAddressInput(SLVHelper.GenerateMACAddress());            
            page.StreetlightEditorPanel.EnterControllerInstallDateInput(string.Format(@"{0}-{1}-{2}", SLVHelper.GenerateStringInteger(1900, DateTime.Now.AddYears(-1).Year), SLVHelper.GenerateInteger(12).ToString("D2"), SLVHelper.GenerateInteger(28).ToString("D2")));
            page.StreetlightEditorPanel.SelectRandomInstallStatusDropDown();
            page.StreetlightEditorPanel.EnterSerialNumberInput(SLVHelper.GenerateStringInteger(99999999));
            page.StreetlightEditorPanel.EnterDeviceHwVersionInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterDeviceSwVersionInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterDeviceHwTypeInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterNicSerialNumberInput(SLVHelper.GenerateString());            
            page.StreetlightEditorPanel.EnterNicSwVersionInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterNicHwVersionInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterNicHwModelInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.SelectRandomNicFallbackModeDropDown();
            page.StreetlightEditorPanel.EnterManufactoringDateInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterDeviceNameInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterDeviceManufacturerInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterUtilityIdInput(SLVHelper.GenerateStringInteger(99999));
            page.StreetlightEditorPanel.EnterMeterProgramIdInput(SLVHelper.GenerateStringInteger(99999));
            page.StreetlightEditorPanel.EnterCatalogNumberInput(SLVHelper.GenerateStringInteger(99999));
            page.StreetlightEditorPanel.EnterReferenceInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterElexonChargeCodeInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterTimeoutNumericInput(SLVHelper.GenerateStringInteger(9999));
            page.StreetlightEditorPanel.EnterRetriesNumericInput(SLVHelper.GenerateStringInteger(1000));
            page.StreetlightEditorPanel.TickIsCpdCheckbox(!page.StreetlightEditorPanel.GetIsCpdValue());

            page.StreetlightEditorPanel.SelectTab("Inventory");
            page.StreetlightEditorPanel.ExpandGroupsActiveTab();
            //Location
            page.StreetlightEditorPanel.EnterPremiseInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterAddress1Input(SLVHelper.GenerateString(15));
            page.StreetlightEditorPanel.EnterAddress2Input(SLVHelper.GenerateString(20));
            page.StreetlightEditorPanel.EnterCityInput(SLVHelper.GenerateString(10));
            page.StreetlightEditorPanel.EnterZipCodeInput(SLVHelper.GenerateString(3).ToUpper());
            page.StreetlightEditorPanel.EnterMapNumberInput(SLVHelper.GenerateStringInteger(999));
            page.StreetlightEditorPanel.SelectRandomLocationTypeDropDown();
            page.StreetlightEditorPanel.EnterUtilityLocationIdInput(SLVHelper.GenerateStringInteger(999));
            //page.StreetlightEditorPanel.EnterPictureFilePathInput(SLVHelper.GenerateString(11));

            //Customer
            page.StreetlightEditorPanel.EnterAccountNumberInput(SLVHelper.GenerateStringInteger(99999));
            page.StreetlightEditorPanel.EnterCustomerNumberInput(SLVHelper.GenerateStringInteger(99999));
            page.StreetlightEditorPanel.EnterCustomerNameInput(SLVHelper.GenerateString());

            //Lamp
            page.StreetlightEditorPanel.SelectRandomLampTypeDropDown();
            page.StreetlightEditorPanel.EnterLampWattageNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.StreetlightEditorPanel.EnterFixedSavedPowerNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.StreetlightEditorPanel.EnterLampInstallDateInput(string.Format(@"{0}/{1}/{2}", SLVHelper.GenerateStringInteger(12), SLVHelper.GenerateStringInteger(28), SLVHelper.GenerateStringInteger(1900, DateTime.Now.AddYears(-1).Year)));
            page.StreetlightEditorPanel.EnterPowerFactorThresholdNumericInput(SLVHelper.GenerateStringDouble());
            page.StreetlightEditorPanel.EnterOnLuxLevelNumericInput(SLVHelper.GenerateStringInteger(999));
            page.StreetlightEditorPanel.EnterOffLuxLevelNumericInput(SLVHelper.GenerateStringInteger(999));

            //Driver or ballast
            page.StreetlightEditorPanel.EnterBallastTypeInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.SelectRandomDimmingInterfaceDropDown();
            page.StreetlightEditorPanel.EnterBallastBrandInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterPoleHeadInstallInput(SLVHelper.GenerateString());

            //Luminaire
            page.StreetlightEditorPanel.EnterLuminaireBrandInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.SelectLuminaireTypeDropDown(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterLuminaireModelInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterLightDistributionInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.SelectOrientationDropDown(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterColorCodeInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterStatusInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterLuminaireInstallDateInput(SLVHelper.GenerateString());

            //Bracket
            page.StreetlightEditorPanel.EnterBracketBrandInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterBracketModelInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterBracketTypeInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterBracketColorInput(SLVHelper.GenerateString());

            //Pole or support
            page.StreetlightEditorPanel.EnterPoleTypeInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterPoleHeightInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterPoleShapeInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterPoleMaterialInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterPoleColorCodeInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterPoleStatusInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterTypeGroundFixingInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterPoleInstallDateInput(SLVHelper.GenerateString());
            //Comment
            page.StreetlightEditorPanel.EnterCommentInput(SLVHelper.GenerateString(25));

            page.StreetlightEditorPanel.SelectTab("Electricity network");
            page.StreetlightEditorPanel.ExpandGroupsActiveTab();
            //Network
            page.StreetlightEditorPanel.SelectRandomEnergySupplierDropDown();
            page.StreetlightEditorPanel.EnterNetworkTypeInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.SelectRandomSupplyVoltageDropDown();
            page.StreetlightEditorPanel.EnterCabinetInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterTransformerInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterFeederNumberInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterSwitchInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterSubstationInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterSegmentNumericInput(SLVHelper.GenerateStringInteger(999));
            page.StreetlightEditorPanel.EnterSectionInput(SLVHelper.GenerateString());
            page.StreetlightEditorPanel.EnterHighVoltageThresholdNumericInput(SLVHelper.GenerateStringInteger(1000));
            page.StreetlightEditorPanel.EnterLowVoltageThresholdNumericInput(SLVHelper.GenerateStringInteger(1000));
        }

        private void EnterLampTypesPropertiesSectionValues(EquipmentInventoryPage page, bool isNew = true)
        {
            if (isNew)
            {
                page.StreetlightEditorPanel.LampTypePanel.EnterNameInput(SLVHelper.GenerateUniqueName("NewLampType"));
                page.StreetlightEditorPanel.LampTypePanel.EnterIdentifierInput(SLVHelper.GenerateString(25));
            }
            else
            {
                page.StreetlightEditorPanel.LampTypePanel.EnterNameInput(SLVHelper.GenerateUniqueName("UpdatedLampType"));
            }
            page.StreetlightEditorPanel.LampTypePanel.EnterLampWattageNumericInput(SLVHelper.GenerateStringInteger(2000));
            page.StreetlightEditorPanel.LampTypePanel.EnterWarmupTimeNumericInput(SLVHelper.GenerateStringInteger(60));
            page.StreetlightEditorPanel.LampTypePanel.EnterILevel1MinNumericInput(SLVHelper.GenerateStringInteger(5000));
            page.StreetlightEditorPanel.LampTypePanel.EnterILevel1MaxNumericInput(SLVHelper.GenerateStringInteger(10000));
            page.StreetlightEditorPanel.LampTypePanel.EnterILevel2MinNumericInput(SLVHelper.GenerateStringInteger(5000));
            page.StreetlightEditorPanel.LampTypePanel.EnterILevel2MaxNumericInput(SLVHelper.GenerateStringInteger(10000));
            page.StreetlightEditorPanel.LampTypePanel.EnterINoNumericInput(SLVHelper.GenerateStringInteger(5000));
            page.StreetlightEditorPanel.LampTypePanel.EnterPfMinNumericInput(SLVHelper.GenerateStringDouble());
            page.StreetlightEditorPanel.LampTypePanel.EnterVNoNumericInput(SLVHelper.GenerateStringInteger(500));
            page.StreetlightEditorPanel.LampTypePanel.EnterVMinNumericInput(SLVHelper.GenerateStringInteger(500));
            page.StreetlightEditorPanel.LampTypePanel.EnterVMaxNumericInput(SLVHelper.GenerateStringInteger(500));
            page.StreetlightEditorPanel.LampTypePanel.EnterMinOutputValueNumericInput(SLVHelper.GenerateStringInteger(100));
            page.StreetlightEditorPanel.LampTypePanel.EnterControlVoltMaxNumericInput(SLVHelper.GenerateStringInteger(10));
            page.StreetlightEditorPanel.LampTypePanel.EnterBhMaxNumericInput(SLVHelper.GenerateStringInteger(200000));
            page.StreetlightEditorPanel.LampTypePanel.EnterPowerMaxNumericInput(SLVHelper.GenerateStringInteger(200));
            page.StreetlightEditorPanel.LampTypePanel.EnterCloHoursIncrementNumericInput(SLVHelper.GenerateStringInteger(10000));
            page.StreetlightEditorPanel.LampTypePanel.EnterCloInitialValueNumericInput(SLVHelper.GenerateStringInteger(100));
            page.StreetlightEditorPanel.LampTypePanel.SelectRandomInterfaceDropDown();
        }

        private void EnterSwitchEditableValues(EquipmentInventoryPage page)
        {
            page.SwitchEditorPanel.SelectTab("Identity");
            page.SwitchEditorPanel.ExpandGroupsActiveTab();
            //Identity of the light point
            page.SwitchEditorPanel.SelectRandomControllerIdDropDown();
            //Control system"
            page.SwitchEditorPanel.SelectRandomDimmingGroupDropDown();
            page.SwitchEditorPanel.EnterUniqueAddressInput(SLVHelper.GenerateMACAddress());
            page.SwitchEditorPanel.EnterControllerInstallDateInput(string.Format(@"{0}-{1}-{2}", SLVHelper.GenerateStringInteger(1900, DateTime.Now.AddYears(-1).Year), SLVHelper.GenerateInteger(12).ToString("D2"), SLVHelper.GenerateInteger(28).ToString("D2")));
            page.SwitchEditorPanel.SelectRandomInstallStatusDropDown();

            page.SwitchEditorPanel.SelectTab("Inventory");
            page.SwitchEditorPanel.ExpandGroupsActiveTab();
            //Location
            page.SwitchEditorPanel.EnterAddress1Input(SLVHelper.GenerateString(15));
            //Lamp
            page.SwitchEditorPanel.SelectRandomLampTypeDropDown();
            page.SwitchEditorPanel.EnterLampWattageNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.SwitchEditorPanel.EnterFixedSavedPowerNumericInput(SLVHelper.GenerateStringInteger(99999));

            //Comment
            page.SwitchEditorPanel.EnterCommentInput(SLVHelper.GenerateString(25));

            page.SwitchEditorPanel.SelectTab("Electricity network");
            page.SwitchEditorPanel.ExpandGroupsActiveTab();
            //Network
            page.SwitchEditorPanel.SelectRandomEnergySupplierDropDown();
            page.SwitchEditorPanel.EnterNetworkTypeInput(SLVHelper.GenerateString());
            page.SwitchEditorPanel.EnterSegmentNumericInput(SLVHelper.GenerateStringInteger(99999));
            page.SwitchEditorPanel.EnterSectionInput(SLVHelper.GenerateString(9));
        }

        private void EnterElectricalCounterEditableValues(EquipmentInventoryPage page)
        {
            page.SwitchEditorPanel.SelectTab("Identity");
            page.SwitchEditorPanel.ExpandGroupsActiveTab();
            //Identity of the energy meter
            page.ElectricalCounterEditorPanel.SelectRandomControllerIdDropDown();
            page.ElectricalCounterEditorPanel.EnterUniqueAddressInput(SLVHelper.GenerateMACAddress());

            page.ElectricalCounterEditorPanel.SelectTab("Inventory");
            page.ElectricalCounterEditorPanel.ExpandGroupsActiveTab();
            //Location
            page.ElectricalCounterEditorPanel.EnterAddress1Input(SLVHelper.GenerateString(15));
            //About the energy meter
            page.ElectricalCounterEditorPanel.SelectTypeOfMeterDropDown(SLVHelper.GenerateString());
            page.ElectricalCounterEditorPanel.EnterControllerInstallDateInput(string.Format(@"{0}-{1}-{2}", SLVHelper.GenerateStringInteger(1900, DateTime.Now.AddYears(-1).Year), SLVHelper.GenerateInteger(12).ToString("D2"), SLVHelper.GenerateInteger(28).ToString("D2")));
            //Comment
            page.ElectricalCounterEditorPanel.EnterCommentInput(SLVHelper.GenerateString(25));
        }             

        #region Verify methods

        private void VerifyGeozoneBasicInfo(EquipmentInventoryPage page, string expectedGeozoneName, string expectedParentGeozoneName)
        {
            var actualGeozoneName = page.GeozoneEditorPanel.GetNameValue();
            var actualParentGeozoneName = page.GeozoneEditorPanel.GetParentGeozoneValue();

            VerifyEqual(string.Format("Verify Geozone Name is {0}", expectedGeozoneName), expectedGeozoneName, actualGeozoneName);
            VerifyEqual(string.Format("Verify Parent Geozone Name is {0}", expectedParentGeozoneName), expectedParentGeozoneName, actualParentGeozoneName);
        }

        private void VerifyGeozoneLatitudeLongitude(EquipmentInventoryPage page, string expectedLatitudeMinimum, string expectedLatitudeMaximum, string expectedLongitudeMinimum, string expectedLongtitudeMaximum)
        {
            var actualLatitudeMinimum = page.GeozoneEditorPanel.GetLatitudeMinimumValue();
            var actualLatitudeMaximum = page.GeozoneEditorPanel.GetLatitudeMaximumValue();
            var actualLongitudeMinimum = page.GeozoneEditorPanel.GetLongitudeMinimumValue();
            var actualLongitudeMaximum = page.GeozoneEditorPanel.GetLongitudeMaximumValue();

            VerifyTrue(string.Format("Verify Latitude Minimum is {0}", expectedLatitudeMinimum), CompareLatLong(expectedLatitudeMinimum, actualLatitudeMinimum), expectedLatitudeMinimum, actualLatitudeMinimum);
            VerifyTrue(string.Format("Verify Latitude Maximum is {0}", expectedLatitudeMaximum), CompareLatLong(expectedLatitudeMaximum, actualLatitudeMaximum), expectedLatitudeMaximum, actualLatitudeMaximum);
            VerifyTrue(string.Format("Verify Longitude Minimum is {0}", expectedLongitudeMinimum), CompareLatLong(expectedLongitudeMinimum, actualLongitudeMinimum), expectedLongitudeMinimum, actualLongitudeMinimum);
            VerifyTrue(string.Format("Verify Longitude Maximum is {0}", expectedLongtitudeMaximum), CompareLatLong(expectedLongtitudeMaximum, actualLongitudeMaximum), expectedLongtitudeMaximum, actualLongitudeMaximum);
        }

        private void VerifyGeozoneLatitudeLongitudeAreFilled(EquipmentInventoryPage page)
        {
            VerifyEqual("Verify Latitude Minimum is filled", true, !string.IsNullOrEmpty(page.GeozoneEditorPanel.GetLatitudeMinimumValue()));
            VerifyEqual("Verify Latitude Maximum is filled", true, !string.IsNullOrEmpty(page.GeozoneEditorPanel.GetLatitudeMaximumValue()));
            VerifyEqual("Verify Longitude Minimum is filled", true, !string.IsNullOrEmpty(page.GeozoneEditorPanel.GetLongitudeMinimumValue()));
            VerifyEqual("Verify Longitude Maximum is filled", true, !string.IsNullOrEmpty(page.GeozoneEditorPanel.GetLongitudeMaximumValue()));
        }

        private void VerifyGeozoneLatitudeLongitudeAreChanged(EquipmentInventoryPage page, string expectedLatitudeMinimum, string expectedLatitudeMaximum, string expectedLongitudeMinimum, string expectedLongtitudeMaximum)
        {
            var actualLatitudeMinimum = page.GeozoneEditorPanel.GetLatitudeMinimumValue();
            var actualLatitudeMaximum = page.GeozoneEditorPanel.GetLatitudeMaximumValue();
            var actualLongitudeMinimum = page.GeozoneEditorPanel.GetLongitudeMinimumValue();
            var actualLongitudeMaximum = page.GeozoneEditorPanel.GetLongitudeMaximumValue();

            VerifyTrue(string.Format("Verify Latitude Minimum is changed {0} to {1}", expectedLatitudeMinimum, actualLatitudeMinimum), expectedLatitudeMinimum != actualLatitudeMinimum, expectedLatitudeMinimum, actualLatitudeMinimum);
            VerifyTrue(string.Format("Verify Latitude Maximum is changed {0} to {1}", expectedLatitudeMaximum, actualLatitudeMaximum), expectedLatitudeMaximum != actualLatitudeMaximum, expectedLatitudeMaximum, actualLatitudeMaximum);
            VerifyTrue(string.Format("Verify Longitude Minimum is changed {0} to {1}", expectedLongitudeMinimum, actualLongitudeMinimum), expectedLongitudeMinimum != actualLongitudeMinimum, expectedLongitudeMinimum, actualLongitudeMinimum);
            VerifyTrue(string.Format("Verify Longitude Maximum is changed {0} to {1}", expectedLongtitudeMaximum, actualLongitudeMaximum), expectedLongtitudeMaximum != actualLongitudeMaximum, expectedLongtitudeMaximum, actualLongitudeMaximum);
        }

        private void VerifyVirtualEnergyConsumption(EquipmentInventoryPage page,
            string expectedJanValue, string expectedFebValue, string expectedMarValue,
            string expectedAprValue, string expectedMayValue, string expectedJunValue,
            string expectedJulValue, string expectedAugValue, string expectedSepValue,
            string expectedOctValue, string expectedNovValue, string expectedDecValue)
        {
            var actualJanValue = page.GeozoneEditorPanel.GetJanuaryValue();
            var actualFebValue = page.GeozoneEditorPanel.GetFebruaryValue();
            var actualMarValue = page.GeozoneEditorPanel.GetMarchValue();
            var actualAprValue = page.GeozoneEditorPanel.GetAprilValue();
            var actualMayValue = page.GeozoneEditorPanel.GetMayValue();
            var actualJunValue = page.GeozoneEditorPanel.GetJuneValue();
            var actualJulValue = page.GeozoneEditorPanel.GetJulyValue();
            var actualAugValue = page.GeozoneEditorPanel.GetAugustValue();
            var actualSepValue = page.GeozoneEditorPanel.GetSeptemberValue();
            var actualOctValue = page.GeozoneEditorPanel.GetOctoberValue();
            var actualNovValue = page.GeozoneEditorPanel.GetNovemberValue();
            var actualDecValue = page.GeozoneEditorPanel.GetDecemberValue();

            VerifyEqual(string.Format("Verify Virtual Energy Consumption of Jan is {0}", expectedJanValue), expectedJanValue, actualJanValue);
            VerifyEqual(string.Format("Verify Virtual Energy Consumption of Feb is {0}", expectedFebValue), expectedFebValue, actualFebValue);
            VerifyEqual(string.Format("Verify Virtual Energy Consumption of Mar is {0}", expectedMarValue), expectedMarValue, actualMarValue);
            VerifyEqual(string.Format("Verify Virtual Energy Consumption of Apr is {0}", expectedAprValue), expectedAprValue, actualAprValue);
            VerifyEqual(string.Format("Verify Virtual Energy Consumption of May is {0}", expectedMayValue), expectedMayValue, actualMayValue);
            VerifyEqual(string.Format("Verify Virtual Energy Consumption of Jun is {0}", expectedJunValue), expectedJunValue, actualJunValue);
            VerifyEqual(string.Format("Verify Virtual Energy Consumption of Jul is {0}", expectedJulValue), expectedJulValue, actualJulValue);
            VerifyEqual(string.Format("Verify Virtual Energy Consumption of Aug is {0}", expectedAugValue), expectedAugValue, actualAugValue);
            VerifyEqual(string.Format("Verify Virtual Energy Consumption of Sep is {0}", expectedSepValue), expectedSepValue, actualSepValue);
            VerifyEqual(string.Format("Verify Virtual Energy Consumption of Oct is {0}", expectedOctValue), expectedOctValue, actualOctValue);
            VerifyEqual(string.Format("Verify Virtual Energy Consumption of Nov is {0}", expectedNovValue), expectedNovValue, actualNovValue);
            VerifyEqual(string.Format("Verify Virtual Energy Consumption of Dec is {0}", expectedDecValue), expectedDecValue, actualDecValue);
        }

        private void VerifyVirtualEnergyConsumptionInputs(EquipmentInventoryPage page)
        {
            VerifyEqual("Verify Label is 'January kWh'", "January kWh", page.GeozoneEditorPanel.GetJanuaryText());
            VerifyEqual("Verify Jan Input type is  Numeric up down input", true, page.GeozoneEditorPanel.IsJanNumericUpDownInput());

            VerifyEqual("Verify Label is 'February kWh'", "February kWh", page.GeozoneEditorPanel.GetFebruaryText());
            VerifyEqual("Verify Feb Input type is  Numeric up down input", true, page.GeozoneEditorPanel.IsFebNumericUpDownInput());

            VerifyEqual("Verify Label is 'March kWh'", "March kWh", page.GeozoneEditorPanel.GetMarchText());
            VerifyEqual("Verify Mar Input type is  Numeric up down input", true, page.GeozoneEditorPanel.IsMarNumericUpDownInput());

            VerifyEqual("Verify Label is 'April kWh'", "April kWh", page.GeozoneEditorPanel.GetAprilText());
            VerifyEqual("Verify Apr Input type is  Numeric up down input", true, page.GeozoneEditorPanel.IsAprNumericUpDownInput());

            VerifyEqual("Verify Label is 'May kWh'", "May kWh", page.GeozoneEditorPanel.GetMayText());
            VerifyEqual("Verify May Input type is  Numeric up down input", true, page.GeozoneEditorPanel.IsMayNumericUpDownInput());

            VerifyEqual("Verify Label is 'June kWh'", "June kWh", page.GeozoneEditorPanel.GetJuneText());
            VerifyEqual("Verify Jun Input type is  Numeric up down input", true, page.GeozoneEditorPanel.IsJunNumericUpDownInput());

            VerifyEqual("Verify Label is 'July kWh'", "July kWh", page.GeozoneEditorPanel.GetJulyText());
            VerifyEqual("Verify Jul Input type is  Numeric up down input", true, page.GeozoneEditorPanel.IsJulNumericUpDownInput());

            VerifyEqual("Verify Label is 'August kWh'", "August kWh", page.GeozoneEditorPanel.GetAugustText());
            VerifyEqual("Verify Aug Input type is  Numeric up down input", true, page.GeozoneEditorPanel.IsAugNumericUpDownInput());

            VerifyEqual("Verify Label is 'September kWh'", "September kWh", page.GeozoneEditorPanel.GetSeptemberText());
            VerifyEqual("Verify Sep Input type is  Numeric up down input", true, page.GeozoneEditorPanel.IsSepNumericUpDownInput());

            VerifyEqual("Verify Label is 'October kWh'", "October kWh", page.GeozoneEditorPanel.GetOctoberText());
            VerifyEqual("Verify Oct Input type is  Numeric up down input", true, page.GeozoneEditorPanel.IsOctNumericUpDownInput());

            VerifyEqual("Verify Label is 'November kWh'", "November kWh", page.GeozoneEditorPanel.GetNovemberText());
            VerifyEqual("Verify Nov Input type is  Numeric up down input", true, page.GeozoneEditorPanel.IsNovNumericUpDownInput());

            VerifyEqual("Verify Label is 'December kWh'", "December kWh", page.GeozoneEditorPanel.GetDecemberText());
            VerifyEqual("Verify Dec Input type is  Numeric up down input", true, page.GeozoneEditorPanel.IsDecNumericUpDownInput());
        }

        private void VerifyDeviceBasicInfo(EquipmentInventoryPage page, string expectedName, string expectedGeozoneName)
        {
            var actualName = page.DeviceEditorPanel.GetNameValue();
            var actualGeozoneName = page.DeviceEditorPanel.GetGeozoneValue();

            VerifyEqual(string.Format("Verify Name is {0}", expectedName), expectedName, actualName);
            VerifyEqual(string.Format("Verify Geozone Name is {0}", expectedGeozoneName), expectedGeozoneName, actualGeozoneName);
        }

        private void VerifyDeviceLatitudeLongitude(EquipmentInventoryPage page, string expectedLatitude, string expectedLongtitude)
        {
            var actualLatitude = page.DeviceEditorPanel.GetLatitudeValue();
            var actualLongitude = page.DeviceEditorPanel.GetLongitudeValue();

            VerifyTrue(string.Format("Verify Latitude is {0}", expectedLatitude), CompareLatLong(expectedLatitude, actualLatitude), expectedLatitude, actualLatitude);
            VerifyTrue(string.Format("Verify Longitude is {0}", expectedLongtitude), CompareLatLong(expectedLongtitude, actualLongitude), expectedLongtitude, actualLongitude);
        }

        private void VerifyControllerIdentity(EquipmentInventoryPage page, string expectedControllerId, string expectedHostName)
        {
            var actualControllerId = page.ControllerEditorPanel.GetControllerIdValue();
            var actualHostName = page.ControllerEditorPanel.GetGatewayHostNameValue();

            VerifyEqual(string.Format("Verify Controller Id is {0}", expectedControllerId), expectedControllerId, actualControllerId);
            VerifyEqual(string.Format("Verify Gateway Host Name is {0}", expectedHostName), expectedHostName, actualHostName);
        }

        private void VerifyControllerEditableValues(EquipmentInventoryPage page
            , string expectedHardwareRevision, string expectedSoftwareVersion, string expectedCommMedia, string expectedUniqueAddress
            , string expectedRealtimeCommand, string expectedGzipPayload, string expectedControllerCacheMode, string expectedGatewayHostName
            , string expectedNetworkId, string expectedServerWebAppUrl, string expectedUsername, string expectedPassword
            , string expectedCommissionMode, string expectedConfigPath, string expectedRealtimePath, bool expectedGroupDimCommand
            , bool expectedGlobalDimCommand, string expectedMaxDevices, bool expectedConsiderStreetLights, bool expectedConsiderReplaceOlc
            , string expectedReportTime, string expectedReportFrequency, string expectedTimeout, string expectedMaxConnections
            , string expectedRequestInterval, bool expectedInclLatencyInterval, string expectedAddress1, string expectedAddress2
            , string expectedCity, string expectedZipCode, string expectedMapNumber, string expectedControllerInstallDate
            , string expectedComment, string expectedTimezone
            )
        {
            page.ControllerEditorPanel.SelectTab("Identity");
            page.ControllerEditorPanel.ExpandGroupsActiveTab();
            //Identity of the controller
            var hardwareRevision = page.ControllerEditorPanel.GetHardwareRevisionValue();
            var softwareVersion = page.ControllerEditorPanel.GetSoftwareVersionValue();
            var commMedia = page.ControllerEditorPanel.GetCommMediaValue();
            var uniqueAddress = page.ControllerEditorPanel.GetUniqueAddressValue();
            var realtimeCommand = page.ControllerEditorPanel.GetRealtimeCommandValue();
            var gzipPayload = page.ControllerEditorPanel.GetGzipPayloadValue();
            var controllerCacheMode = page.ControllerEditorPanel.GetControllerCacheModeValue();
            //Communication
            var gatewayHostName = page.ControllerEditorPanel.GetGatewayHostNameValue();
            var networkId = page.ControllerEditorPanel.GetNetworkIdValue();
            var serverWebAppUrl = page.ControllerEditorPanel.GetServerWebAppUrlValue();
            var username = page.ControllerEditorPanel.GetUsernameValue();
            var password = page.ControllerEditorPanel.GetPasswordValue();
            var commissionMode = page.ControllerEditorPanel.GetCommissionModeValue();
            var configPath = page.ControllerEditorPanel.GetConfigPathValue();
            var realtimePath = page.ControllerEditorPanel.GetRealtimePathValue();
            var groupDimCommand = page.ControllerEditorPanel.GetGroupDimCommandValue();
            var globalDimCommand = page.ControllerEditorPanel.GetGlobalDimCommandValue();
            var maxDevices = page.ControllerEditorPanel.GetMaxDevicesValue();
            var considerStreetLights = page.ControllerEditorPanel.GetConsiderStreetLightsValue();
            var considerReplaceOlc = page.ControllerEditorPanel.GetConsiderReplaceOlcValue();
            var reportTime = page.ControllerEditorPanel.GetReportTimeValue();
            var reportFrequency = page.ControllerEditorPanel.GetReportFrequencyValue();
            var timeout = page.ControllerEditorPanel.GetTimeoutValue();
            var maxConnections = page.ControllerEditorPanel.GetMaxConnectionsValue();
            var requestInterval = page.ControllerEditorPanel.GetRequestIntervalValue();
            var inclLatencyInterval = page.ControllerEditorPanel.GetInclLatencyIntervalValue();

            page.ControllerEditorPanel.SelectTab("Inventory");
            page.ControllerEditorPanel.ExpandGroupsActiveTab();
            //Location
            var address1 = page.ControllerEditorPanel.GetAddress1Value();
            var address2 = page.ControllerEditorPanel.GetAddress2Value();
            var city = page.ControllerEditorPanel.GetCityValue();
            var zipCode = page.ControllerEditorPanel.GetZipCodeValue();
            var mapNumber = page.ControllerEditorPanel.GetMapNumberValue();
            //About this cabinet
            var controllerInstallDate = page.ControllerEditorPanel.GetControllerInstallDateValue();
            var comment = page.ControllerEditorPanel.GetCommentValue();

            page.ControllerEditorPanel.SelectTab("Time");
            page.ControllerEditorPanel.ExpandGroupsActiveTab();
            var timezone = page.ControllerEditorPanel.GetTimezoneValue();

            VerifyEqual(string.Format("Verify Hardware Revision is '{0}'", expectedHardwareRevision), expectedHardwareRevision, hardwareRevision);
            VerifyEqual(string.Format("Verify Sofware Version is changed '{0} to '{0}'", expectedSoftwareVersion), expectedSoftwareVersion, softwareVersion);
            VerifyEqual(string.Format("Verify Comm. Media is '{0}'", expectedCommMedia), expectedCommMedia, commMedia);
            VerifyEqual(string.Format("Verify Unique Address is '{0}'", expectedUniqueAddress), expectedUniqueAddress, uniqueAddress);
            VerifyEqual(string.Format("Verify Realtime Command is '{0}'", expectedRealtimeCommand), expectedRealtimeCommand, realtimeCommand);
            VerifyEqual(string.Format("Verify Gzip Payload is '{0}'", expectedGzipPayload), expectedGzipPayload, gzipPayload);
            VerifyEqual(string.Format("Verify Controller cache mode is '{0}'", expectedControllerCacheMode), expectedControllerCacheMode, controllerCacheMode);

            VerifyEqual(string.Format("Verify Gateway Host Name is '{0}'", expectedGatewayHostName), expectedGatewayHostName, gatewayHostName);
            VerifyEqual(string.Format("Verify Network Id is '{0}'", expectedNetworkId), expectedNetworkId, networkId);
            VerifyEqual(string.Format("Verify Server WebApp Url is '{0}'", expectedServerWebAppUrl), expectedServerWebAppUrl, serverWebAppUrl);
            VerifyEqual(string.Format("Verify Username is '{0}'", expectedUsername), expectedUsername, username);
            VerifyEqual(string.Format("Verify Password is '{0}'", expectedPassword), expectedPassword, password);
            VerifyEqual(string.Format("Verify Commission Mode is '{0}'", expectedCommissionMode), expectedCommissionMode, commissionMode);
            VerifyEqual(string.Format("Verify Config Path is '{0}'", expectedConfigPath), expectedConfigPath, configPath);
            VerifyEqual(string.Format("Verify Realtime Path is '{0}'", expectedRealtimePath), expectedRealtimePath, realtimePath);
            VerifyEqual(string.Format("Verify Group Dim Command is '{0}'", expectedGroupDimCommand), expectedGroupDimCommand, groupDimCommand);
            VerifyEqual(string.Format("Verify Global Dim Command is '{0}'", expectedGlobalDimCommand), expectedGlobalDimCommand, globalDimCommand);
            VerifyEqual(string.Format("Verify Consider StreetLights is '{0}'", expectedConsiderStreetLights), expectedConsiderStreetLights, considerStreetLights);
            VerifyEqual(string.Format("Verify Consider Replace-OLC is '{0}'", expectedConsiderReplaceOlc), expectedConsiderReplaceOlc, considerReplaceOlc);
            VerifyEqual(string.Format("Verify Report Time is '{0}'", expectedReportTime), expectedReportTime, reportTime);
            VerifyEqual(string.Format("Verify Report Frequency is '{0}'", expectedReportFrequency), expectedReportFrequency, reportFrequency);
            VerifyEqual(string.Format("Verify Timeout is '{0}'", expectedTimeout), expectedTimeout, timeout);
            VerifyEqual(string.Format("Verify Max Connections is '{0}'", expectedMaxConnections), expectedMaxConnections, maxConnections);
            VerifyEqual(string.Format("Verify Request Interval is '{0}'", expectedRequestInterval), expectedRequestInterval, requestInterval);
            VerifyEqual(string.Format("Verify Incl. Latency Interval is '{0}'", expectedInclLatencyInterval), expectedInclLatencyInterval, inclLatencyInterval);

            VerifyEqual(string.Format("Verify Address 1 is '{0}'", expectedAddress1), expectedAddress1, address1);
            VerifyEqual(string.Format("Verify Address 2 is '{0}'", expectedAddress2), expectedAddress2, address2);
            VerifyEqual(string.Format("Verify City is '{0}'", expectedCity), expectedCity, city);
            VerifyEqual(string.Format("Verify ZipCode is '{0}'", expectedZipCode), expectedZipCode, zipCode);
            VerifyEqual(string.Format("Verify Map Number is '{0}'", expectedMapNumber), expectedMapNumber, mapNumber);

            VerifyEqual(string.Format("Verify Controller Install Date is '{0}'", expectedControllerInstallDate), expectedControllerInstallDate, controllerInstallDate);
            VerifyEqual(string.Format("Verify Comment is '{0}'", expectedComment), expectedComment, comment);

            VerifyEqual(string.Format("Verify Timezone is '{0}'", expectedTimezone), expectedTimezone, timezone);

        }

        private void VerifyControllerEditableValuesAreChanged(EquipmentInventoryPage page
            , string expectedHardwareRevision, string expectedSoftwareVersion, string expectedCommMedia, string expectedUniqueAddress
            , string expectedRealtimeCommand, string expectedGzipPayload, string expectedControllerCacheMode, string expectedGatewayHostName
            , string expectedNetworkId, string expectedServerWebAppUrl, string expectedUsername, string expectedPassword
            , string expectedCommissionMode, string expectedConfigPath, string expectedRealtimePath, bool expectedGroupDimCommand
            , bool expectedGlobalDimCommand, string expectedMaxDevices, bool expectedConsiderStreetLights, bool expectedConsiderReplaceOlc
            , string expectedReportTime, string expectedReportFrequency, string expectedTimeout, string expectedMaxConnections
            , string expectedRequestInterval, bool expectedInclLatencyInterval, string expectedAddress1, string expectedAddress2
            , string expectedCity, string expectedZipCode, string expectedMapNumber, string expectedControllerInstallDate
            , string expectedComment, string expectedTimezone
            )
        {
            page.ControllerEditorPanel.SelectTab("Identity");
            page.ControllerEditorPanel.ExpandGroupsActiveTab();
            //Identity of the controller
            var hardwareRevision = page.ControllerEditorPanel.GetHardwareRevisionValue();
            var softwareVersion = page.ControllerEditorPanel.GetSoftwareVersionValue();
            var commMedia = page.ControllerEditorPanel.GetCommMediaValue();
            var uniqueAddress = page.ControllerEditorPanel.GetUniqueAddressValue();
            var realtimeCommand = page.ControllerEditorPanel.GetRealtimeCommandValue();
            var gzipPayload = page.ControllerEditorPanel.GetGzipPayloadValue();
            var controllerCacheMode = page.ControllerEditorPanel.GetControllerCacheModeValue();
            //Communication
            var gatewayHostName = page.ControllerEditorPanel.GetGatewayHostNameValue();
            var networkId = page.ControllerEditorPanel.GetNetworkIdValue();
            var serverWebAppUrl = page.ControllerEditorPanel.GetServerWebAppUrlValue();
            var username = page.ControllerEditorPanel.GetUsernameValue();
            var password = page.ControllerEditorPanel.GetPasswordValue();
            var commissionMode = page.ControllerEditorPanel.GetCommissionModeValue();
            var configPath = page.ControllerEditorPanel.GetConfigPathValue();
            var realtimePath = page.ControllerEditorPanel.GetRealtimePathValue();
            var groupDimCommand = page.ControllerEditorPanel.GetGroupDimCommandValue();
            var globalDimCommand = page.ControllerEditorPanel.GetGlobalDimCommandValue();
            var maxDevices = page.ControllerEditorPanel.GetMaxDevicesValue();
            var considerStreetLights = page.ControllerEditorPanel.GetConsiderStreetLightsValue();
            var considerReplaceOlc = page.ControllerEditorPanel.GetConsiderReplaceOlcValue();
            var reportTime = page.ControllerEditorPanel.GetReportTimeValue();
            var reportFrequency = page.ControllerEditorPanel.GetReportFrequencyValue();
            var timeout = page.ControllerEditorPanel.GetTimeoutValue();
            var maxConnections = page.ControllerEditorPanel.GetMaxConnectionsValue();
            var requestInterval = page.ControllerEditorPanel.GetRequestIntervalValue();
            var inclLatencyInterval = page.ControllerEditorPanel.GetInclLatencyIntervalValue();

            page.ControllerEditorPanel.SelectTab("Inventory");
            page.ControllerEditorPanel.ExpandGroupsActiveTab();
            //Location
            var address1 = page.ControllerEditorPanel.GetAddress1Value();
            var address2 = page.ControllerEditorPanel.GetAddress2Value();
            var city = page.ControllerEditorPanel.GetCityValue();
            var zipCode = page.ControllerEditorPanel.GetZipCodeValue();
            var mapNumber = page.ControllerEditorPanel.GetMapNumberValue();
            //About this cabinet
            var controllerInstallDate = page.ControllerEditorPanel.GetControllerInstallDateValue();
            var comment = page.ControllerEditorPanel.GetCommentValue();

            page.ControllerEditorPanel.SelectTab("Time");
            page.ControllerEditorPanel.ExpandGroupsActiveTab();
            var timezone = page.ControllerEditorPanel.GetTimezoneValue();

            VerifyTrue(string.Format("[SLV-3863] Verify Hardware Revision is changed '{0}' to '{1}'", expectedHardwareRevision, hardwareRevision), expectedHardwareRevision != hardwareRevision, expectedHardwareRevision, hardwareRevision);
            VerifyTrue(string.Format("[SLV-3863] Verify Software Version is changed '{0} to '{1}'", expectedSoftwareVersion, softwareVersion), expectedSoftwareVersion != softwareVersion, expectedSoftwareVersion, softwareVersion);
            VerifyTrue(string.Format("[SLV-3863] Verify Comm. Media is changed '{0}' to '{1}'", expectedCommMedia, commMedia), expectedCommMedia != commMedia, expectedCommMedia, commMedia);
            VerifyTrue(string.Format("[SLV-3863] Verify Unique Address is changed '{0}' to '{1}'", expectedUniqueAddress, uniqueAddress), expectedUniqueAddress != uniqueAddress, expectedUniqueAddress, uniqueAddress);
            VerifyTrue(string.Format("[SLV-3863] Verify Realtime Command is changed '{0}' to '{1}'", expectedRealtimeCommand, realtimeCommand), expectedRealtimeCommand != realtimeCommand, expectedRealtimeCommand, realtimeCommand);
            VerifyTrue(string.Format("[SLV-3863] Verify Gzip Payload is changed '{0}' to '{1}'", expectedGzipPayload, gzipPayload), expectedGzipPayload != gzipPayload, expectedGzipPayload, gzipPayload);
            VerifyTrue(string.Format("[SLV-3863] Verify Controller cache mode is changed '{0}' to '{1}'", expectedControllerCacheMode, controllerCacheMode), expectedControllerCacheMode != controllerCacheMode, expectedControllerCacheMode, controllerCacheMode);

            VerifyTrue(string.Format("[SLV-3863] Verify Gateway Host Name is changed '{0}' to '{1}'", expectedGatewayHostName, gatewayHostName), expectedGatewayHostName != gatewayHostName, expectedGatewayHostName, gatewayHostName);
            VerifyTrue(string.Format("[SLV-3863] Verify Network Id is changed '{0}' to '{1}'", expectedNetworkId, networkId), expectedNetworkId != networkId, expectedNetworkId, networkId);
            VerifyTrue(string.Format("[SLV-3863] Verify Server WebApp Url is changed '{0}' to '{1}'", expectedServerWebAppUrl, serverWebAppUrl), expectedServerWebAppUrl != serverWebAppUrl, expectedServerWebAppUrl, serverWebAppUrl);
            VerifyTrue(string.Format("[SLV-3863] Verify Username is changed '{0}' to '{1}'", expectedUsername, username), expectedUsername != username, expectedUsername, username);
            VerifyTrue(string.Format("[SLV-3863] Verify Password is changed '{0}' to '{1}'", expectedPassword, password), expectedPassword != password, expectedPassword, password);
            VerifyTrue(string.Format("[SLV-3863] Verify Commission Mode is changed '{0}' to '{1}'", expectedCommissionMode, commissionMode), expectedCommissionMode != commissionMode, expectedCommissionMode, commissionMode);
            VerifyTrue(string.Format("[SLV-3863] Verify Config Path is changed '{0}' to '{1}'", expectedConfigPath, configPath), expectedConfigPath != configPath, expectedConfigPath, configPath);
            VerifyTrue(string.Format("[SLV-3863] Verify Realtime Path is changed '{0}' to '{1}'", expectedRealtimePath, realtimePath), expectedRealtimePath != realtimePath, expectedRealtimePath, realtimePath);
            VerifyTrue(string.Format("[SLV-3863] Verify Group Dim Command is changed '{0}' to '{1}'", expectedGroupDimCommand, groupDimCommand), expectedGroupDimCommand != groupDimCommand, expectedGroupDimCommand, groupDimCommand);
            VerifyTrue(string.Format("[SLV-3863] Verify Global Dim Command is changed '{0}' to '{1}'", expectedGlobalDimCommand, globalDimCommand), expectedGlobalDimCommand != globalDimCommand, expectedGlobalDimCommand, globalDimCommand);
            VerifyTrue(string.Format("[SLV-3863] Verify Consider StreetLights is changed '{0}' to '{1}'", expectedConsiderStreetLights, considerStreetLights), expectedConsiderStreetLights != considerStreetLights, expectedConsiderStreetLights, considerStreetLights);
            VerifyTrue(string.Format("[SLV-3863] Verify Consider Replace-OLC is changed '{0}' to '{1}'", expectedConsiderReplaceOlc, considerReplaceOlc), expectedConsiderReplaceOlc != considerReplaceOlc, expectedConsiderReplaceOlc, considerReplaceOlc);
            VerifyTrue(string.Format("[SLV-3863] Verify Report Time is changed '{0}' to '{1}'", expectedReportTime, reportTime), expectedReportTime != reportTime, expectedReportTime, reportTime);
            VerifyTrue(string.Format("[SLV-3863] Verify Report Frequency is changed '{0}' to '{1}'", expectedReportFrequency, reportFrequency), expectedReportFrequency != reportFrequency, expectedReportFrequency, reportFrequency);
            VerifyTrue(string.Format("[SLV-3863] Verify Timeout is changed '{0}' to '{1}'", expectedTimeout, timeout), expectedTimeout != timeout, expectedTimeout, timeout);
            VerifyTrue(string.Format("[SLV-3863] Verify Max Connections is changed '{0}' to '{1}'", expectedMaxConnections, maxConnections), expectedMaxConnections != maxConnections, expectedMaxConnections, maxConnections);
            VerifyTrue(string.Format("[SLV-3863] Verify Request Interval is changed '{0}' to '{1}'", expectedRequestInterval, requestInterval), expectedRequestInterval != requestInterval, expectedRequestInterval, requestInterval);
            VerifyTrue(string.Format("[SLV-3863] Verify Incl. Latency Interval is changed '{0}' to '{1}'", expectedInclLatencyInterval, inclLatencyInterval), expectedInclLatencyInterval != inclLatencyInterval, expectedInclLatencyInterval, inclLatencyInterval);

            VerifyTrue(string.Format("[SLV-3863] Verify Address 1 is changed '{0}' to '{1}'", expectedAddress1, address1), expectedAddress1 != address1, expectedAddress1, address1);
            VerifyTrue(string.Format("[SLV-3863] Verify Address 2 is changed '{0}' to '{1}'", expectedAddress2, address2), expectedAddress2 != address2, expectedAddress2, address2);
            VerifyTrue(string.Format("[SLV-3863] Verify City is changed '{0}' to '{1}'", expectedCity, city), expectedCity != city, expectedCity, city);
            VerifyTrue(string.Format("[SLV-3863] Verify ZipCode is changed '{0}' to '{1}'", expectedZipCode, zipCode), expectedZipCode != zipCode, expectedZipCode, zipCode);
            VerifyTrue(string.Format("[SLV-3863] Verify Map Number is changed '{0}' to '{1}'", expectedMapNumber, mapNumber), expectedMapNumber != mapNumber, expectedMapNumber, mapNumber);

            VerifyTrue(string.Format("[SLV-3863] Verify Controller Install Date is changed '{0}' to '{1}'", expectedControllerInstallDate, controllerInstallDate), expectedControllerInstallDate != controllerInstallDate, expectedControllerInstallDate, controllerInstallDate);
            VerifyTrue(string.Format("[SLV-3863] Verify Comment is changed '{0}' to '{1}'", expectedComment, comment), expectedComment != comment, expectedComment, comment);

            VerifyTrue(string.Format("[SLV-3863] Verify Timezone is changed '{0}' to '{1}'", expectedTimezone, timezone), expectedTimezone != timezone, expectedTimezone, timezone);
        }

        private void VerifyDeviceIdentity(EquipmentInventoryPage page, string expectedControllerId, string expectedIdentifier, string expectedTypeOfEquipment)
        {
            var actualControllerId = page.StreetlightEditorPanel.GetControllerIdValue();
            var actualIdentifier = page.StreetlightEditorPanel.GetIdentifierValue();
            var actualTypeOfEquipment = page.StreetlightEditorPanel.GetTypeOfEquipmentValue();

            VerifyEqual(string.Format("Verify Controller Id is {0}", expectedControllerId), expectedControllerId, actualControllerId);
            VerifyEqual(string.Format("Verify Identifier is {0}", expectedIdentifier), expectedIdentifier, actualIdentifier);
            VerifyEqual(string.Format("Verify Type Of Equipment is {0}", expectedTypeOfEquipment), expectedTypeOfEquipment, actualTypeOfEquipment);
        }

        private void VerifyStreetlightReadOnlyValuesAreUnchanged(EquipmentInventoryPage page, string expectedIdentifier, string expectedConfigStatus, string expectedConfigStatusMessage, string expectedCommunicationStatus
            , string expectedLastEventLogSequence, string expectedLastEventRequestTime, string expectedlLastMeterLogSequence, string expectedLastMeterRequestTime, string expectedlLastImuLogSequence, string expectedLastImuRequestTime)
        {
            var actualIdentifier = page.StreetlightEditorPanel.GetIdentifierValue();
            var actualConfigStatus = page.StreetlightEditorPanel.GetConfigStatusValue();
            var actualConfigStatusMessage = page.StreetlightEditorPanel.GetConfigStatusMessageValue();
            var actualCommunicationStatus = page.StreetlightEditorPanel.GetCommunicationStatusValue();
            var actualLastEventLogSequence = page.StreetlightEditorPanel.GetLastEventLogSequenceValue();
            var actualLastEventRequestTime = page.StreetlightEditorPanel.GetLastEventRequestTimeValue();
            var actualLastMeterLogSequence = page.StreetlightEditorPanel.GetLastMeterLogSequenceValue();
            var actualLastMeterRequestTime = page.StreetlightEditorPanel.GetLastMeterRequestTimeValue();
            var actualLastImuLogSequence = page.StreetlightEditorPanel.GetLastImuLogSequenceValue();
            var actualLastImuRequestTime = page.StreetlightEditorPanel.GetLastImuRequestTimeValue();

            VerifyEqual(string.Format("Verify Identifier is '{0}'", expectedIdentifier), expectedIdentifier, actualIdentifier);
            VerifyEqual(string.Format("Verify Config Status is '{0}'", expectedConfigStatus), expectedConfigStatus, actualConfigStatus);
            VerifyEqual(string.Format("Verify Config Status Message is '{0}'", expectedConfigStatusMessage), expectedConfigStatusMessage, actualConfigStatusMessage);
            VerifyEqual(string.Format("Verify Communication Status is '{0}'", expectedCommunicationStatus), expectedCommunicationStatus, actualCommunicationStatus);
            VerifyEqual(string.Format("Verify Last Event Log Sequence is '{0}'", expectedLastEventLogSequence), expectedLastEventLogSequence, actualLastEventLogSequence);
            VerifyEqual(string.Format("Verify Last Event Request Time is '{0}'", expectedLastEventRequestTime), expectedLastEventRequestTime, actualLastEventRequestTime);
            VerifyEqual(string.Format("Verify Last Meter Log Sequence is '{0}'", expectedlLastMeterLogSequence), expectedlLastMeterLogSequence, actualLastMeterLogSequence);
            VerifyEqual(string.Format("Verify Last Meter Request Time is '{0}'", expectedLastMeterRequestTime), expectedLastMeterRequestTime, actualLastMeterRequestTime);
            VerifyEqual(string.Format("Verify Last IMU Log Sequence is '{0}'", expectedlLastImuLogSequence), expectedlLastImuLogSequence, actualLastImuLogSequence);
            VerifyEqual(string.Format("Verify Last IMU Request Time is '{0}'", expectedLastImuRequestTime), expectedLastImuRequestTime, actualLastImuRequestTime);
        }

        private void VerifyStreetlightEditableValues(EquipmentInventoryPage page
            , string expectedControllerId, string expectedDimmingGroup, string expectedUniqueAddress, string expectedControllerInstallDate
            , string expectedInstallStatus, string expectedSerialNumber, string expectedDeviceHwVersion, string expectedDeviceSwVersion
            , string expectedDeviceHwType, string expectedNicSerialNumber, string expectedNicHwVersion, string expectedNicSwVersion
            , string expectedNicHwModel, string expectedNicFallbackMode, string expectedManufactoringDate
            , string expectedDeviceName, string expectedDeviceManufactorer, string expectedUtilityId, string expectedMeterProgramId, string expectedCatalogNumber
            , string expectedElexonChargeCode, string expectedTimeout, string expectedRetries, bool expectedIsCpd
            , string expectedPremise, string expectedAddress1, string expectedAddress2, string expectedCity, string expectedZipCode, string expectedMapNumber, string expectedLocationType, string expectedUtilityLocationId
            , string expectedAccountNumber, string expectedCustomerNumber, string expectedCustomerName
            , string expectedLampType, string expectedLampWattage, string expectedFixedSavedPower, string expectedLampInstallDate, string expectedPowerFactorThreshold, string expectedOnLuxLevel, string expectedOffLuxLevel
            , string expectedBallastType, string expectedDimmingInterface, string expectedBallastBrand, string expectedPoleHeadInstall
            , string expectedLuminaireBrand, string expectedLuminaireType, string expectedLuminaireModel, string expectedLightDistribution, string expectedOrientation, string expectedColorCode, string expectedStatus, string expectedLuminaireInstallDate
            , string expectedBracketBrand, string expectedBracketModel, string expectedBracketType, string expectedBracketColor, string expectedPoleType, string expectedPoleHeight
            , string expectedPoleShape, string expectedPoleMaterial, string expectedPoleColorCode, string expectedPoleStatus, string expectedTypeOfGroundFixing, string expectedPoleInstallDate, string expectedComment
            , string expectedEnergySupplier, string expectedNetworkType, string expectedSupplyVoltage, string expectedCabinet, string expectedTransformer, string expectedFeederNumber
            , string expectedSwitchValue, string expectedSubstation, string expectedSegment, string expectedSection, string expectedHighVoltageThreshold, string expectedLowVoltageThreshold)
        {
            page.StreetlightEditorPanel.SelectTab("Identity");
            page.StreetlightEditorPanel.ExpandGroupsActiveTab();
            //Identity of the light point
            var controllerId = page.StreetlightEditorPanel.GetControllerIdValue();
            //Control system
            var dimmingGroup = page.StreetlightEditorPanel.GetDimmingGroupValue();
            var uniqueAddress = page.StreetlightEditorPanel.GetUniqueAddressValue();
            var controllerInstallDate = page.StreetlightEditorPanel.GetControllerInstallDateValue();
            var installStatus = page.StreetlightEditorPanel.GetInstallStatusValue();
            var serialNumber = page.StreetlightEditorPanel.GetSerialNumberValue();
            var deviceHwVersion = page.StreetlightEditorPanel.GetDeviceHwVersionValue();
            var deviceSwVersion = page.StreetlightEditorPanel.GetDeviceSwVersionValue();
            var deviceHwType = page.StreetlightEditorPanel.GetDeviceHwTypeValue();
            var nicSerialNumber = page.StreetlightEditorPanel.GetNicSerialNumberValue();
            var nicHwVersion = page.StreetlightEditorPanel.GetNicHwVersionValue();
            var nicSwVersion = page.StreetlightEditorPanel.GetNicSwVersionValue();
            var nicHwModel = page.StreetlightEditorPanel.GetNicHwModelValue();
            var nicFallbackMode = page.StreetlightEditorPanel.GetNicFallbackModeValue();
            var manufactoringDate = page.StreetlightEditorPanel.GetManufactoringDateValue();
            var deviceName = page.StreetlightEditorPanel.GetDeviceNameValue();
            var deviceManufacturer = page.StreetlightEditorPanel.GetDeviceManufacturerValue();
            var utilityId = page.StreetlightEditorPanel.GetUtilityIdValue();
            var meterProgramId = page.StreetlightEditorPanel.GetMeterProgramIdValue();
            var catalogNumber = page.StreetlightEditorPanel.GetCatalogNumberValue();
            var elexonChargeCode = page.StreetlightEditorPanel.GetElexonChargeCodeValue();
            var timeout = page.StreetlightEditorPanel.GetTimeoutValue();
            var retries = page.StreetlightEditorPanel.GetRetriesValue();
            var isCpd = page.StreetlightEditorPanel.GetIsCpdValue();

            page.StreetlightEditorPanel.SelectTab("Inventory");
            page.StreetlightEditorPanel.ExpandGroupsActiveTab();
            //Location
            var premise = page.StreetlightEditorPanel.GetPremiseValue();
            var address1 = page.StreetlightEditorPanel.GetAddress1Value();
            var address2 = page.StreetlightEditorPanel.GetAddress2Value();
            var city = page.StreetlightEditorPanel.GetCityValue();
            var zipCode = page.StreetlightEditorPanel.GetZipCodeValue();
            var mapNumber = page.StreetlightEditorPanel.GetMapNumberValue();
            var locationType = page.StreetlightEditorPanel.GetLocationTypeValue();
            var utilityLocationId = page.StreetlightEditorPanel.GetUtilityLocationIdValue();
            //var pictureFilePath = page.StreetlightEditorPanel.GetPictureFilePathValue();
            //Customer
            var accountNumber = page.StreetlightEditorPanel.GetAccountNumberValue();
            var customerNumber = page.StreetlightEditorPanel.GetCustomerNumberValue();
            var customerName = page.StreetlightEditorPanel.GetCustomerNameValue();
            //Lamp
            var lampType = page.StreetlightEditorPanel.GetLampTypeValue();
            var lampWattage = page.StreetlightEditorPanel.GetLampWattageValue();
            var fixedSavedPower = page.StreetlightEditorPanel.GetFixedSavedPowerValue();
            var lampInstallDate = page.StreetlightEditorPanel.GetLampInstallDateValue();
            var powerFactorThreshold = page.StreetlightEditorPanel.GetPowerFactorThresholdValue();
            var onLuxLevel = page.StreetlightEditorPanel.GetOnLuxLevelValue();
            var offLuxLevel = page.StreetlightEditorPanel.GetOffLuxLevelValue();
            //Driver or ballast
            var ballastType = page.StreetlightEditorPanel.GetBallastTypeValue();
            var dimmingInterface = page.StreetlightEditorPanel.GetDimmingInterfaceValue();
            var ballastBrand = page.StreetlightEditorPanel.GetBallastBrandValue();
            var poleHeadInstall = page.StreetlightEditorPanel.GetPoleHeadInstallValue();
            //Luminaire
            var luminaireBrand = page.StreetlightEditorPanel.GetLuminaireBrandValue();
            var luminaireType = page.StreetlightEditorPanel.GetLuminaireTypeValue();
            var luminaireModel = page.StreetlightEditorPanel.GetLuminaireModelValue();
            var lightDistribution = page.StreetlightEditorPanel.GetLightDistributionValue();
            var orientation = page.StreetlightEditorPanel.GetOrientationValue();
            var colorCode = page.StreetlightEditorPanel.GetColorCodeValue();
            var status = page.StreetlightEditorPanel.GetStatusValue();
            var luminaireInstallDate = page.StreetlightEditorPanel.GetLuminaireInstallDateValue();
            //Bracket
            var bracketBrand = page.StreetlightEditorPanel.GetBracketBrandValue();
            var bracketModel = page.StreetlightEditorPanel.GetBracketModelValue();
            var bracketType = page.StreetlightEditorPanel.GetBracketTypeValue();
            var bracketColor = page.StreetlightEditorPanel.GetBracketColorValue();
            //Pole or support
            var poleType = page.StreetlightEditorPanel.GetPoleTypeValue();
            var poleHeight = page.StreetlightEditorPanel.GetPoleHeightValue();
            var poleShape = page.StreetlightEditorPanel.GetPoleShapeValue();
            var poleMaterial = page.StreetlightEditorPanel.GetPoleMaterialValue();
            var poleColorCode = page.StreetlightEditorPanel.GetPoleColorCodeValue();
            var poleStatus = page.StreetlightEditorPanel.GetPoleStatusValue();
            var typeOfGroundFixing = page.StreetlightEditorPanel.GetTypeGroundFixingValue();
            var poleInstallDate = page.StreetlightEditorPanel.GetPoleInstallDateValue();
            //Comment
            var comment = page.StreetlightEditorPanel.GetCommentValue();

            page.StreetlightEditorPanel.SelectTab("Electricity network");
            page.StreetlightEditorPanel.ExpandGroupsActiveTab();
            var energySupplier = page.StreetlightEditorPanel.GetEnergySupplierValue();
            var networkType = page.StreetlightEditorPanel.GetNetworkTypeValue();
            var supplyVoltage = page.StreetlightEditorPanel.GetSupplyVoltageValue();
            var cabinet = page.StreetlightEditorPanel.GetCabinetValue();
            var transformer = page.StreetlightEditorPanel.GetTransformerValue();
            var feederNumber = page.StreetlightEditorPanel.GetFeederNumberValue();
            var switchValue = page.StreetlightEditorPanel.GetSwitchValue();
            var substation = page.StreetlightEditorPanel.GetSubstationValue();
            var segment = page.StreetlightEditorPanel.GetSegmentValue();
            var section = page.StreetlightEditorPanel.GetSectionValue();
            var highVoltageThreshold = page.StreetlightEditorPanel.GetHighVoltageThresholdValue();
            var lowVoltageThreshold = page.StreetlightEditorPanel.GetLowVoltageThresholdValue();

            VerifyEqual(string.Format("Verify Controller Id is '{0}'", expectedControllerId), expectedControllerId, controllerId);
            VerifyEqual(string.Format("Verify Dimming Group is '{0}", expectedDimmingGroup), expectedDimmingGroup, dimmingGroup);
            VerifyEqual(string.Format("Verify Unique Address is '{0}'", expectedUniqueAddress), expectedUniqueAddress, uniqueAddress);
            VerifyEqual(string.Format("Verify Controller Install Date is '{0}'", expectedControllerInstallDate), expectedControllerInstallDate, controllerInstallDate);
            VerifyEqual(string.Format("Verify Install Status is '{0}'", expectedInstallStatus), expectedInstallStatus, installStatus);
            VerifyEqual(string.Format("Verify Serial Number is '{0}'", expectedSerialNumber), expectedSerialNumber, serialNumber);
            VerifyEqual(string.Format("Verify Device HW Version is '{0}'", expectedDeviceHwVersion), expectedDeviceHwVersion, deviceHwVersion);
            VerifyEqual(string.Format("Verify Device SW Version is '{0}'", expectedDeviceSwVersion), expectedDeviceSwVersion, deviceSwVersion);
            VerifyEqual(string.Format("Verify Device HW Type is '{0}'", expectedDeviceHwType), expectedDeviceHwType, deviceHwType);
            VerifyEqual(string.Format("Verify NIC Serial Number is '{0}'", expectedNicSerialNumber), expectedNicSerialNumber, nicSerialNumber);
            VerifyEqual(string.Format("Verify NIC HW Version is '{0}'", expectedNicHwVersion), expectedNicHwVersion, nicHwVersion);
            VerifyEqual(string.Format("Verify NIC SW Version is '{0}'", expectedNicSwVersion), expectedNicSwVersion, nicSwVersion);
            VerifyEqual(string.Format("Verify NIC HW Model is '{0}'", expectedNicHwModel), expectedNicHwModel, nicHwModel);
            VerifyEqual(string.Format("Verify NIC Fallback Mode is '{0}'", expectedNicFallbackMode), expectedNicFallbackMode, nicFallbackMode);
            VerifyEqual(string.Format("Verify Manufactoring Date is '{0}'", expectedManufactoringDate), expectedManufactoringDate, manufactoringDate);
            VerifyEqual(string.Format("Verify Device Name is '{0}'", expectedDeviceName), expectedDeviceName, deviceName);
            VerifyEqual(string.Format("Verify Device Manufactorer is '{0}'", expectedDeviceManufactorer), expectedDeviceManufactorer, deviceManufacturer);
            VerifyEqual(string.Format("Verify Utility Id is '{0}'", expectedUtilityId), expectedUtilityId, utilityId);
            VerifyEqual(string.Format("Verify Meter Program Id is '{0}'", expectedMeterProgramId), expectedMeterProgramId, meterProgramId);
            VerifyEqual(string.Format("Verify Catalog Number is '{0}'", expectedCatalogNumber), expectedCatalogNumber, catalogNumber);
            VerifyEqual(string.Format("Verify Elexon Charge Code is '{0}'", expectedElexonChargeCode), expectedElexonChargeCode, elexonChargeCode);
            VerifyEqual(string.Format("Verify Timeout is '{0}'", expectedTimeout), expectedTimeout, timeout);
            VerifyEqual(string.Format("Verify Retries is '{0}'", expectedRetries), expectedRetries, retries);
            VerifyEqual(string.Format("Verify IsCpd is '{0}'", expectedIsCpd), expectedIsCpd, isCpd);

            VerifyEqual(string.Format("Verify Premise is '{0}'", expectedPremise), expectedPremise, premise);
            VerifyEqual(string.Format("Verify Address 1 is '{0}'", expectedAddress1), expectedAddress1, address1);
            VerifyEqual(string.Format("Verify Address 2 is '{0}'", expectedAddress2), expectedAddress2, address2);
            VerifyEqual(string.Format("Verify City is '{0}'", expectedCity), expectedCity, city);
            VerifyEqual(string.Format("Verify Zip code is '{0}'", expectedZipCode), expectedZipCode, zipCode);
            VerifyEqual(string.Format("Verify Map Number is '{0}'", expectedMapNumber), expectedMapNumber, mapNumber);
            VerifyEqual(string.Format("Verify Location Type is '{0}'", expectedLocationType), expectedLocationType, locationType);
            VerifyEqual(string.Format("Verify Utility Location Id is '{0}'", expectedUtilityLocationId), expectedUtilityLocationId, utilityLocationId);

            VerifyEqual(string.Format("Verify Account Number is '{0}'", expectedAccountNumber), expectedAccountNumber, accountNumber);
            VerifyEqual(string.Format("Verify Customer Number is '{0}'", expectedCustomerNumber), expectedCustomerNumber, customerNumber);
            VerifyEqual(string.Format("Verify Customer Name Id is '{0}'", expectedCustomerName), expectedCustomerName, customerName);

            VerifyEqual(string.Format("Verify Lamp Type is '{0}'", expectedLampType), expectedLampType, lampType);
            VerifyEqual(string.Format("Verify Lamp Wattage is '{0}'", expectedLampWattage), expectedLampWattage, lampWattage);
            VerifyEqual(string.Format("Verify Fixed Saved Power is '{0}'", expectedFixedSavedPower), expectedFixedSavedPower, fixedSavedPower);
            VerifyEqual(string.Format("Verify Lamp Install Date is '{0}'", expectedLampInstallDate), expectedLampInstallDate, lampInstallDate);
            VerifyEqual(string.Format("Verify Power Factor Threshold is '{0}'", expectedPowerFactorThreshold), expectedPowerFactorThreshold, powerFactorThreshold);
            VerifyEqual(string.Format("Verify On Lux Level is '{0}'", expectedOnLuxLevel), expectedOnLuxLevel, onLuxLevel);
            VerifyEqual(string.Format("Verify Off Lux Level is '{0}'", expectedOffLuxLevel), expectedOffLuxLevel, offLuxLevel);

            VerifyEqual(string.Format("Verify Ballast Type is '{0}'", expectedBallastType), expectedBallastType, ballastType);
            VerifyEqual(string.Format("Verify Dimming Interface is '{0}'", expectedDimmingInterface), expectedDimmingInterface, dimmingInterface);
            VerifyEqual(string.Format("Verify Ballast Brand is '{0}'", expectedBallastBrand), expectedBallastBrand, ballastBrand);
            VerifyEqual(string.Format("Verify Pole Head Install is '{0}'", expectedPoleHeadInstall), expectedPoleHeadInstall, poleHeadInstall);

            VerifyEqual(string.Format("Verify Luminaire Brand is '{0}'", expectedLuminaireBrand), expectedLuminaireBrand, luminaireBrand);
            VerifyEqual(string.Format("Verify Luminaire Type is '{0}'", expectedLuminaireType), expectedLuminaireType, luminaireType);
            VerifyEqual(string.Format("Verify Luminaire Model is '{0}'", expectedLuminaireModel), expectedLuminaireModel, luminaireModel);
            VerifyEqual(string.Format("Verify Light Distribution is '{0}'", expectedLightDistribution), expectedLightDistribution, lightDistribution);
            VerifyEqual(string.Format("Verify Orientation is '{0}'", expectedOrientation), expectedOrientation, orientation);
            VerifyEqual(string.Format("Verify Color Code is '{0}'", expectedColorCode), expectedColorCode, colorCode);
            VerifyEqual(string.Format("Verify Status is '{0}'", expectedStatus), expectedStatus, status);
            VerifyEqual(string.Format("Verify Luminaire Install Date is '{0}'", expectedLuminaireInstallDate), expectedLuminaireInstallDate, luminaireInstallDate);

            VerifyEqual(string.Format("Verify Bracket Brand is '{0}'", expectedBracketBrand), expectedBracketBrand, bracketBrand);
            VerifyEqual(string.Format("Verify Bracket Model is '{0}'", expectedBracketModel), expectedBracketModel, bracketModel);
            VerifyEqual(string.Format("Verify Bracket Type is '{0}'", expectedBracketType), expectedBracketType, bracketType);
            VerifyEqual(string.Format("Verify Bracket Color is '{0}'", expectedBracketColor), expectedBracketColor, bracketColor);

            VerifyEqual(string.Format("Verify Pole Type is '{0}'", expectedPoleType), expectedPoleType, poleType);
            VerifyEqual(string.Format("Verify Pole Height is '{0}'", expectedPoleHeight), expectedPoleHeight, poleHeight);
            VerifyEqual(string.Format("Verify Pole Shape is '{0}'", expectedPoleShape), expectedPoleShape, poleShape);
            VerifyEqual(string.Format("Verify Pole Material is '{0}'", expectedPoleMaterial), expectedPoleMaterial, poleMaterial);
            VerifyEqual(string.Format("Verify Pole Color Code is '{0}'", expectedPoleColorCode), expectedPoleColorCode, poleColorCode);
            VerifyEqual(string.Format("Verify Pole Status is '{0}'", expectedPoleStatus), expectedPoleStatus, poleStatus);
            VerifyEqual(string.Format("Verify Type Of Ground Fixing is '{0}'", expectedTypeOfGroundFixing), expectedTypeOfGroundFixing, typeOfGroundFixing);
            VerifyEqual(string.Format("Verify Pole Install Date is '{0}'", expectedPoleInstallDate), expectedPoleInstallDate, poleInstallDate);

            VerifyEqual(string.Format("Verify Comment is '{0}'", expectedComment), expectedComment, comment);

            VerifyEqual(string.Format("Verify Energy Supplier is '{0}'", expectedEnergySupplier), expectedEnergySupplier, energySupplier);
            VerifyEqual(string.Format("Verify Network Type is '{0}'", expectedNetworkType), expectedNetworkType, networkType);
            VerifyEqual(string.Format("Verify Supply Voltage is '{0}'", expectedSupplyVoltage), expectedSupplyVoltage, supplyVoltage);
            VerifyEqual(string.Format("Verify Cabinet is '{0}'", expectedCabinet), expectedCabinet, cabinet);
            VerifyEqual(string.Format("Verify Transformere is '{0}'", expectedTransformer), expectedTransformer, transformer);
            VerifyEqual(string.Format("Verify Feeder Number is '{0}'", expectedFeederNumber), expectedFeederNumber, feederNumber);
            VerifyEqual(string.Format("Verify Switch is '{0}'", expectedSwitchValue), expectedSwitchValue, switchValue);
            VerifyEqual(string.Format("Verify Substation is '{0}'", expectedSubstation), expectedSubstation, substation);
            VerifyEqual(string.Format("Verify Segment is '{0}'", expectedSegment), expectedSegment, segment);
            VerifyEqual(string.Format("Verify Section is '{0}'", expectedSection), expectedSection, section);
            VerifyEqual(string.Format("Verify High Voltage Threshold is '{0}'", expectedHighVoltageThreshold), expectedHighVoltageThreshold, highVoltageThreshold);
            VerifyEqual(string.Format("Verify Low Voltage Threshold is '{0}'", expectedLowVoltageThreshold), expectedLowVoltageThreshold, lowVoltageThreshold);
        }

        private void VerifyStreetlightEditableValuesAreChanged(EquipmentInventoryPage page
            , string expectedDimmingGroup, string expectedUniqueAddress, string expectedControllerInstallDate
            , string expectedInstallStatus, string expectedSerialNumber, string expectedDeviceHwVersion, string expectedDeviceSwVersion
            , string expectedDeviceHwType, string expectedNicSerialNumber, string expectedNicHwVersion, string expectedNicSwVersion
            , string expectedNicHwModel, string expectedNicFallbackMode, string expectedManufactoringDate
            , string expectedDeviceName, string expectedDeviceManufactorer, string expectedUtilityId, string expectedMeterProgramId, string expectedCatalogNumber
            , string expectedElexonChargeCode, string expectedTimeout, string expectedRetries, bool expectedIsCpd
            , string expectedPremise, string expectedAddress1, string expectedAddress2, string expectedCity, string expectedZipCode, string expectedMapNumber, string expectedLocationType, string expectedUtilityLocationId
            , string expectedAccountNumber, string expectedCustomerNumber, string expectedCustomerName
            , string expectedLampType, string expectedLampWattage, string expectedFixedSavedPower, string expectedLampInstallDate, string expectedPowerFactorThreshold, string expectedOnLuxLevel, string expectedOffLuxLevel
            , string expectedBallastType, string expectedDimmingInterface, string expectedBallastBrand, string expectedPoleHeadInstall
            , string expectedLuminaireBrand, string expectedLuminaireType, string expectedLuminaireModel, string expectedLightDistribution, string expectedOrientation, string expectedColorCode, string expectedStatus, string expectedLuminaireInstallDate
            , string expectedBracketBrand, string expectedBracketModel, string expectedBracketType, string expectedBracketColor, string expectedPoleType, string expectedPoleHeight
            , string expectedPoleShape, string expectedPoleMaterial, string expectedPoleColorCode, string expectedPoleStatus, string expectedTypeOfGroundFixing, string expectedPoleInstallDate, string expectedComment
            , string expectedEnergySupplier, string expectedNetworkType, string expectedSupplyVoltage, string expectedCabinet, string expectedTransformer, string expectedFeederNumber
            , string expectedSwitchValue, string expectedSubstation, string expectedSegment, string expectedSection, string expectedHighVoltageThreshold, string expectedLowVoltageThreshold)
        {
            page.StreetlightEditorPanel.SelectTab("Identity");
            page.StreetlightEditorPanel.ExpandGroupsActiveTab();
            //Control system
            var dimmingGroup = page.StreetlightEditorPanel.GetDimmingGroupValue();
            var uniqueAddress = page.StreetlightEditorPanel.GetUniqueAddressValue();
            var controllerInstallDate = page.StreetlightEditorPanel.GetControllerInstallDateValue();
            var installStatus = page.StreetlightEditorPanel.GetInstallStatusValue();
            var serialNumber = page.StreetlightEditorPanel.GetSerialNumberValue();
            var deviceHwVersion = page.StreetlightEditorPanel.GetDeviceHwVersionValue();
            var deviceSwVersion = page.StreetlightEditorPanel.GetDeviceSwVersionValue();
            var deviceHwType = page.StreetlightEditorPanel.GetDeviceHwTypeValue();
            var nicSerialNumber = page.StreetlightEditorPanel.GetNicSerialNumberValue();
            var nicHwVersion = page.StreetlightEditorPanel.GetNicHwVersionValue();
            var nicSwVersion = page.StreetlightEditorPanel.GetNicSwVersionValue();
            var nicHwModel = page.StreetlightEditorPanel.GetNicHwModelValue();
            var nicFallbackMode = page.StreetlightEditorPanel.GetNicFallbackModeValue();
            var manufactoringDate = page.StreetlightEditorPanel.GetManufactoringDateValue();
            var deviceName = page.StreetlightEditorPanel.GetDeviceNameValue();
            var deviceManufacturer = page.StreetlightEditorPanel.GetDeviceManufacturerValue();
            var utilityId = page.StreetlightEditorPanel.GetUtilityIdValue();
            var meterProgramId = page.StreetlightEditorPanel.GetMeterProgramIdValue();
            var catalogNumber = page.StreetlightEditorPanel.GetCatalogNumberValue();
            var elexonChargeCode = page.StreetlightEditorPanel.GetElexonChargeCodeValue();
            var timeout = page.StreetlightEditorPanel.GetTimeoutValue();
            var retries = page.StreetlightEditorPanel.GetRetriesValue();
            var isCpd = page.StreetlightEditorPanel.GetIsCpdValue();

            page.StreetlightEditorPanel.SelectTab("Inventory");
            page.StreetlightEditorPanel.ExpandGroupsActiveTab();
            //Location
            var premise = page.StreetlightEditorPanel.GetPremiseValue();
            var address1 = page.StreetlightEditorPanel.GetAddress1Value();
            var address2 = page.StreetlightEditorPanel.GetAddress2Value();
            var city = page.StreetlightEditorPanel.GetCityValue();
            var zipCode = page.StreetlightEditorPanel.GetZipCodeValue();
            var mapNumber = page.StreetlightEditorPanel.GetMapNumberValue();
            var locationType = page.StreetlightEditorPanel.GetLocationTypeValue();
            var utilityLocationId = page.StreetlightEditorPanel.GetUtilityLocationIdValue();
            //var pictureFilePath = page.StreetlightEditorPanel.GetPictureFilePathValue();
            //Customer
            var accountNumber = page.StreetlightEditorPanel.GetAccountNumberValue();
            var customerNumber = page.StreetlightEditorPanel.GetCustomerNumberValue();
            var customerName = page.StreetlightEditorPanel.GetCustomerNameValue();
            //Lamp
            var lampType = page.StreetlightEditorPanel.GetLampTypeValue();
            var lampWattage = page.StreetlightEditorPanel.GetLampWattageValue();
            var fixedSavedPower = page.StreetlightEditorPanel.GetFixedSavedPowerValue();
            var lampInstallDate = page.StreetlightEditorPanel.GetLampInstallDateValue();
            var powerFactorThreshold = page.StreetlightEditorPanel.GetPowerFactorThresholdValue();
            var onLuxLevel = page.StreetlightEditorPanel.GetOnLuxLevelValue();
            var offLuxLevel = page.StreetlightEditorPanel.GetOffLuxLevelValue();
            //Driver or ballast
            var ballastType = page.StreetlightEditorPanel.GetBallastTypeValue();
            var dimmingInterface = page.StreetlightEditorPanel.GetDimmingInterfaceValue();
            var ballastBrand = page.StreetlightEditorPanel.GetBallastBrandValue();
            var poleHeadInstall = page.StreetlightEditorPanel.GetPoleHeadInstallValue();
            //Luminaire
            var luminaireBrand = page.StreetlightEditorPanel.GetLuminaireBrandValue();
            var luminaireType = page.StreetlightEditorPanel.GetLuminaireTypeValue();
            var luminaireModel = page.StreetlightEditorPanel.GetLuminaireModelValue();
            var lightDistribution = page.StreetlightEditorPanel.GetLightDistributionValue();
            var orientation = page.StreetlightEditorPanel.GetOrientationValue();
            var colorCode = page.StreetlightEditorPanel.GetColorCodeValue();
            var status = page.StreetlightEditorPanel.GetStatusValue();
            var luminaireInstallDate = page.StreetlightEditorPanel.GetLuminaireInstallDateValue();
            //Bracket
            var bracketBrand = page.StreetlightEditorPanel.GetBracketBrandValue();
            var bracketModel = page.StreetlightEditorPanel.GetBracketModelValue();
            var bracketType = page.StreetlightEditorPanel.GetBracketTypeValue();
            var bracketColor = page.StreetlightEditorPanel.GetBracketColorValue();
            //Pole or support
            var poleType = page.StreetlightEditorPanel.GetPoleTypeValue();
            var poleHeight = page.StreetlightEditorPanel.GetPoleHeightValue();
            var poleShape = page.StreetlightEditorPanel.GetPoleShapeValue();
            var poleMaterial = page.StreetlightEditorPanel.GetPoleMaterialValue();
            var poleColorCode = page.StreetlightEditorPanel.GetPoleColorCodeValue();
            var poleStatus = page.StreetlightEditorPanel.GetPoleStatusValue();
            var typeOfGroundFixing = page.StreetlightEditorPanel.GetTypeGroundFixingValue();
            var poleInstallDate = page.StreetlightEditorPanel.GetPoleInstallDateValue();
            //Comment
            var comment = page.StreetlightEditorPanel.GetCommentValue();

            page.StreetlightEditorPanel.SelectTab("Electricity network");
            page.StreetlightEditorPanel.ExpandGroupsActiveTab();
            var energySupplier = page.StreetlightEditorPanel.GetEnergySupplierValue();
            var networkType = page.StreetlightEditorPanel.GetNetworkTypeValue();
            var supplyVoltage = page.StreetlightEditorPanel.GetSupplyVoltageValue();
            var cabinet = page.StreetlightEditorPanel.GetCabinetValue();
            var transformer = page.StreetlightEditorPanel.GetTransformerValue();
            var feederNumber = page.StreetlightEditorPanel.GetFeederNumberValue();
            var switchValue = page.StreetlightEditorPanel.GetSwitchValue();
            var substation = page.StreetlightEditorPanel.GetSubstationValue();
            var segment = page.StreetlightEditorPanel.GetSegmentValue();
            var section = page.StreetlightEditorPanel.GetSectionValue();
            var highVoltageThreshold = page.StreetlightEditorPanel.GetHighVoltageThresholdValue();
            var lowVoltageThreshold = page.StreetlightEditorPanel.GetLowVoltageThresholdValue();

            VerifyTrue(string.Format("[SLV-3863] Verify Dimming Group is changed '{0} to '{1}'", expectedDimmingGroup, dimmingGroup), expectedDimmingGroup != dimmingGroup, expectedDimmingGroup, dimmingGroup);
            VerifyTrue(string.Format("[SLV-3863] Verify Unique Address is changed '{0}' to '{1}'", expectedUniqueAddress, uniqueAddress), expectedUniqueAddress != uniqueAddress, expectedUniqueAddress, uniqueAddress);
            VerifyTrue(string.Format("[SLV-3863] Verify Controller Install Date is changed '{0}' to '{1}'", expectedControllerInstallDate, controllerInstallDate), expectedControllerInstallDate != controllerInstallDate, expectedControllerInstallDate, controllerInstallDate);
            VerifyTrue(string.Format("[SLV-3863] Verify Install Status is changed '{0}' to '{1}'", expectedInstallStatus, installStatus), expectedInstallStatus != installStatus, expectedInstallStatus, installStatus);
            VerifyTrue(string.Format("[SLV-3863] Verify Serial Number is changed '{0}' to '{1}'", expectedSerialNumber, serialNumber), expectedSerialNumber != serialNumber, expectedSerialNumber, serialNumber);
            VerifyTrue(string.Format("[SLV-3863] Verify Device HW Version is changed '{0}' to '{1}'", expectedDeviceHwVersion, deviceHwVersion), expectedDeviceHwVersion != deviceHwVersion, expectedDeviceHwVersion, deviceHwVersion);
            VerifyTrue(string.Format("[SLV-3863] Verify Device SW Version is changed '{0}' to '{1}'", expectedDeviceSwVersion, deviceSwVersion), expectedDeviceSwVersion != deviceSwVersion, expectedDeviceSwVersion, deviceSwVersion);
            VerifyTrue(string.Format("[SLV-3863] Verify Device HW Type is changed '{0}' to '{1}'", expectedDeviceHwType, deviceHwType), expectedDeviceHwType != deviceHwType, expectedDeviceHwType, deviceHwType);
            VerifyTrue(string.Format("[SLV-3863] Verify NIC Serial Number is changed '{0}' to '{1}'", expectedNicSerialNumber, nicSerialNumber), expectedNicSerialNumber != nicSerialNumber, expectedNicSerialNumber, nicSerialNumber);
            VerifyTrue(string.Format("[SLV-3863] Verify NIC HW Version is changed '{0}' to '{1}'", expectedNicHwVersion, nicHwVersion), expectedNicHwVersion != nicHwVersion, expectedNicHwVersion, nicHwVersion);
            VerifyTrue(string.Format("[SLV-3863] Verify NIC SW Version is changed '{0}' to '{1}'", expectedNicSwVersion, nicSwVersion), expectedNicSwVersion != nicSwVersion, expectedNicSwVersion, nicSwVersion);
            VerifyTrue(string.Format("[SLV-3863] Verify NIC HW Model is changed '{0}' to '{1}'", expectedNicHwModel, nicHwModel), expectedNicHwModel != nicHwModel, expectedNicHwModel, nicHwModel);            
            VerifyTrue(string.Format("[SLV-3863] Verify NIC Fallback Mode is changed '{0}' to '{1}'", expectedNicFallbackMode, nicFallbackMode), expectedNicFallbackMode != nicFallbackMode, expectedNicFallbackMode, nicFallbackMode);
            VerifyTrue(string.Format("[SLV-3863] Verify Manufactoring Date is changed '{0}' to '{1}'", expectedManufactoringDate, manufactoringDate), expectedManufactoringDate != manufactoringDate, expectedManufactoringDate, manufactoringDate);
            VerifyTrue(string.Format("[SLV-3863] Verify Device Name is changed '{0}' to '{1}'", expectedDeviceName, deviceName), expectedDeviceName != deviceName, expectedDeviceName, deviceName);
            VerifyTrue(string.Format("[SLV-3863] Verify Device Manufactorer is changed '{0}' to '{1}'", expectedDeviceManufactorer, deviceManufacturer), expectedDeviceManufactorer != deviceManufacturer, expectedDeviceManufactorer, deviceManufacturer);
            VerifyTrue(string.Format("[SLV-3863] Verify Utility Id is changed '{0}' to '{1}'", expectedUtilityId, utilityId), expectedUtilityId != utilityId, expectedUtilityId, utilityId);
            VerifyTrue(string.Format("[SLV-3863] Verify Meter Program Id is changed '{0}' to '{1}'", expectedMeterProgramId, meterProgramId), expectedMeterProgramId != meterProgramId, expectedMeterProgramId, meterProgramId);
            VerifyTrue(string.Format("[SLV-3863] Verify Catalog Number is changed '{0}' to '{1}'", expectedCatalogNumber, catalogNumber), expectedCatalogNumber != catalogNumber, expectedCatalogNumber, catalogNumber);
            VerifyTrue(string.Format("[SLV-3863] Verify Elexon Charge Code is changed '{0}' to '{1}'", expectedElexonChargeCode, elexonChargeCode), expectedElexonChargeCode != elexonChargeCode, expectedElexonChargeCode, elexonChargeCode);
            VerifyTrue(string.Format("[SLV-3863] Verify Timeout is changed '{0}' to '{1}'", expectedTimeout, timeout), expectedTimeout != timeout, expectedTimeout, timeout);
            VerifyTrue(string.Format("[SLV-3863] Verify Retries is changed '{0}' to '{1}'", expectedRetries, retries), expectedRetries != retries, expectedRetries, retries);
            VerifyTrue(string.Format("[SLV-3863] Verify IsCpd is changed '{0}' to '{1}'", expectedIsCpd, isCpd), expectedIsCpd != isCpd, expectedIsCpd, isCpd);

            VerifyTrue(string.Format("[SLV-3863] Verify Premise is changed '{0}' to '{1}'", expectedPremise, premise), expectedPremise != premise, expectedPremise, premise);
            VerifyTrue(string.Format("[SLV-3863] Verify Address 1 is changed '{0}' to '{1}'", expectedAddress1, address1), expectedAddress1 != address1, expectedAddress1, address1);
            VerifyTrue(string.Format("[SLV-3863] Verify Address 2 is changed '{0}' to '{1}'", expectedAddress2, address2), expectedAddress2 != address2, expectedAddress2, address2);
            VerifyTrue(string.Format("[SLV-3863] Verify City is changed '{0}' to '{1}'", expectedCity, city), expectedCity != city, expectedCity, city);
            VerifyTrue(string.Format("[SLV-3863] Verify Zip code is changed '{0}' to '{1}'", expectedZipCode, zipCode), expectedZipCode != zipCode, expectedZipCode, zipCode);
            VerifyTrue(string.Format("[SLV-3863] Verify Map Number is changed '{0}' to '{1}'", expectedMapNumber, mapNumber), expectedMapNumber != mapNumber, expectedMapNumber, mapNumber);
            VerifyTrue(string.Format("[SLV-3863] Verify Location Type is changed '{0}' to '{1}'", expectedLocationType, locationType), expectedLocationType != locationType, expectedLocationType, locationType);
            VerifyTrue(string.Format("[SLV-3863] Verify Utility Location Id is changed '{0}' to '{1}'", expectedUtilityLocationId, utilityLocationId), expectedUtilityLocationId != utilityLocationId, expectedUtilityLocationId, utilityLocationId);

            VerifyTrue(string.Format("[SLV-3863] Verify Account Number is changed '{0}' to '{1}'", expectedAccountNumber, accountNumber), expectedAccountNumber != accountNumber, expectedAccountNumber, accountNumber);
            VerifyTrue(string.Format("[SLV-3863] Verify Customer Number is changed '{0}' to '{1}'", expectedCustomerNumber, customerNumber), expectedCustomerNumber != customerNumber, expectedCustomerNumber, customerNumber);
            VerifyTrue(string.Format("[SLV-3863] Verify Customer Name Id is changed '{0}' to '{1}'", expectedCustomerName, customerName), expectedCustomerName != customerName, expectedCustomerName, customerName);

            VerifyTrue(string.Format("[SLV-3863] Verify Lamp Type is changed '{0}' to '{1}'", expectedLampType, lampType), expectedLampType != lampType, expectedLampType, lampType);
            VerifyTrue(string.Format("[SLV-3863] Verify Lamp Wattage is changed '{0}' to '{1}'", expectedLampWattage, lampWattage), expectedLampWattage != lampWattage, expectedLampWattage, lampWattage);
            VerifyTrue(string.Format("[SLV-3863] Verify Fixed Saved Power is changed '{0}' to '{1}'", expectedFixedSavedPower, fixedSavedPower), expectedFixedSavedPower != fixedSavedPower, expectedFixedSavedPower, fixedSavedPower);
            VerifyTrue(string.Format("[SLV-3863] Verify Lamp Install Date is changed '{0}' to '{1}'", expectedLampInstallDate, lampInstallDate), expectedLampInstallDate != lampInstallDate, expectedLampInstallDate, lampInstallDate);
            VerifyTrue(string.Format("[SLV-3863] Verify Power Factor Threshold is changed '{0}' to '{1}'", expectedPowerFactorThreshold, powerFactorThreshold), expectedPowerFactorThreshold != powerFactorThreshold, expectedPowerFactorThreshold, powerFactorThreshold);
            VerifyTrue(string.Format("[SLV-3863] Verify On Lux Level is changed '{0}' to '{1}'", expectedOnLuxLevel, onLuxLevel), expectedOnLuxLevel != onLuxLevel, expectedOnLuxLevel, onLuxLevel);
            VerifyTrue(string.Format("[SLV-3863] Verify Off Lux Level is changed '{0}' to '{1}'", expectedOffLuxLevel, offLuxLevel), expectedOffLuxLevel != offLuxLevel, expectedOffLuxLevel, offLuxLevel);

            VerifyTrue(string.Format("[SLV-3863] Verify Ballast Type is changed '{0}' to '{1}'", expectedBallastType, ballastType), expectedBallastType != ballastType, expectedBallastType, ballastType);
            VerifyTrue(string.Format("[SLV-3863] Verify Dimming Interface is changed '{0}' to '{1}'", expectedDimmingInterface, dimmingInterface), expectedDimmingInterface != dimmingInterface, expectedDimmingInterface, dimmingInterface);
            VerifyTrue(string.Format("[SLV-3863] Verify Ballast Brand is changed '{0}' to '{1}'", expectedBallastBrand, ballastBrand), expectedBallastBrand != ballastBrand, expectedBallastBrand, ballastBrand);
            VerifyTrue(string.Format("[SLV-3863] Verify Pole Head Install is changed '{0}' to '{1}'", expectedPoleHeadInstall, poleHeadInstall), expectedPoleHeadInstall != poleHeadInstall, expectedPoleHeadInstall, poleHeadInstall);

            VerifyTrue(string.Format("[SLV-3863] Verify Luminaire Brand is changed '{0}' to '{1}'", expectedLuminaireBrand, luminaireBrand), expectedLuminaireBrand != luminaireBrand, expectedLuminaireBrand, luminaireBrand);
            VerifyTrue(string.Format("[SLV-3863] Verify Luminaire Type is changed '{0}' to '{1}'", expectedLuminaireType, luminaireType), expectedLuminaireType != luminaireType, expectedLuminaireType, luminaireType);
            VerifyTrue(string.Format("[SLV-3863] Verify Luminaire Model is changed '{0}' to '{1}'", expectedLuminaireModel, luminaireModel), expectedLuminaireModel != luminaireModel, expectedLuminaireModel, luminaireModel);
            VerifyTrue(string.Format("[SLV-3863] Verify Light Distribution is changed '{0}' to '{1}'", expectedLightDistribution, lightDistribution), expectedLightDistribution != lightDistribution, expectedLightDistribution, lightDistribution);
            VerifyTrue(string.Format("[SLV-3863] Verify Orientation is changed '{0}' to '{1}'", expectedOrientation, orientation), expectedOrientation != orientation, expectedOrientation, orientation);
            VerifyTrue(string.Format("[SLV-3863] Verify Color Code is changed '{0}' to '{1}'", expectedColorCode, colorCode), expectedColorCode != colorCode, expectedColorCode, colorCode);
            VerifyTrue(string.Format("[SLV-3863] Verify Status is changed '{0}' to '{1}'", expectedStatus, status), expectedStatus != status, expectedStatus, status);
            VerifyTrue(string.Format("[SLV-3863] Verify Luminaire Install Date is changed '{0}' to '{1}'", expectedLuminaireInstallDate, luminaireInstallDate), expectedLuminaireInstallDate != luminaireInstallDate, expectedLuminaireInstallDate, luminaireInstallDate);

            VerifyTrue(string.Format("[SLV-3863] Verify Bracket Brand is changed '{0}' to '{1}'", expectedBracketBrand, bracketBrand), expectedBracketBrand != bracketBrand, expectedBracketBrand, bracketBrand);
            VerifyTrue(string.Format("[SLV-3863] Verify Bracket Model is changed '{0}' to '{1}'", expectedBracketModel, bracketModel), expectedBracketModel != bracketModel, expectedBracketModel, bracketModel);
            VerifyTrue(string.Format("[SLV-3863] Verify Bracket Type is changed '{0}' to '{1}'", expectedBallastType, bracketType), expectedBracketType != bracketType, expectedBracketType, bracketType);
            VerifyTrue(string.Format("[SLV-3863] Verify Bracket Color is changed '{0}' to '{1}'", expectedBracketColor, bracketColor), expectedBracketColor != bracketColor, expectedBracketColor, bracketColor);

            VerifyTrue(string.Format("[SLV-3863] Verify Pole Type is changed '{0}' to '{1}'", expectedPoleType, poleType), expectedPoleType != poleType, expectedPoleType, poleType);
            VerifyTrue(string.Format("[SLV-3863] Verify Pole Height is changed '{0}' to '{1}'", expectedPoleHeight, poleHeight), expectedPoleHeight != poleHeight, expectedPoleHeight, poleHeight);
            VerifyTrue(string.Format("[SLV-3863] Verify Pole Shape is changed '{0}' to '{1}'", expectedPoleShape, poleShape), expectedPoleShape != poleShape, expectedPoleShape, poleShape);
            VerifyTrue(string.Format("[SLV-3863] Verify Pole Material is changed '{0}' to '{1}'", expectedPoleMaterial, poleMaterial), expectedPoleMaterial != poleMaterial, expectedPoleMaterial, poleMaterial);
            VerifyTrue(string.Format("[SLV-3863] Verify Pole Color Code is changed '{0}' to '{1}'", expectedPoleColorCode, poleColorCode), expectedPoleColorCode != poleColorCode, expectedPoleColorCode, poleColorCode);
            VerifyTrue(string.Format("[SLV-3863] Verify Pole Status is changed '{0}' to '{1}'", expectedPoleStatus, poleStatus), expectedPoleStatus != poleStatus, expectedPoleStatus, poleStatus);
            VerifyTrue(string.Format("[SLV-3863] Verify Type Of Ground Fixing is changed '{0}' to '{1}'", expectedTypeOfGroundFixing, typeOfGroundFixing), expectedTypeOfGroundFixing != typeOfGroundFixing, expectedTypeOfGroundFixing, typeOfGroundFixing);
            VerifyTrue(string.Format("[SLV-3863] Verify Pole Install Date is changed '{0}' to '{1}'", expectedPoleInstallDate, poleInstallDate), expectedPoleInstallDate != poleInstallDate, expectedPoleInstallDate, poleInstallDate);

            VerifyTrue(string.Format("[SLV-3863] Verify Comment is changed '{0}' to '{1}'", expectedComment, comment), expectedComment != comment, expectedComment, comment);

            VerifyTrue(string.Format("[SLV-3863] Verify Energy Supplier is changed '{0}' to '{1}'", expectedEnergySupplier, energySupplier), expectedEnergySupplier != energySupplier, expectedEnergySupplier, energySupplier);
            VerifyTrue(string.Format("[SLV-3863] Verify Network Type is changed '{0}' to '{1}'", expectedNetworkType, networkType), expectedNetworkType != networkType, expectedNetworkType, networkType);
            VerifyTrue(string.Format("[SLV-3863] Verify Supply Voltage is changed '{0}' to '{1}'", expectedSupplyVoltage, supplyVoltage), expectedSupplyVoltage != supplyVoltage, expectedSupplyVoltage, supplyVoltage);
            VerifyTrue(string.Format("[SLV-3863] Verify Cabinet is changed '{0}' to '{1}'", expectedCabinet, cabinet), expectedCabinet != cabinet, expectedCabinet, cabinet);
            VerifyTrue(string.Format("[SLV-3863] Verify Transformere is changed '{0}' to '{1}'", expectedTransformer, transformer), expectedTransformer != transformer, expectedTransformer, transformer);
            VerifyTrue(string.Format("[SLV-3863] Verify Feeder Number is changed '{0}' to '{1}'", expectedFeederNumber, feederNumber), expectedFeederNumber != feederNumber, expectedFeederNumber, feederNumber);
            VerifyTrue(string.Format("[SLV-3863] Verify Switch is changed '{0}' to '{1}'", expectedSwitchValue, switchValue), expectedSwitchValue != switchValue, expectedSwitchValue, switchValue);
            VerifyTrue(string.Format("[SLV-3863] Verify Substation is changed '{0}' to '{1}'", expectedSubstation, substation), expectedSubstation != substation, expectedSubstation, substation);
            VerifyTrue(string.Format("[SLV-3863] Verify Segment is changed '{0}' to '{1}'", expectedSegment, segment), expectedSegment != segment, expectedSegment, segment);
            VerifyTrue(string.Format("[SLV-3863] Verify Section is changed '{0}' to '{1}'", expectedSection, section), expectedSection != section, expectedSection, section);
            VerifyTrue(string.Format("[SLV-3863] Verify High Voltage Threshold is changed '{0}' to '{1}'", expectedHighVoltageThreshold, highVoltageThreshold), expectedHighVoltageThreshold != highVoltageThreshold, expectedHighVoltageThreshold, highVoltageThreshold);
            VerifyTrue(string.Format("[SLV-3863] Verify Low Voltage Threshold is changed '{0}' to '{1}'", expectedLowVoltageThreshold, lowVoltageThreshold), expectedLowVoltageThreshold != lowVoltageThreshold, expectedLowVoltageThreshold, lowVoltageThreshold);
        }

        public void VerifyLampTypePropetiesSection(EquipmentInventoryPage page, string lampType)
        {
            double value;
            VerifyEqual("Verify Name - label is 'Name'", "Name", page.DeviceEditorPanel.LampTypePanel.GetNameText());
            VerifyEqual(string.Format("Verify Name - value is '{0}'", lampType), lampType, page.DeviceEditorPanel.LampTypePanel.GetNameValue());

            VerifyEqual("Verify Identifier - label is 'Identifier'", "Identifier", page.DeviceEditorPanel.LampTypePanel.GetIdentifierText());
            VerifyEqual("Verify Identifier - value is not empty", true, !string.IsNullOrEmpty(page.DeviceEditorPanel.LampTypePanel.GetIdentifierValue()));

            VerifyEqual("Verify Default lamp wattage - label is 'Default lamp Wattage'", "Default lamp Wattage", page.DeviceEditorPanel.LampTypePanel.GetLampWattageText());
            VerifyEqual("Verify Default lamp wattage - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetLampWattageValue(), out value));

            VerifyEqual("Verify Default warmup time - label is 'Default warmup time'", "Default warmup time", page.DeviceEditorPanel.LampTypePanel.GetWarmupTimeText());
            VerifyEqual("Verify Default warmup time - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetWarmupTimeValue(), out value));

            VerifyEqual("Verify Default I Level 1 min - label is 'Default I Level1 min'", "Default I Level1 min", page.DeviceEditorPanel.LampTypePanel.GetILevel1MinText());
            VerifyEqual("Verify Default I Level 1 min - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetILevel1MinValue(), out value));

            VerifyEqual("Verify Default I Level 1 max - label is 'Default I Level1 max'", "Default I Level1 max", page.DeviceEditorPanel.LampTypePanel.GetILevel1MaxText());
            VerifyEqual("Verify Default I Level 1 max - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetILevel1MaxValue(), out value));

            VerifyEqual("Verify Default I Level 2 min - label is 'Default I Level2 min'", "Default I Level2 min", page.DeviceEditorPanel.LampTypePanel.GetILevel2MinText());
            VerifyEqual("Verify Default I Level 2 min - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetILevel2MinValue(), out value));

            VerifyEqual("Verify Default I Level 2 max - label is 'Default I Level2 max'", "Default I Level2 max", page.DeviceEditorPanel.LampTypePanel.GetILevel2MaxText());
            VerifyEqual("Verify Default I Level 2 max - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetILevel2MaxValue(), out value));

            VerifyEqual("Verify Default I no - label is 'Default I no'", "Default I no", page.DeviceEditorPanel.LampTypePanel.GetINoText());
            VerifyEqual("Verify Default I no - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetINoValue(), out value));

            VerifyEqual("Verify Default PF min - label is 'Default PF min", "Default PF min", page.DeviceEditorPanel.LampTypePanel.GetPfMinText());
            VerifyEqual("Verify Default PF min - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetPfMinValue(), out value));

            VerifyEqual("Verify Default V no - label is 'Default V no'", "Default V no", page.DeviceEditorPanel.LampTypePanel.GetVNoText());
            VerifyEqual("Verify Default V no - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetVNoValue(), out value));

            VerifyEqual("Verify Default V min - label is 'Default V min'", "Default V min", page.DeviceEditorPanel.LampTypePanel.GetVMinText());
            VerifyEqual("Verify Default V min - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetVMinValue(), out value));

            VerifyEqual("Verify Default V max - label is 'Default V max'", "Default V max", page.DeviceEditorPanel.LampTypePanel.GetVMaxText());
            VerifyEqual("Verify Default V max - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetVMaxValue(), out value));

            VerifyEqual("Verify Default min output - label is 'Default min output'", "Default min output", page.DeviceEditorPanel.LampTypePanel.GetMinOutputValueText());
            VerifyEqual("Verify Default min output - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetMinOutputValueValue(), out value));

            VerifyEqual("Verify Default control V max - label is 'Default control V max'", "Default control V max", page.DeviceEditorPanel.LampTypePanel.GetControlVoltMaxText());
            VerifyEqual("Verify Default control V max - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetControlVoltMaxValue(), out value));

            VerifyEqual("Verify Default BH max - label is 'Default BH max'", "Default BH max", page.DeviceEditorPanel.LampTypePanel.GetBhMaxText());
            VerifyEqual("Verify Default BH max - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetBhMaxValue(), out value));

            VerifyEqual("Verify Default power max - label is 'Default power max'", "Default power max", page.DeviceEditorPanel.LampTypePanel.GetPowerMaxText());
            VerifyEqual("Verify Default power max - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetPowerMaxValue(), out value));

            VerifyEqual("Verify Default CLO hours 1% increment - label is 'Default CLO hours 1% increment'", "Default CLO hours 1% increment", page.DeviceEditorPanel.LampTypePanel.GetCloHoursIncrementText());
            VerifyEqual("Verify Default CLO hours 1% increment - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetCloHoursIncrementValue(), out value));

            VerifyEqual("Verify Default CLO initial value - label is 'Default CLO initial value'", "Default CLO initial value", page.DeviceEditorPanel.LampTypePanel.GetCloInitialValueText());
            VerifyEqual("Verify Default CLO initial value - value is a number", true, double.TryParse(page.DeviceEditorPanel.LampTypePanel.GetCloInitialValueValue(), out value));

            Step(" o Default interface: label is 'Default interface', value is one of items of a dropdown");
            var interfaceValue = page.DeviceEditorPanel.LampTypePanel.GetInterfaceValue();
            var listInterface = page.DeviceEditorPanel.LampTypePanel.GetListOfInterface();
            VerifyEqual("Verify Default interface - label is 'Default interface'", "Default interface", page.DeviceEditorPanel.LampTypePanel.GetInterfaceText());
            VerifyEqual("Verify Default interface - value is one of items of a dropdown", true, listInterface.Contains(interfaceValue));
        }

        public void VerifyLampTypePropetiesSectionAddNew(EquipmentInventoryPage page)
        {
            double value;
            var nameField = page.StreetlightEditorPanel.LampTypePanel.GetNameValue();
            VerifyTrue("Verify Name is filled with value starting with 'New Lamp Type'", nameField.Contains("New Lamp Type"), "Contains 'New Lamp Type'", nameField);

            VerifyEqual("Verify Identifier is editable", true, !page.StreetlightEditorPanel.LampTypePanel.IsIdentifierInputReadOnly());
            VerifyEqual("Verify Identifier value is 'Manufacturer/LampTechno/Power/BallastType'", "Manufacturer/LampTechno/Power/BallastType", page.StreetlightEditorPanel.LampTypePanel.GetIdentifierValue());

            var interfaceValue = page.StreetlightEditorPanel.LampTypePanel.GetInterfaceValue();
            var listInterface = page.StreetlightEditorPanel.LampTypePanel.GetListOfInterface();
            VerifyTrue("Verify Default interface is empty or filled with one of items in the dropdown", interfaceValue.Equals("Select a value") || listInterface.Contains(interfaceValue), string.Join(",", listInterface), interfaceValue);

            VerifyEqual("Verify Default lamp wattage - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetLampWattageValue(), out value));
            VerifyEqual("Verify Default warmup time - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetWarmupTimeValue(), out value));
            VerifyEqual("Verify Default I Level 1 min - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetILevel1MinValue(), out value));
            VerifyEqual("Verify Default I Level 1 max - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetILevel1MaxValue(), out value));
            VerifyEqual("Verify Default I Level 2 min - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetILevel2MinValue(), out value));
            VerifyEqual("Verify Default I Level 2 max - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetILevel2MaxValue(), out value));
            VerifyEqual("Verify Default I no - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetINoValue(), out value));
            VerifyEqual("Verify Default PF min - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetPfMinValue(), out value));
            VerifyEqual("Verify Default V no - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetVNoValue(), out value));
            VerifyEqual("Verify Default V min - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetVMinValue(), out value));
            VerifyEqual("Verify Default V max - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetVMaxValue(), out value));
            VerifyEqual("Verify Default min output - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetMinOutputValueValue(), out value));
            VerifyEqual("Verify Default control V max - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetControlVoltMaxValue(), out value));
            VerifyEqual("Verify Default BH max - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetBhMaxValue(), out value));
            VerifyEqual("Verify Default power max - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetPowerMaxValue(), out value));
            VerifyEqual("Verify Default CLO hours 1% increment - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetCloHoursIncrementValue(), out value));
            VerifyEqual("Verify Default CLO initial value - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetCloInitialValueValue(), out value));
        }

        public void VerifyLampTypePropetiesSectionUpdate(EquipmentInventoryPage page, string lampType)
        {
            double value;
            VerifyEqual(string.Format("Verify Name is '{0}'", lampType), lampType, page.StreetlightEditorPanel.LampTypePanel.GetNameValue());

            VerifyEqual("Verify Identifier is disabled", true, page.StreetlightEditorPanel.LampTypePanel.IsIdentifierInputReadOnly());
            VerifyEqual("Verify Identifier value is 'Manufacturer/LampTechno/Power/BallastType'", "Manufacturer/LampTechno/Power/BallastType", page.StreetlightEditorPanel.LampTypePanel.GetIdentifierValue());

            var interfaceValue = page.StreetlightEditorPanel.LampTypePanel.GetInterfaceValue();
            var listInterface = page.StreetlightEditorPanel.LampTypePanel.GetListOfInterface();
            VerifyTrue("Verify Default interface is empty or filled with one of items in the dropdown", interfaceValue.Equals("Select a value") || listInterface.Contains(interfaceValue), string.Join(",", listInterface), interfaceValue);

            VerifyEqual("Verify Default lamp wattage - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetLampWattageValue(), out value));
            VerifyEqual("Verify Default warmup time - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetWarmupTimeValue(), out value));
            VerifyEqual("Verify Default I Level 1 min - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetILevel1MinValue(), out value));
            VerifyEqual("Verify Default I Level 1 max - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetILevel1MaxValue(), out value));
            VerifyEqual("Verify Default I Level 2 min - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetILevel2MinValue(), out value));
            VerifyEqual("Verify Default I Level 2 max - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetILevel2MaxValue(), out value));
            VerifyEqual("Verify Default I no - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetINoValue(), out value));
            VerifyEqual("Verify Default PF min - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetPfMinValue(), out value));
            VerifyEqual("Verify Default V no - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetVNoValue(), out value));
            VerifyEqual("Verify Default V min - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetVMinValue(), out value));
            VerifyEqual("Verify Default V max - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetVMaxValue(), out value));
            VerifyEqual("Verify Default min output - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetMinOutputValueValue(), out value));
            VerifyEqual("Verify Default control V max - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetControlVoltMaxValue(), out value));
            VerifyEqual("Verify Default BH max - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetBhMaxValue(), out value));
            VerifyEqual("Verify Default power max - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetPowerMaxValue(), out value));
            VerifyEqual("Verify Default CLO hours 1% increment - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetCloHoursIncrementValue(), out value));
            VerifyEqual("Verify Default CLO initial value - value is a number", true, double.TryParse(page.StreetlightEditorPanel.LampTypePanel.GetCloInitialValueValue(), out value));
        }

        private void VerifyLampTypePropetiesSectionValues(EquipmentInventoryPage page
            , string expectedName, string expectedIdentifier, string expectedLampWattage, string expectedWarmupTime, string expectedILevel1Min, string expectedILevel1Max, string expectedILevel2Min, string expectedILevel2Max
            , string expectedPfMin, string expectedINo, string expectedVNo, string expectedVMin, string expectedVMax
            , string expectedMinOutputValue, string expectedControlVoltMax, string expectedBhMax, string expectedPowerMax
            , string expectedCloHoursIncrement, string expectedCloInitialValue, string expectedInterface)
        {
            var name = page.StreetlightEditorPanel.LampTypePanel.GetNameValue();
            var identifier = page.StreetlightEditorPanel.LampTypePanel.GetIdentifierValue();
            var lampWattage = page.StreetlightEditorPanel.LampTypePanel.GetLampWattageValue();
            var warmupTime = page.StreetlightEditorPanel.LampTypePanel.GetWarmupTimeValue();
            var iLevel1Min = page.StreetlightEditorPanel.LampTypePanel.GetILevel1MinValue();
            var iLevel1Max = page.StreetlightEditorPanel.LampTypePanel.GetILevel1MaxValue();
            var iLevel2Min = page.StreetlightEditorPanel.LampTypePanel.GetILevel2MinValue();
            var iLevel2Max = page.StreetlightEditorPanel.LampTypePanel.GetILevel2MaxValue();
            var iNo = page.StreetlightEditorPanel.LampTypePanel.GetINoValue();
            var pfMin = page.StreetlightEditorPanel.LampTypePanel.GetPfMinValue();
            var vNo = page.StreetlightEditorPanel.LampTypePanel.GetVNoValue();
            var vMin = page.StreetlightEditorPanel.LampTypePanel.GetVMinValue();
            var vMax = page.StreetlightEditorPanel.LampTypePanel.GetVMaxValue();
            var minOutputValue = page.StreetlightEditorPanel.LampTypePanel.GetMinOutputValueValue();
            var controlVoltMax = page.StreetlightEditorPanel.LampTypePanel.GetControlVoltMaxValue();
            var bhMax = page.StreetlightEditorPanel.LampTypePanel.GetBhMaxValue();
            var powerMax = page.StreetlightEditorPanel.LampTypePanel.GetPowerMaxValue();
            var cloHoursIncrement = page.StreetlightEditorPanel.LampTypePanel.GetCloHoursIncrementValue();
            var cloInitialValue = page.StreetlightEditorPanel.LampTypePanel.GetCloInitialValueValue();
            var interfaceValue = page.StreetlightEditorPanel.LampTypePanel.GetInterfaceValue();

            VerifyEqual(string.Format("[SC-383] Verify Name is '{0}'", expectedName), expectedName, name);
            VerifyEqual(string.Format("Verify Identifier is '{0}'", expectedIdentifier), expectedIdentifier, identifier);
            VerifyEqual(string.Format("Verify Default lamp wattage is '{0}'", expectedLampWattage), expectedLampWattage, lampWattage);
            VerifyEqual(string.Format("Verify Default warmup time is '{0}", expectedWarmupTime), expectedWarmupTime, warmupTime);
            VerifyEqual(string.Format("Verify Default I Level 1 min is '{0}'", expectedILevel1Min), expectedILevel1Min, iLevel1Min);
            VerifyEqual(string.Format("Verify Default I Level 1 max is '{0}'", expectedILevel1Max), expectedILevel1Max, iLevel1Max);
            VerifyEqual(string.Format("Verify Default I Level 2 min is '{0}'", expectedILevel2Min), expectedILevel2Min, iLevel2Min);
            VerifyEqual(string.Format("Verify Default I Level 2 max is '{0}'", expectedILevel2Max), expectedILevel2Max, iLevel2Max);
            VerifyEqual(string.Format("Verify Default I no is '{0}'", expectedINo), expectedINo, iNo);
            VerifyEqual(string.Format("Verify Default PF min is '{0}'", expectedPfMin), expectedPfMin, pfMin);
            VerifyEqual(string.Format("Verify Default V no is '{0}'", expectedVNo), expectedVNo, vNo);
            VerifyEqual(string.Format("Verify Default V min is '{0}'", expectedVMin), expectedVMin, vMin);
            VerifyEqual(string.Format("Verify Default V max is '{0}'", expectedVMax), expectedVMax, vMax);
            VerifyEqual(string.Format("Verify Default min output is '{0}'", expectedMinOutputValue), expectedMinOutputValue, minOutputValue);
            VerifyEqual(string.Format("Verify Default control V max is '{0}'", expectedControlVoltMax), expectedControlVoltMax, controlVoltMax);
            VerifyEqual(string.Format("Verify Default BH max is '{0}'", expectedBhMax), expectedBhMax, bhMax);
            VerifyEqual(string.Format("Verify Default power max is '{0}'", expectedPowerMax), expectedPowerMax, powerMax);
            VerifyEqual(string.Format("Verify Default CLO hours 1% increment is '{0}'", expectedCloHoursIncrement), expectedCloHoursIncrement, cloHoursIncrement);
            VerifyEqual(string.Format("Verify Default CLO initial value is '{0}'", expectedCloInitialValue), expectedCloInitialValue, cloInitialValue);
            VerifyEqual(string.Format("Verify Interface is '{0}'", expectedInterface), expectedInterface, interfaceValue);
        }

        private void VerifySwitchIdentity(EquipmentInventoryPage page, string expectedControllerId, string expectedIdentifier, string expectedTypeOfEquipment)
        {
            var actualControllerId = page.SwitchEditorPanel.GetControllerIdValue();
            var actualIdentifier = page.SwitchEditorPanel.GetIdentifierValue();
            var actualTypeOfEquipment = page.SwitchEditorPanel.GetTypeOfEquipmentValue();

            VerifyEqual(string.Format("Verify Controller Id is {0}", expectedControllerId), expectedControllerId, actualControllerId);
            VerifyEqual(string.Format("Verify Identifier is {0}", expectedIdentifier), expectedIdentifier, actualIdentifier);
            VerifyEqual(string.Format("Verify Type Of Equipment is {0}", expectedTypeOfEquipment), expectedTypeOfEquipment, actualTypeOfEquipment);
        }

        private void VerifySwitchEditableValuesAreChanged(EquipmentInventoryPage page
            , string expectedControllerId, string expectedDimmingGroup, string expectedUniqueAddress, string expectedControllerInstallDate, string expectedInstallStatus
            , string expectedAddress1, string expectedLampType, string expectedLampWattage, string expectedFixedSavedPower, string expectedComment
            , string expectedEnergySupplier, string expectedNetworkType, string expectedSegment, string expectedSection)
        {
            page.SwitchEditorPanel.SelectTab("Identity");
            page.SwitchEditorPanel.ExpandGroupsActiveTab();
            //Identity of the light point
            var controllerId = page.SwitchEditorPanel.GetControllerIdValue();
            //Control system
            var dimmingGroup = page.SwitchEditorPanel.GetDimmingGroupValue();
            var uniqueAddress = page.SwitchEditorPanel.GetUniqueAddressValue();
            var controllerInstallDate = page.SwitchEditorPanel.GetControllerInstallDateValue();
            var installStatus = page.SwitchEditorPanel.GetInstallStatusValue();

            page.SwitchEditorPanel.SelectTab("Inventory");
            page.SwitchEditorPanel.ExpandGroupsActiveTab();
            //Location
            var address1 = page.SwitchEditorPanel.GetAddress1Value();
            //Lamp
            var lampType = page.SwitchEditorPanel.GetLampTypeValue();
            var lampWattage = page.SwitchEditorPanel.GetLampWattageValue();
            var fixedSavedPower = page.SwitchEditorPanel.GetFixedSavedPowerValue();
            //Comment
            var comment = page.SwitchEditorPanel.GetCommentValue();

            page.SwitchEditorPanel.SelectTab("Electricity network");
            page.SwitchEditorPanel.ExpandGroupsActiveTab();
            var energySupplier = page.SwitchEditorPanel.GetEnergySupplierValue();
            var networkType = page.SwitchEditorPanel.GetNetworkTypeValue();
            var segment = page.SwitchEditorPanel.GetSegmentValue();
            var section = page.SwitchEditorPanel.GetSectionValue();

            VerifyTrue(string.Format("[SLV-3863] Verify Controller Id is changed '{0}' to '{1}'", expectedControllerId, controllerId), expectedControllerId != controllerId, expectedControllerId, controllerId);
            VerifyTrue(string.Format("[SLV-3863] Verify Dimming Group is changed '{0} to '{1}'", expectedDimmingGroup, dimmingGroup), expectedDimmingGroup != dimmingGroup, expectedDimmingGroup, dimmingGroup);
            VerifyTrue(string.Format("[SLV-3863] Verify Unique Address is changed '{0}' to '{1}'", expectedUniqueAddress, uniqueAddress), expectedUniqueAddress != uniqueAddress, expectedUniqueAddress, uniqueAddress);
            VerifyTrue(string.Format("[SLV-3863] Verify Controller Install Date is changed '{0}' to '{1}'", expectedControllerInstallDate, controllerInstallDate), expectedControllerInstallDate != controllerInstallDate, expectedControllerInstallDate, controllerInstallDate);
            VerifyTrue(string.Format("[SLV-3863] Verify Install Status is changed '{0}' to '{1}'", expectedInstallStatus, installStatus), expectedInstallStatus != installStatus, expectedInstallStatus, installStatus);

            VerifyTrue(string.Format("[SLV-3863] Verify Address 1 is changed '{0}' to '{1}'", expectedAddress1, address1), expectedAddress1 != address1, expectedAddress1, address1);
            VerifyTrue(string.Format("[SLV-3863] Verify Lamp Type is changed '{0}' to '{1}'", expectedLampType, lampType), expectedLampType != lampType, expectedLampType, lampType);
            VerifyTrue(string.Format("[SLV-3863] Verify Lamp Wattage is changed '{0}' to '{1}'", expectedLampWattage, lampWattage), expectedLampWattage != lampWattage, expectedLampWattage, lampWattage);
            VerifyTrue(string.Format("[SLV-3863] Verify Fixed Saved Power is changed '{0}' to '{1}'", expectedFixedSavedPower, fixedSavedPower), expectedFixedSavedPower != fixedSavedPower, expectedFixedSavedPower, fixedSavedPower);
            VerifyTrue(string.Format("[SLV-3863] Verify Comment is changed '{0}' to '{1}'", expectedComment, comment), expectedComment != comment, expectedComment, comment);

            VerifyTrue(string.Format("[SLV-3863] Verify Energy Supplier is changed '{0}' to '{1}'", expectedEnergySupplier, energySupplier), expectedEnergySupplier != energySupplier, expectedEnergySupplier, energySupplier);
            VerifyTrue(string.Format("[SLV-3863] Verify Network Type is changed '{0}' to '{1}'", expectedNetworkType, networkType), expectedNetworkType != networkType, expectedNetworkType, networkType);
            VerifyTrue(string.Format("[SLV-3863] Verify Segment is changed '{0}' to '{1}'", expectedSegment, segment), expectedSegment != segment, expectedSegment, segment);
            VerifyTrue(string.Format("[SLV-3863] Verify Section is changed '{0}' to '{1}'", expectedSection, section), expectedSection != section, expectedSection, section);
        }

        private void VerifySwitchEditableValues(EquipmentInventoryPage page
          , string expectedControllerId, string expectedDimmingGroup, string expectedUniqueAddress, string expectedControllerInstallDate, string expectedInstallStatus
          , string expectedAddress1, string expectedLampType, string expectedLampWattage, string expectedFixedSavedPower, string expectedComment
          , string expectedEnergySupplier, string expectedNetworkType, string expectedSegment, string expectedSection)
        {
            page.SwitchEditorPanel.SelectTab("Identity");
            page.SwitchEditorPanel.ExpandGroupsActiveTab();
            //Identity of the light point
            var controllerId = page.SwitchEditorPanel.GetControllerIdValue();
            //Control system
            var dimmingGroup = page.SwitchEditorPanel.GetDimmingGroupValue();
            var uniqueAddress = page.SwitchEditorPanel.GetUniqueAddressValue();
            var controllerInstallDate = page.SwitchEditorPanel.GetControllerInstallDateValue();
            var installStatus = page.SwitchEditorPanel.GetInstallStatusValue();

            page.SwitchEditorPanel.SelectTab("Inventory");
            page.SwitchEditorPanel.ExpandGroupsActiveTab();
            //Location
            var address1 = page.SwitchEditorPanel.GetAddress1Value();
            //Lamp
            var lampType = page.SwitchEditorPanel.GetLampTypeValue();
            var lampWattage = page.SwitchEditorPanel.GetLampWattageValue();
            var fixedSavedPower = page.SwitchEditorPanel.GetFixedSavedPowerValue();
            //Comment
            var comment = page.SwitchEditorPanel.GetCommentValue();

            page.SwitchEditorPanel.SelectTab("Electricity network");
            page.SwitchEditorPanel.ExpandGroupsActiveTab();
            var energySupplier = page.SwitchEditorPanel.GetEnergySupplierValue();
            var networkType = page.SwitchEditorPanel.GetNetworkTypeValue();
            var segment = page.SwitchEditorPanel.GetSegmentValue();
            var section = page.SwitchEditorPanel.GetSectionValue();

            VerifyEqual(string.Format("Verify Controller Id is '{0}'", expectedControllerId), expectedControllerId, controllerId);
            VerifyEqual(string.Format("Verify Dimming Group is '{0}", expectedDimmingGroup), expectedDimmingGroup, dimmingGroup);
            VerifyEqual(string.Format("Verify Unique Address is '{0}'", expectedUniqueAddress), expectedUniqueAddress, uniqueAddress);
            VerifyEqual(string.Format("Verify Controller Install Date is '{0}'", expectedControllerInstallDate), expectedControllerInstallDate, controllerInstallDate);
            VerifyEqual(string.Format("Verify Install Status is '{0}'", expectedInstallStatus), expectedInstallStatus, installStatus);

            VerifyEqual(string.Format("Verify Address 1 is '{0}'", expectedAddress1), expectedAddress1, address1);
            VerifyEqual(string.Format("Verify Lamp Type is '{0}'", expectedLampType), expectedLampType, lampType);
            VerifyEqual(string.Format("Verify Lamp Wattage is '{0}'", expectedLampWattage), expectedLampWattage, lampWattage);
            VerifyEqual(string.Format("Verify Fixed Saved Power is '{0}'", expectedFixedSavedPower), expectedFixedSavedPower, fixedSavedPower);
            VerifyEqual(string.Format("Verify Comment is '{0}'", expectedComment), expectedComment, comment);

            VerifyEqual(string.Format("Verify Energy Supplier is '{0}'", expectedEnergySupplier), expectedEnergySupplier, energySupplier);
            VerifyEqual(string.Format("Verify Network Type is '{0}'", expectedNetworkType), expectedNetworkType, networkType);
            VerifyEqual(string.Format("Verify Segment is '{0}'", expectedSegment), expectedSegment, segment);
            VerifyEqual(string.Format("Verify Section is '{0}'", expectedSection), expectedSection, section);
        }

        private void VerifyElectricalCounterEditableValuesAreChanged(EquipmentInventoryPage page
            , string expectedControllerId, string expectedUniqueAddress
            , string expectedAddress1, string expectedTypeOfMeter, string expectedControllerInstallDate, string expectedComment)
        {
            page.ElectricalCounterEditorPanel.SelectTab("Identity");
            page.ElectricalCounterEditorPanel.ExpandGroupsActiveTab();
            //Identity of the energy meter
            var controllerId = page.ElectricalCounterEditorPanel.GetControllerIdValue();
            var uniqueAddress = page.ElectricalCounterEditorPanel.GetUniqueAddressValue();

            page.ElectricalCounterEditorPanel.SelectTab("Inventory");
            page.ElectricalCounterEditorPanel.ExpandGroupsActiveTab();
            //Location
            var address1 = page.ElectricalCounterEditorPanel.GetAddress1Value();

            //About the energy meter
            var typeOfMeter = page.ElectricalCounterEditorPanel.GetTypeOfMeterValue();
            var controllerInstallDate = page.ElectricalCounterEditorPanel.GetControllerInstallDateValue();
            var comment = page.ElectricalCounterEditorPanel.GetCommentValue();

            VerifyTrue(string.Format("[SLV-3863] Verify Controller Id is changed '{0}' to '{1}'", expectedControllerId, controllerId), expectedControllerId != controllerId, expectedControllerId, controllerId);
            VerifyTrue(string.Format("[SLV-3863] Verify Unique Address is changed '{0}' to '{1}'", expectedUniqueAddress, uniqueAddress), expectedUniqueAddress != uniqueAddress, expectedUniqueAddress, uniqueAddress);

            VerifyTrue(string.Format("[SLV-3863] Verify Address 1 is changed '{0}' to '{1}'", expectedAddress1, address1), expectedAddress1 != address1, expectedAddress1, address1);
            VerifyTrue(string.Format("[SLV-3863] Verify Type Of Meter is changed '{0}' to '{1}'", expectedTypeOfMeter, typeOfMeter), expectedTypeOfMeter != typeOfMeter, expectedTypeOfMeter, typeOfMeter);
            VerifyTrue(string.Format("[SLV-3863] Verify Controller Install Date is changed '{0}' to '{1}'", expectedControllerInstallDate, controllerInstallDate), expectedControllerInstallDate != controllerInstallDate, expectedControllerInstallDate, controllerInstallDate);
            VerifyTrue(string.Format("[SLV-3863] Verify Comment is changed '{0}' to '{1}'", expectedComment, comment), expectedComment != comment, expectedComment, comment);
        }

        private void VerifyElectricalCounterEditableValues(EquipmentInventoryPage page
            , string expectedControllerId, string expectedUniqueAddress
            , string expectedAddress1, string expectedTypeOfMeter, string expectedControllerInstallDate, string expectedComment)
        {
            page.ElectricalCounterEditorPanel.SelectTab("Identity");
            page.ElectricalCounterEditorPanel.ExpandGroupsActiveTab();
            //Identity of the energy meter
            var controllerId = page.ElectricalCounterEditorPanel.GetControllerIdValue();
            var uniqueAddress = page.ElectricalCounterEditorPanel.GetUniqueAddressValue();

            page.ElectricalCounterEditorPanel.SelectTab("Inventory");
            page.ElectricalCounterEditorPanel.ExpandGroupsActiveTab();
            //Location
            var address1 = page.ElectricalCounterEditorPanel.GetAddress1Value();

            //About the energy meter
            var typeOfMeter = page.ElectricalCounterEditorPanel.GetTypeOfMeterValue();
            var controllerInstallDate = page.ElectricalCounterEditorPanel.GetControllerInstallDateValue();
            var comment = page.ElectricalCounterEditorPanel.GetCommentValue();

            VerifyEqual(string.Format("Verify Controller Id is '{0}'", expectedControllerId), expectedControllerId, controllerId);
            VerifyEqual(string.Format("Verify Unique Address is '{0}'", expectedUniqueAddress), expectedUniqueAddress, uniqueAddress);

            VerifyEqual(string.Format("Verify Address 1 is '{0}'", expectedAddress1), expectedAddress1, address1);
            VerifyEqual(string.Format("Verify Type of Meter is '{0}'", expectedTypeOfMeter), expectedTypeOfMeter, typeOfMeter);
            VerifyEqual(string.Format("Verify Controller Install Date is '{0}'", expectedControllerInstallDate), expectedControllerInstallDate, controllerInstallDate);
            VerifyEqual(string.Format("Verify Comment is '{0}'", expectedComment), expectedComment, comment);
        }

        #endregion //Verify methods

        #region Input XML data        

        private Dictionary<string, object> GetCommonTestData()
        {
            var realtimeGeozone = Settings.CommonTestData[0];
            var testData = new Dictionary<string, object>();
            testData.Add("Geozone", realtimeGeozone.Path);
            var controller = realtimeGeozone.Devices.Where(p => p.Type == DeviceType.Controller && p.Status == DeviceStatus.Working).FirstOrDefault();
            testData.Add("Controller", controller);
            var streetlights = realtimeGeozone.Devices.Where(p => p.Type == DeviceType.Streetlight && p.Status == DeviceStatus.Working && string.IsNullOrEmpty(p.Cluster)).ToList();
            testData.Add("Streetlights", streetlights);

            return testData;
        }
        
        private KeyValuePair<string, string> GetSingleNodeText(string testCaseName, string nodeName)
        {
            var xmlUtility = new XmlUtility(Settings.EI_TEST_DATA_FILE_PATH);
            return new KeyValuePair<string, string>(nodeName, xmlUtility.GetSingleNodeText(string.Format(Settings.EI_XPATH_PREFIX, testCaseName, nodeName)));
        }        

        private Dictionary<string, object> GetChildNodesText(string testCaseName, string nodeName)
        {
            var testData = new Dictionary<string, object>();
            var xmlUtility = new XmlUtility(Settings.EI_TEST_DATA_FILE_PATH);
            testData.Add(nodeName, xmlUtility.GetChildNodesText(string.Format(Settings.EI_XPATH_PREFIX, testCaseName, nodeName)));
            
            return testData;
        }

        private Dictionary<string, string> GetGeozoneTextData(string testCaseName)
        {
            var testData = new Dictionary<string, string>();
            testData.Add(GetSingleNodeText(testCaseName, "Geozone"));

            return testData;
        }

        private Dictionary<string, string> GetControllerTextData(string testCaseName)
        {
            var testData = new Dictionary<string, string>();
            testData.Add(GetSingleNodeText(testCaseName, "Controller"));

            return testData;
        }

        private Dictionary<string, string> GetStreetlightTextData(string testCaseName)
        {
            var testData = new Dictionary<string, string>();
            testData.Add(GetSingleNodeText(testCaseName, "Streetlight"));

            return testData;
        }

        private Dictionary<string, string> GetSwitchTextData(string testCaseName)
        {
            var testData = new Dictionary<string, string>();
            testData.Add(GetSingleNodeText(testCaseName, "Switch"));

            return testData;
        }

        private Dictionary<string, string> GetCounterTextData(string testCaseName)
        {
            var testData = new Dictionary<string, string>();
            testData.Add(GetSingleNodeText(testCaseName, "Counter"));

            return testData;
        }

        private Dictionary<string, string> GetControllerData(string testCaseName)
        {
            var xmlUtility = new XmlUtility(Settings.EI_TEST_DATA_FILE_PATH);
            var testData = new Dictionary<string, string>();
            var controllerInfo = xmlUtility.GetSingleNode(string.Format(Settings.EI_XPATH_PREFIX, testCaseName, "Controller"));
            testData.Add("ControllerName", controllerInfo.GetAttrVal("name"));
            testData.Add("ControllerId", controllerInfo.GetAttrVal("id"));

            return testData;
        }

        private Dictionary<string, string> GetTestDataOfEI_03()
        {
            return GetGeozoneTextData("EI_03");
        }    

        private Dictionary<string, object> GetTestDataOfEI_06()
        {
            var testCaseName = "EI_06";
            var testData = new Dictionary<string, object>();
            testData.AddRange(GetGeozoneTextData(testCaseName).ToDicObj());
            testData.AddRange(GetChildNodesText(testCaseName, "ExpectedRemoteControlProperties"));
            testData.AddRange(GetChildNodesText(testCaseName, "ExpectedOthersProperties"));                 

            return testData;
        }

        private Dictionary<string, string> GetTestDataOfEI_07()
        {
            var testCaseName = "EI_07";
            var testData = new Dictionary<string, string>();
            testData.AddRange(GetGeozoneTextData(testCaseName));
            testData.AddRange(GetControllerData(testCaseName));

            return testData;
        }

        private Dictionary<string, object> GetTestDataOfEI_10_02()
        {
            var testCaseName = "EI_10_02";            
            var testData = new Dictionary<string, object>();           
            testData.AddRange(GetChildNodesText(testCaseName, "ControlTechnologies"));

            return testData;
        }

        private Dictionary<string, string> GetTestDataOfEI_13()
        {
            return GetControllerTextData("EI_13");
        }        

        private Dictionary<string, string> GetTestDataOfEI_16_01()
        {
            var testCaseName = "EI_16_01";
            var testData = new Dictionary<string, string>();
            testData.AddRange(GetControllerData(testCaseName));

            return testData;
        }

        private Dictionary<string, object> GetTestDataOfEI_17_02()
        {
            var testCaseName = "EI_17_02";
            var testData = new Dictionary<string, object>();            
            testData.AddRange(GetChildNodesText(testCaseName, "EquipmentTypes"));

            return testData;
        }

        private Dictionary<string, string> GetTestDataOfEI_20()
        {
            var testCaseName = "EI_20";
            var testData = new Dictionary<string, string>();
            testData.AddRange(GetControllerData(testCaseName));

            return testData;
        }

        private Dictionary<string, string> GetTestDataOfEI_22()
        {
            var testCaseName = "EI_22";
            var testData = new Dictionary<string, string>();
            testData.AddRange(GetControllerData(testCaseName));

            return testData;
        }

        private Dictionary<string, object> GetTestDataOfEI_26()
        {
            var testCaseName = "EI_26";            
            var testData = new Dictionary<string, object>();            
            testData.AddRange(GetChildNodesText(testCaseName, "EquipmentTypes"));

            return testData;
        }        

        private Dictionary<string, string> GetTestDataOfEI_27_01()
        {
            var testCaseName = "EI_27_01";
            var testData = new Dictionary<string, string>();
            testData.AddRange(GetControllerData(testCaseName));

            return testData;
        }

        private Dictionary<string, object> GetTestDataOfEI_28_02()
        {
            var testCaseName = "EI_28_02";            
            var testData = new Dictionary<string, object>();            
            testData.AddRange(GetChildNodesText(testCaseName, "EquipmentTypes"));

            return testData;
        }
        
        private Dictionary<string, string> GetTestDataOfEI_30()
        {
            return GetSwitchTextData("EI_30");
        }

        private Dictionary<string, string> GetTestDataOfEI_31()
        {
            var testCaseName = "EI_31";
            var testData = new Dictionary<string, string>();
            testData.AddRange(GetControllerData(testCaseName));

            return testData;
        }

        private Dictionary<string, string> GetTestDataOfEI_33()
        {
            var testCaseName = "EI_33";
            var testData = new Dictionary<string, string>();
            testData.AddRange(GetControllerData(testCaseName));

            return testData;
        }
        
        private Dictionary<string, object> GetTestDataOfEI_37()
        {
            var testCaseName = "EI_37";
            var testData = new Dictionary<string, object>();
            testData.AddRange(GetChildNodesText(testCaseName, "EquipmentTypes"));

            return testData;
        }

        private Dictionary<string, string> GetTestDataOfEI_38_01()
        {
            var testCaseName = "EI_38_01";
            var testData = new Dictionary<string, string>();
            testData.AddRange(GetControllerData(testCaseName));

            return testData;
        }       
        
        private Dictionary<string, string> GetTestDataOfEI_63()
        {
            var testCaseName = "EI_63";
            var xmlUtility = new XmlUtility(Settings.EI_TEST_DATA_FILE_PATH);
            var testData = new Dictionary<string, string>();

            var geozoneInfo = xmlUtility.GetSingleNode(string.Format(Settings.EI_XPATH_PREFIX, testCaseName, "Geozone"));
            testData.Add("LatMin", geozoneInfo.GetAttrVal("latMin"));
            testData.Add("LatMax", geozoneInfo.GetAttrVal("latMax"));
            testData.Add("LngMin", geozoneInfo.GetAttrVal("lngMin"));
            testData.Add("LngMax", geozoneInfo.GetAttrVal("lngMax"));

            return testData;
        }
        
        private Dictionary<string, object> GetTestDataOfEI_80()
        {
            var testCaseName = "EI_80";
            var xmlUtility = new XmlUtility(Settings.EI_TEST_DATA_FILE_PATH);
            var testData = new Dictionary<string, object>();  

            testData.Add("LocationNoDevices", xmlUtility.GetSingleNodeText(string.Format(Settings.EI_XPATH_PREFIX, testCaseName, "LocationNoDevices")));
            testData.Add("LocationHasDevicesPartial", xmlUtility.GetSingleNodeText(string.Format(Settings.EI_XPATH_PREFIX, testCaseName, "LocationHasDevicesPartial")));
            testData.Add("LocationHasDevicesFull", xmlUtility.GetSingleNodeText(string.Format(Settings.EI_XPATH_PREFIX, testCaseName, "LocationHasDevicesFull")));

            var devices = xmlUtility.GetChildNodes(string.Format(Settings.EI_XPATH_PREFIX, testCaseName, "Devices"));
            var devicesModel = new List<DeviceModel>();
            foreach (var device in devices)
            {
                devicesModel.Add(new DeviceModel
                {
                    Name = device.GetAttrVal("name"),
                    Latitude = device.GetAttrVal("lat"),
                    Longitude = device.GetAttrVal("lng")
                });            
            }
            testData.Add("Devices", devicesModel);

            return testData;
        }

        private Dictionary<string, object> GetTestDataOfEI_1377758_1377757()
        {
            var testCaseName = "EI_1377758_1377757";
            var xmlUtility = new XmlUtility(Settings.EI_TEST_DATA_FILE_PATH);
            var testData = new Dictionary<string, object>();

            testData.Add("Location1", xmlUtility.GetSingleNodeText(string.Format(Settings.EI_XPATH_PREFIX, testCaseName, "Location1")));
            testData.Add("Location2", xmlUtility.GetSingleNodeText(string.Format(Settings.EI_XPATH_PREFIX, testCaseName, "Location2")));

            return testData;
        }

        #endregion //Input XML data

        #endregion //Private methods
    }
}